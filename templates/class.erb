/**
 * Class <%= @class_name %>
 * Compiled at <%= Time.now %>
 * By <%= ENV['USER'] %>
 */

<% @includes.each do |inc| %>
#include "<%= inc %>"
<% end -%>

// Static Methods

<% @static_functions.each do |modifier, data| -%>
<% data.each do |name, code| -%>
<% modifier = modifier == :private ? "_" : "" -%>
<%= generate_method_header("#{@class_name}_#{name}", code) -%>
<%= modifier %><%= @class_name %>_<%= name %> = {
<% if code[:args].count > 0 %>
    private ["<%= code[:args].join("\", \"") %>"];
<% end %>
<% code[:args].each_with_index do |arg, i| -%>
    <%= arg.to_s %> = DEFAULT_PARAM(<%= i %>, nil);
<% end %>
<%= code[:code] %>
};
<% end %>
<% end -%>

// Class Definition
CLASS("<%= @class_name %>")
    // Variables
<% @variables.each do |key, data| -%>
    PRIVATE VARIABLE("<%= data[:type] %>", "<%= key %>");

    // Setter for <%= key %>
    PUBLIC FUNCTION("<%= data[:type] %>", "set<%= key.capitalize %>") {
        MEMBER("<%= key %>", _this);
    };

    // Getter for <%= key %>
    PUBLIC FUNCTION("", "get<%= key.capitalize %>") {
        MEMBER("<%= key %>", nil)
    };
<% end -%>


    // Constructor
    PUBLIC FUNCTION("", "constructor") {
<% @variables.each do |key, data| -%>
        MEMBER("<%= key %>", <%= data[:default] %>);
<% end -%>
    };

    // Deconstructor
    PUBLIC FUNCTION("", "deconstructor") {
<% @variables.each do |key, data| -%>
        DELETE_VARIABLE("<%= key %>");
<% end -%>
    };

    // Methods
<% @class_functions.each do |modifier, data| -%>
<% data.each do |name, code| -%>
<% generate_method_header(name, code).split("\n").each do |l| %>
    <%= l -%>
<% end %>
<% modifier = modifier == :private ? "PRIVATE" : "PUBLIC" -%>
    <%= modifier %> FUNCTION("<%= code[:param_type] %>", "<%= name %>")  {
<% if code[:args].count > 0 %>
         private ["<%= code[:args].join("\", \"") %>"];
  <% end %>
<% code[:args].each_with_index do |arg, i| -%>
         <%= arg.to_s %> = DEFAULT_PARAM(<%= i %>, nil);
<% end %>
<%= code[:code] %>
    };
<% end %>
<% end %>
ENDCLASS;

// Snippets
<% @scripts.each do |script| %>
<%= script %>
<% end %>
