# The purpose of this module is reserve native SQF scripting commands.
#
# ==== Description
#
# While the current purpose is only to reserve the commands to tell the
# compiler how to handle builtin commands, they might be implemented
# in ruby somewhen to make software defined tests possible.
#
# ==== Issues
# 
# This module has been autogenerated from https://community.bistudio.com/wiki/Category:Scripting_Commands_Arma_3
# and thus might contain syntax errors (sqf only).
#
# It does not cover 100% of the available commands as it was not possible (yet) to 
# parse them all correctly out of the (bad) html Bohemia's wiki is written in.
module Rarma::SQF::Functions
    # Alternative Injury Simulation (AIS) end state.
    # 
    # ==== Description
    # 
    # Used to tell engine that script side healing is done when using "HandleHeal" event handler
    #  
    # ==== Syntax
    #
    #      AISFinishHeal [unit, healer, healercanheal]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - wounded  
    # *    +healer+ - Object - medic  
    # *    +healercanheal+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setAIS, ArmA_2:_Event_Handlers#HandleHeal, ArmA_3:_Event_Handlers#HandleHeal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/AISFinishHeal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    AISFinishHeal [_wounded, _medic, true];
    # 
    def AISFinishHeal _args
      "AISFinishHeal _args;" 
    end

    # Converts a position from PositionASL to PositionATL
    # 
    # ==== Syntax
    #
    #      ASLtoATL PositionASL
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      PositionATL
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # ATLtoASL, #getPos, #getPosATL, #getPosASL
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ASLtoATL
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ASLtoATL (getPosASL player) == getPosATL player
    # 
    def ASLtoATL _args
      "ASLtoATL _args;" 
    end

    # Converts a position from PositionATL to PositionASL
    # 
    # ==== Syntax
    #
    #      ATLtoASL PositionATL
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      PositionASL
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # ASLtoATL, #getPos, #getPosATL, #getPosASL
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ATLtoASL
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ATLtoASL (getPosATL player) == getPosASL player
    # 
    def ATLtoASL _args
      "ATLtoASL _args;" 
    end

    # Returns movement borders for HUD [min speed, max speed, min alt, max alt, min dir, max dir, position[x,y,z] or target]
    # 
    # ==== Syntax
    #
    #      HUDMovementLevels
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/HUDMovementLevels
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    HUDMovementLevels;
    # 
    def HUDMovementLevels 
      "HUDMovementLevels" 
    end

    # Returns the unlocalized text value of an object's side / a group's side or a side as:
    # 
    # ==== Description
    # 
    # East, West, Resistance, Civilian or Unknown
    #  
    # ==== Syntax
    #
    #      WFSideText objectOrGroupOrSide
    #
    # ==== Parameters
    # 
    # *    +objectOrGroupOrSide+ - Object, Group or Side  
    #
    # ==== Returns
    #
    #      String - unlocalized text value of objectOrGroupOrSide's Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/WFSideText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     WFSideText player 
    # 
    # ====== Example 2:
    # 
    #     WFSideText group player 
    # 
    # ====== Example 3:
    # 
    #     WFSideText West 
    # 
    def WFSideText _args
      "WFSideText _args;" 
    end

    # Absolute value of a real number
    # 
    # ==== Syntax
    #
    #      Number = abs n
    #
    # ==== Parameters
    # 
    # *    +n+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/abs
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _n = abs -3;
    #    Returns 3
    # 
    def abs _args
      "abs _args;" 
    end

    # Returns the current time acceleration factor
    # 
    # ==== Syntax
    #
    #      Number = accTime
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setAccTime
    # 
    # Official Wiki: https://community.bistudio.com/wiki/accTime
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _acc = accTime
    # 
    def accTime 
      "accTime" 
    end

    # ArcCosine of a number, result in Degrees
    # 
    # ==== Syntax
    #
    #      Number = acos x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/acos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _degrees = acos 0.5
    #    returns 60
    # 
    def acos _args
      "acos _args;" 
    end

    # Make a unit to perform an action.
    # 
    # ==== Description
    # 
    # Use the List of Actions for reference about the available actions and their syntax.
    # 
    # 
    # 
    # NOTE: While this command should be executed where unit is local, it is not always the case.
    # 
    # Actions such as "Eject", "GetOut", "GetInXXXX", "MoveToXXXX", etc can be executed on remote units
    #  
    # ==== Syntax
    #
    #      unit action action
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +action+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/action
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player action ["SitDown", player];
    # 
    # ====== Example 2:
    # 
    #    _soldier action ["Eject", vehicle _soldier];
    # 
    def action _obj, _args
      "_obj action _args;" 
    end

    # Returns a list of dikCodes of buttons assigned to the given user action.
    # 
    # ==== Description
    # 
    # You can find the action names in config class ControllerSchemes or user action names
    #  
    # ==== Syntax
    #
    #      Array = actionKeys userAction
    #
    # ==== Parameters
    # 
    # *    +userAction+ - String  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #actionKeysNames, #actionKeysNamesArray, #actionKeysImages
    # 
    # Official Wiki: https://community.bistudio.com/wiki/actionKeys
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _array = actionKeys "ReloadMagazine"
    # 
    def actionKeys _args
      "actionKeys _args;" 
    end

    # Returns a list of button images or names assigned to the given user action.
    # 
    # ==== Description
    # 
    # A maximum of maxKeys keys is listed.
    # 
    # You can find the action names in config class ControllerSchemes or user action names
    #  
    # ==== Syntax
    #
    #      Structured Text = actionKeysImages [userAction, maxKeys]
    #
    # ==== Parameters
    # 
    # *    +userAction+ - String  
    # *    +userAction+ - String  
    # *    +maxKeys+ - Number  
    #
    # ==== Returns
    #
    #      Structured Text
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #actionKeys, #actionKeysNames, #actionKeysNamesArray
    # 
    # Official Wiki: https://community.bistudio.com/wiki/actionKeysImages
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _text = actionKeysImages "ReloadMagazine"
    # 
    # ====== Example 2:
    # 
    #    _reload = actionKeysImages ["ReloadMagazine",1]will return "R" (incl. the quotation marks!)
    # 
    def actionKeysImages _args
      "actionKeysImages _args;" 
    end

    # Returns a list of button names assigned to the given user action.
    # 
    # ==== Description
    # 
    # A maximum of maxKeys keys is listed.
    # 
    # You can find the action names in config class ControllerSchemes or user action names
    #  
    # ==== Syntax
    #
    #      String = actionKeysNames [userAction, maxKeys]
    #
    # ==== Parameters
    # 
    # *    +userAction+ - String  
    # *    +UserAction+ - String  
    # *    +maxKeys+ - Number  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #actionKeys, #actionKeysImages, #actionKeysNamesArray
    # 
    # Official Wiki: https://community.bistudio.com/wiki/actionKeysNames
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _list = actionKeysNames "ReloadMagazine"
    # 
    def actionKeysNames _args
      "actionKeysNames _args;" 
    end

    # Returns a list of button names assigned to the given user action.
    # 
    # ==== Description
    # 
    # A maximum of maxKeys keys is listed.
    # 
    # You can find the action names in config class ControllerSchemes or user action names
    #  
    # ==== Syntax
    #
    #      actionKeysNamesArray [userAction, maxKeys]
    #
    # ==== Parameters
    # 
    # *    +userAction+ - String - name of the action  
    # *    +userAction+ - String - name of the action  
    # *    +maxKeys+ - Number - maximum number of listed keys  
    #
    # ==== Returns
    #
    #      Array of Strings
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #actionKeys, #actionKeysImages, #actionKeysNames
    # 
    # Official Wiki: https://community.bistudio.com/wiki/actionKeysNamesArray
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    list = actionKeysNamesArray "ReloadMagazine";
    # 
    # ====== Example 2:
    # 
    #    list = actionKeysNamesArray ["ReloadMagazine", 1];
    # 
    def actionKeysNamesArray _args
      "actionKeysNamesArray _args;" 
    end

    # Returns localized name of action
    # 
    # ==== Syntax
    #
    #      actionName action
    #
    # ==== Parameters
    # 
    # *    +action+ - String  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/actionName
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    actionName "ReloadMagazine"
    # 
    def actionName _args
      "actionName _args;" 
    end

    # Activates the listed addons.
    # 
    # ==== Description
    # 
    # The list of active addons is initialized during this function
    #  
    # ==== Syntax
    #
    #      activateAddons [addon1, ...]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #unitAddons, #activatedAddons
    # 
    # Official Wiki: https://community.bistudio.com/wiki/activateAddons
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    activateAddons ["BISOFP"];
    # 
    def activateAddons _args
      "activateAddons _args;" 
    end

    # Activates the given keyname for the current user profile.
    # 
    # ==== Description
    # 
    # The keys are used to unlock missions or campaigns.
    # 
    # See keys, keysLimit and doneKeys in the description.
    # 
    # ext file of the missions
    #  
    # ==== Syntax
    #
    #      activateKey keyname
    #
    # ==== Parameters
    # 
    # *    +keyname+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #deActivateKey, #isKeyActive
    # 
    # Official Wiki: https://community.bistudio.com/wiki/activateKey
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    activateKey "Mission04Key"
    # 
    def activateKey _args
      "activateKey _args;" 
    end

    # Returns a list of all activated addons
    # 
    # ==== Syntax
    #
    #      activatedAddons
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #activateAddons
    # 
    # Official Wiki: https://community.bistudio.com/wiki/activatedAddons
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _addons = activatedAddons;
    # 
    def activatedAddons 
      "activatedAddons" 
    end

    # Adds a backpack for a unit.
    # 
    # ==== Description
    # 
    # Classname list of available backpacks :
    # 
    # Arma 2 OA backpacks
    # 
    # Arma 3 backpacks - objects starting with "B_", starts with "B_AssaultPack_khk"
    #  
    # ==== Syntax
    #
    #      unit addBackpack packClassName
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +packClassName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeBackpack, #unitBackpack
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addBackpack
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    this addBackpack "TK_RPG_Backpack_EP1"
    # 
    # ====== Example 2:
    # 
    #    mySoldierDude addBackpack "US_Patrol_Pack_EP1"
    # 
    def addBackpack _obj, _args
      "_obj addBackpack _args;" 
    end

    # Add backpack(s) to the cargo space of vehicle.
    # 
    # ==== Description
    # 
    # Classname list of available backpacks is here
    #  
    # ==== Syntax
    #
    #      vehicle addBackpackCargo [packClassName,count]
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object - vehicle to add the backpack to  
    # *    +packClassName+ - String - backpack classname  
    # *    +count+ - Number - number of backpacks to add.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addBackpackCargoGlobal, #clearBackpackCargo, #getBackpackCargo, #unitBackpack, #addMagazineCargo, #addMagazineCargoGlobal, #addWeaponCargo, #addWeaponCargoGlobal, #addItemCargo, #addItemCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addBackpackCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    this addBackpackCargo ["TK_RPG_Backpack_EP1",2];
    # 
    # ====== Example 2:
    # 
    #    _apc addBackpackCargo ["US_Patrol_Pack_EP1",4];
    # 
    def addBackpackCargo _obj, _args
      "_obj addBackpackCargo _args;" 
    end

    # Add backpack(s) to the cargo space of vehicle.
    # 
    # ==== Description
    # 
    # MP synchronized.
    # 
    # Classname list of available backpacks is here
    #  
    # ==== Syntax
    #
    #      vehicle addBackpackCargoGlobal  [packClassName, count]
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object to add the Backpack to  
    # *    +packClassName+ - String,  See the topic Category:Weapons for reference about possible values.  
    # *    +count+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # MP Synchronized
    # 
    # ==== See Also
    # 
    # #addBackpackCargo, #clearBackpackCargo, #addMagazineCargo, #clearMagazineCargo, #clearWeaponCargo, #addMagazineCargoGlobal, #addWeaponCargo, #addWeaponCargoGlobal, #addItemCargo, #addItemCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addBackpackCargoGlobal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    this addBackpackCargoGlobal ["TK_RPG_Backpack_EP1",2];
    # 
    # ====== Example 2:
    # 
    #    _apc addBackpackCargoGlobal ["US_Patrol_Pack_EP1",4];
    # 
    def addBackpackCargoGlobal _obj, _args
      "_obj addBackpackCargoGlobal _args;" 
    end

    # Creates the camera shaking effect, like when you are near an explosion
    # 
    # ==== Syntax
    #
    #      addCamShake [power, duration, frequency]
    #
    # ==== Parameters
    # 
    # *    +power+ - Number - Strength of shake, practical range is 0 to 20 (how strong the camera movement will be).  
    # *    +duration+ - Number - Duration in seconds (how long the effect will last)  
    # *    +frequency+ - Number - Frequency of shake, practical range is 0 to 100 (how will be the rhythm).  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #enableCamShake, #setCamShakeDefParams, #setCamShakeParams, #resetCamShake
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addCamShake
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    addCamShake [10, 1, 25];
    # 
    # ====== Example 2:
    # 
    #    addCamShake [5, 5, 25];
    # 
    def addCamShake _args
      "addCamShake _args;" 
    end

    # Allow curator use of given addon
    # 
    # ==== Syntax
    #
    #      curatorObj addCuratorAddons addons
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    # *    +addons+ - Array of CfgPatches classes  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #removeCuratorAddons, #removeAllCuratorAddons, #curatorAddons
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addCuratorAddons
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    curatorObj addCuratorAddons ["A3_Armor_F_AMV","A3_Armor_F_Panther"];
    # 
    # ====== Example 2:
    # 
    #    curatorObj addCuratorAddons ["A3_Modules_F_Curator_Lightning"];
    # 
    # ====== Example 3:
    # 
    #    Addons can be stacked:curatorObj addCuratorAddons ["A3_Armor_F_AMV","A3_Armor_F_Panther"];
    #    curatorObj addCuratorAddons ["A3_Modules_F_Curator_Lightning"];
    #    diag_log curatorAddons curatorObj;
    #    [
    #    	"A3_Armor_F_AMV",
    #    	"A3_Armor_F_Panther",
    #    	"A3_Modules_F_Curator_Lightning"
    #    ]
    # 
    def addCuratorAddons _obj, _args
      "_obj addCuratorAddons _args;" 
    end

    # Adds or changes curator camera area (depends on if ID is already used)
    # 
    # ==== Syntax
    #
    #      curatorObj addCuratorCameraArea [cameraAreaID,position,radius]
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    # *    +cameraAreaID+ - Number  
    # *    +position+ - Position  
    # *    +radius+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #removeCuratorCameraArea, #removeAllCuratorCameraAreas, #curatorCameraArea
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addCuratorCameraArea
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myCurator addCuratorCameraArea [3,position mySoldier,300];
    # 
    def addCuratorCameraArea _obj, _args
      "_obj addCuratorCameraArea _args;" 
    end

    # Register objects which can be edited by a curator
    # 
    # ==== Syntax
    #
    #      curatorObj addCuratorEditableObjects [[objects],addCrew]
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    # *    +objects+ - Array  
    # *    +addCrew+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #removeCuratorEditableObjects, #curatorEditableObjects
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addCuratorEditableObjects
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    curatorModule addCuratorEditableObjects [[car],true]
    # 
    def addCuratorEditableObjects _obj, _args
      "_obj addCuratorEditableObjects _args;" 
    end

    # Adds or changes curator edit area (depends on if ID is already used)
    # 
    # ==== Syntax
    #
    #      curatorObj addCuratorEditingArea [editAreaID,position,radius]
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    # *    +editAreaID+ - Number  
    # *    +position+ - Position  
    # *    +radius+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #removeCuratorEditingArea, #removeAllCuratorEditingAreas, #curatorEditingArea
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addCuratorEditingArea
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myCurator addCuratorEditingArea [4,position player,1000];
    # 
    def addCuratorEditingArea _obj, _args
      "_obj addCuratorEditingArea _args;" 
    end

    # Adds or removes curator points.
    # 
    # ==== Description
    # 
    # Points can be only in range from 0 to 1
    #  
    # ==== Syntax
    #
    #      curatorObj addCuratorPoints points
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    # *    +points+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #curatorPoints
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addCuratorPoints
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    curatorModule addCuratorPoints 0.5
    # 
    def addCuratorPoints _obj, _args
      "_obj addCuratorPoints _args;" 
    end

    # Add an object to the editor and assign arguments.
    # 
    # ==== Description
    # 
    # Create script is,called with _new equal to true.
    # 
    # Returns the ID of the new EditorObject.
    # 
    # ,Subtype class is optional
    #  
    # ==== Syntax
    #
    #      map addEditorObject [type,[name1,value1,...],subtype class]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[name1,value1,...],subtype class]+ - Array -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addEditorObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def addEditorObject _obj, _args
      "_obj addEditorObject _args;" 
    end

    # Adds an event handler to a given unit.
    # 
    # ==== Description
    # 
    # For more information about event handlers and their types check the scripting topic Event handlers in this reference.
    # 
    # You may add as many event handlers of any type as you like to every unit, if you add an event handler of type "killed" and there already exists one, the old one doesn't get overwritten.
    # 
    # Use removeEventHandler to delete event handlers.
    # 
    # 
    # 
    # Every event will create an array named _this, which contains specific information about the particular event.
    # 
    # (e.
    # 
    # g.
    # 
    # the "killed" EH will return an array with 2 elements: the killed unit, and the killer.
    # 
    # )
    #  
    # ==== Syntax
    #
    #      Number = object addEventHandler [type, command]
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +[type, command]+ - Array  
    # *    +type+ - String - Event Handler type  
    # *    +command+ - Code or String - code that should be executed once the event occurs, by default executed in missionNamespace  
    #
    # ==== Returns
    #
    #      Number -The index of the currently added event handler is returned. Indices start at 0 for each unit and increment with each added event handler. (optional)
    #
    # ==== Multiplayer
    # 
    # Event handlers are persistent (i.e. they stay attached to a unit, even after it dies and respawns).
    # 
    # "Killed" and "Hit" eventhandlers are executed where given unit is local.
    # 
    # ==== See Also
    # 
    # EventHandlers list, #addMPEventHandler, #removeEventHandler, #removeAllEventHandlers
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _EHkilledIdx = player addEventHandler ["killed", {_this exec "playerKilled.sqs"}]
    # 
    # ====== Example 2:
    # 
    #    this addEventHandler ["killed", "hint format['Killed by %1',_this select 1]"]
    # 
    def addEventHandler _obj, _args
      "_obj addEventHandler _args;" 
    end

    # Create a new item and try to link it into goggles slot.
    # 
    # ==== Description
    # 
    # This command doesn't add NVGoggles.
    # 
    # Use addItem and assignItem or just linkItem for latter
    #  
    # ==== Syntax
    #
    #      unit addGoggles type
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +type+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #goggles, #removeGoggles
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addGoggles
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addGoggles "G_Tactical_Clear";
    # 
    # ====== Example 2:
    # 
    #    diver addGoggles "G_Diving";
    # 
    def addGoggles _obj, _args
      "_obj addGoggles _args;" 
    end

    # Add icon to a group.
    # 
    # ==== Description
    # 
    # Returns icon ID
    #  
    # ==== Syntax
    #
    #      group addGroupIcon properties
    #
    # ==== Parameters
    # 
    # *    +group+ - Group -  
    # *    +properties+ - Array -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #clearGroupIcons, #getGroupIcon, #getGroupIconParams, #groupIconSelectable, #groupIconsVisible, #onGroupIconClick, #removeGroupIcon, #setGroupIcon, #setGroupIconParams, #setGroupIconsSelectable, #setGroupIconsVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addGroupIcon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    groupName addGroupIcon ["b_inf",[offsetX,ofsetY]]
    # 
    def addGroupIcon _obj, _args
      "_obj addGroupIcon _args;" 
    end

    # Adds item to the weapon cargo space.
    # 
    # ==== Description
    # 
    # This is used for infantry weapons.
    # 
    # 
    # 
    # Note:
    #  
    # ==== Syntax
    #
    #      unit addHandgunItem item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addPrimaryWeaponItem, #addSecondaryWeaponItem, #weaponsItems, #handgunItems, #primaryWeaponItems, #secondaryWeaponItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addHandgunItem
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     player addHandgunItem "muzzle_snds_L";
    # 
    def addHandgunItem _obj, _args
      "_obj addHandgunItem _args;" 
    end

    # Creates a headgear item and tries to link it to headgear slot.
    # 
    # ==== Description
    # 
    # If slot is occupied with another item, the item in the slot will be replaced
    #  
    # ==== Syntax
    #
    #      unit addHeadgear item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #headgear, #removeHeadgear
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addHeadgear
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addHeadgear "H_HelmetB";
    # 
    def addHeadgear _obj, _args
      "_obj addHeadgear _args;" 
    end

    # Creates new item and tries to add it into inventory.
    # 
    # ==== Description
    # 
    # Inventory must have enough space to accomodate new item or command will fail
    #  
    # ==== Syntax
    #
    #      unit addItem item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeItem, #assignItem, #unassignItem, #assignedItems, #linkItem, #unlinkItem, #removeAllAssignedItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addItem
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    bluforUnit addItem "NVGoggles";
    #    bluforUnit assignItem "NVGoggles";
    #    opforUnit addItem "NVGoggles_OPFOR";
    #    opforUnit assignItem "NVGoggles_OPFOR";
    #    independentUnit addItem "NVGoggles_INDEP";
    #    independentUnit assignItem "NVGoggles_INDEP";
    # 
    def addItem _obj, _args
      "_obj addItem _args;" 
    end

    # Create new items and store them to the weapon holder
    # 
    # ==== Syntax
    #
    #      unit addItemCargo [item, count]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +[item, count]+ - Array  
    # *    +item+ - String  
    # *    +count+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addItemCargoGlobal, #clearItemCargo, #addMagazineCargo, #addMagazineCargoGlobal, #addWeaponCargo, #addWeaponCargoGlobal, #addBackpackCargo, #addBackpackCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addItemCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    rearmTruckOne addItemCargo ["optic_ARCO", 10]
    # 
    def addItemCargo _obj, _args
      "_obj addItemCargo _args;" 
    end

    # Create new items and store them to the weapon holder
    # 
    # ==== Syntax
    #
    #      unit addItemCargoGlobal [item, count]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +[item, count]+ - Array  
    # *    +item+ - String  
    # *    +count+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Command is executed on all connected clients in multiplayer.
    # 
    # ==== See Also
    # 
    # #addItemCargo, #clearItemCargoGlobal, #addMagazineCargo, #addMagazineCargoGlobal, #addWeaponCargo, #addWeaponCargoGlobal, #addBackpackCargo, #addBackpackCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addItemCargoGlobal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    rearmTruckOne addItemCargoGlobal ["optic_ARCO", 10]
    # 
    def addItemCargoGlobal _obj, _args
      "_obj addItemCargoGlobal _args;" 
    end

    # Adds count items of type name into the weapon pool (used in the campaign to transfer items to the next mission)
    # 
    # ==== Syntax
    #
    #      addItemPool ["itemName", count]
    #
    # ==== Parameters
    # 
    # *    +"itemName"+ - String - Item name  
    # *    +count+ - Number - Number of items to add  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #clearItemPool
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addItemPool
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    addItemPool ["ItemGPS", 5];
    # 
    def addItemPool _args
      "addItemPool _args;" 
    end

    # Create new item and store it to soldier's backpack.
    # 
    # ==== Description
    # 
    # The item can also be a a weapon or a magazine
    #  
    # ==== Syntax
    #
    #      unit addItemToBackpack item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addItemToUniform addItemToVest
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addItemToBackpack
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addItemToBackpack "arifle_MXM_Hamr_pointer_F";
    # 
    # ====== Example 2:
    # 
    #    player addItemToBackpack "itemGPS";
    # 
    def addItemToBackpack _obj, _args
      "_obj addItemToBackpack _args;" 
    end

    # Create new item and store it to soldier's uniform.
    # 
    # ==== Description
    # 
    # The item can also be a a weapon or a magazine
    #  
    # ==== Syntax
    #
    #      unit addItemToUniform item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addItemToBackpack addItemToVest
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addItemToUniform
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addItemToUniform "itemGPS";
    # 
    # ====== Example 2:
    # 
    #    player addItemToUniform "hgun_Rook40_F";
    # 
    def addItemToUniform _obj, _args
      "_obj addItemToUniform _args;" 
    end

    # Create new item and store it to soldier's vest.
    # 
    # ==== Description
    # 
    # The item can also be a a weapon or a magazine
    #  
    # ==== Syntax
    #
    #      unit addItemToVest item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addItemToBackpack addItemToUniform
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addItemToVest
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addItemToVest "itemGPS";
    # 
    # ====== Example 2:
    # 
    #    player addItemToVest "hgun_Rook40_F";
    # 
    def addItemToVest _obj, _args
      "_obj addItemToVest _args;" 
    end

    # Adds score to the Xbox Live Statistics score for the given unit (or the commander unit of the given vehicle).
    # 
    # ==== Description
    # 
    # (Also available in OFPE & VBS2)
    #  
    # ==== Syntax
    #
    #      unit addLiveStats score
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addLiveStats
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addLiveStats 10
    # 
    def addLiveStats _obj, _args
      "_obj addLiveStats _args;" 
    end

    # The format of handler is [type,command].
    # 
    # ==== Description
    # 
    # Check scripting topic Event handlers for more information.
    # 
    # The index of the current handler is returned
    #  
    # ==== Syntax
    #
    #      unitName addMPEventHandler [type, command];
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object - object to monitor  
    # *    +type+ - String - event handler name  
    # *    +command+ - String or Code - code to execute  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # EventHandlers list, #removeMPEventHandler, #removeAllMPEventHandlers
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addMPEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _index = player addMPEventHandler ["mpkilled", {Null = _this execVM "playerkilled.sqf";}]; 
    # 
    def addMPEventHandler _obj, _args
      "_obj addMPEventHandler _args;" 
    end

    # Add a magazine to a person .
    # 
    # ==== Description
    # 
    # Infantry units can only carry a specific number of magazines, once the magazine slots are filled, any further addMagazine commands are ignored.
    # 
    # Note: When you add a new weapon via scripting commands as well as the magazines for it, the addMagazine command has to be given before the addWeapon command, otherwise the weapon won't be loaded
    #  
    # ==== Syntax
    #
    #      unitName addMagazine magazineName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object - person to add the magazines to  
    # *    +magazineName+ - String - magazine name. See the topic Category:Weapons for reference about possible values.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazineGlobal, #addMagazine_array, #addMagazines, #addMagazineCargo, #addMagazineCargoGlobal, #addMagazinePool, #addMagazineTurret, #removeMagazine, #removeMagazines, #addWeapon
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addMagazine
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addMagazine "M16";
    # 
    def addMagazine _obj, _args
      "_obj addMagazine _args;" 
    end

    # Add magazines to the cargo space of vehicles, which can be taken out by infantry units.
    # 
    # ==== Description
    # 
    # Once the magazine cargo space is filled up, any further addMagazineCargo commands are ignored
    #  
    # ==== Syntax
    #
    #      vehicleName addMagazineCargo [magazineName, count]
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object - vehicle to add the magazines to  
    # *    +[magazineName, count]+ - Array  
    # *    +magazineName+ - String - magazine name. See the topic Category:Weapons for reference about possible values.  
    # *    +count+ - Number - number of magazines to add  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazineCargoGlobal, #addMagazine, #addMagazineGlobal, #addMagazine_array, #addMagazines, #addMagazinePool, #addMagazineTurret, #clearMagazineCargo, #addWeaponCargo, #clearWeaponCargo, #getMagazineCargo, #addItemCargo, #addItemCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addMagazineCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _truck addMagazineCargo ["M16", 5];
    # 
    def addMagazineCargo _obj, _args
      "_obj addMagazineCargo _args;" 
    end

    # Add magazines to the cargo space of vehicles, which can be taken out by infantry units.
    # 
    # ==== Description
    # 
    # MP Synchronized
    #  
    # ==== Syntax
    #
    #      vehicleName addMagazineCargoGlobal [magazineName, count]
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object - vehicle to add the magazines to  
    # *    +[magazineName, count]+ - Array  
    # *    +magazineName+ - String - magazine name. See the topic Category:Weapons for reference about possible values.  
    # *    +count+ - Number - number of magazines to add  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazineCargo, #addMagazineGlobal, #addMagazine, #addMagazine_array, #addMagazines, #addMagazinePool, #addMagazineTurret, #clearMagazineCargo, #addWeaponCargo, #clearWeaponCargo, #clearWeaponCargo, #addWeaponCargoGlobal, #addBackpackCargoGlobal, #addItemCargo, #addItemCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addMagazineCargoGlobal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _truck addMagazineCargoGlobal ["M16", 5];
    # 
    def addMagazineCargoGlobal _obj, _args
      "_obj addMagazineCargoGlobal _args;" 
    end

    # Adds a magazine to the unit.
    # 
    # ==== Description
    # 
    # 
    # 
    # Note: You may create invalid combinations by adding more magazines than the free space in unit's inventory allows.
    # 
    # When doing so, application behaviour is undefined
    #  
    # ==== Syntax
    #
    #      unit addMagazineGlobal magazineName
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +magazineName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazine, #addMagazine_array, #addMagazines, #addMagazineCargo, #addMagazineCargoGlobal, #addMagazinePool, #addMagazineTurret
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addMagazineGlobal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addMagazineGlobal "30Rnd_65x39_caseless_mag";
    # 
    def addMagazineGlobal _obj, _args
      "_obj addMagazineGlobal _args;" 
    end

    # Add magazines to the magazine pool, of which the player may choose in the following mission.
    # 
    # ==== Description
    # 
    # Available in campaigns only
    #  
    # ==== Syntax
    #
    #      addMagazinePool [magazineName, count]
    #
    # ==== Parameters
    # 
    # *    +magazineName+ - String - magazine name. See the topic Category:Weapons for reference about possible values.  
    # *    +count+ - Number - number of magazines to add  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazineGlobal, #addMagazine, #addMagazine_array, #addMagazines, #addMagazineCargo, #addMagazineCargoGlobal, #addMagazineTurret, #addWeaponPool, #clearMagazinePool, #queryMagazinePool
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addMagazinePool
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    addMagazinePool ["M16", 20];
    # 
    def addMagazinePool _args
      "addMagazinePool _args;" 
    end

    # Adds a magazine to the turret.
    # 
    # ==== Description
    # 
    # Use turret path [-1] for driver's turret.
    # 
    # Note: you may create invalid combinations by using this function, for example by adding 20 grenades.
    # 
    # When doing so, application behaviour is undefined
    #  
    # ==== Syntax
    #
    #      vehicle addMagazineTurret [magazineName, turretPath]
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +[weaponName, turretPath]+ - Array  
    # *    +magazineName+ - String  
    # *    +turretPath+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazineGlobal, #addMagazine, #addMagazine_array, #addMagazines, #addMagazineCargo, #addMagazineCargoGlobal, #addMagazinePool, #magazinesTurret, #removeMagazinesTurret, #removeMagazineTurret, #weaponsTurret
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addMagazineTurret
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _tank addMagazineTurret ["SmokeLauncherMag",[0,0]];
    # 
    # ====== Example 2:
    # 
    #    _tank addMagazineTurret ["20Rnd_120mmSABOT_M1A2",[0]];
    # 
    def addMagazineTurret _obj, _args
      "_obj addMagazineTurret _args;" 
    end

    # Adds a magazine to a person with said ammunition count.
    # 
    # ==== Description
    # 
    # Note: When you add a new weapon via scripting commands as well as the magazines for it, the addMagazine command has to be given before the addWeapon command, otherwise the weapon won't be loaded.
    # 
    # 
    # 
    # Note: In Arma 3 this command accepts global arguments, i.
    # 
    # e.
    # 
    # you can use it on the server to give remote unit a magazine with limited ammo
    #  
    # ==== Syntax
    #
    #      unitName addMagazine [magazineName, ammoCount]
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object - person to add the magazine to  
    # *    +magazineName+ - String - magazine name. See the topic Category:Weapons for reference about possible values.  
    # *    +ammoCount+ - Number - number of bullets in the magazine  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazine, #addMagazineGlobal, #addMagazines, #addMagazineCargo, #addMagazineCargoGlobal, #addMagazinePool, #addMagazineTurret, #removeMagazine, #removeMagazines, #addWeapon
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addMagazine
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addMagazine ["30Rnd_556x45_STANAG", 15];
    # 
    def addMagazine _obj, _args
      "_obj addMagazine _args;" 
    end

    # Adds multiple magazines to the unit
    # 
    # ==== Syntax
    #
    #      unit addMagazines [magazineName, count]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +[magazineName, count]+ - Array  
    # *    +magazineName+ - String  
    # *    +count+ - Number - Number of magazines.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazineGlobal, #addMagazine, #addMagazine_array, #addMagazineCargo, #addMagazineCargoGlobal, #addMagazinePool, #addMagazineTurret
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addMagazines
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addMagazines ["30Rnd_65x39_caseless_mag", 3];
    # 
    def addMagazines _obj, _args
      "_obj addMagazines _args;" 
    end

    # Adds a new menu button.
    # 
    # ==== Description
    # 
    # Priority is optional
    #  
    # ==== Syntax
    #
    #      map addMenu [text,priority]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[text,priority]+ - Array -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addMenu
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    example
    # 
    def addMenu _obj, _args
      "_obj addMenu _args;" 
    end

    # Creates a new menu item.
    # 
    # ==== Description
    # 
    # Menu can be "file" or "view",index is index,as returned from addMenu command.
    # 
    # priority is optional and determines,where in the menu the item will reside (higher priority items first)
    #  
    # ==== Syntax
    #
    #      map addMenuItem [menu or index,text,command,priority]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[menu or index,text,command,priority]+ - Array -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addMenuItem
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def addMenuItem _obj, _args
      "_obj addMenuItem _args;" 
    end

    # Adds mission event handler.
    # 
    # ==== Description
    # 
    # Every event will create an array named _this, which contains specific information about the particular event.
    # 
    # Available mission event handlers:
    # 
    # "Loaded"
    # 
    # "Ended" - Triggered when the mission is successfully ended.
    # 
    # In variable _this is stored type of the end ("end1","end2", etc.
    # 
    # ).
    # 
    # "Draw3D" - It seems "Draw3D" mission EH is connected to your primary display.
    # 
    # It will stop firing as soon as you Alt+Tab from the game and resume when you come back (unless Arma 3 client is launched with -window -nopause params).
    # 
    # "Draw3D" does not fire at all on a dedicated server
    #  
    # ==== Syntax
    #
    #      addMissionEventHandler [type, command]
    #
    # ==== Parameters
    # 
    # *    +type+ - String  
    # *    +command+ - Code or String - By default executed in missionNamespace  
    #
    # ==== Returns
    #
    #      Number - The index of the currently added mission event handler is returned.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeMissionEventHandler, #removeAllMissionEventHandlers
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addMissionEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _id = addMissionEventHandler ["Ended",{_this exec "missionEnded.sqs"}];
    # 
    def addMissionEventHandler _args
      "addMissionEventHandler _args;" 
    end

    # Add music track event handler.
    # 
    # ==== Description
    # 
    # Returns id of the handler or -1 when failed
    #  
    # ==== Syntax
    #
    #      addMusicEventHandler [type, function]
    #
    # ==== Parameters
    # 
    # *    +type+ - String - "MusicStart" or "MusicStop"  
    # *    +function+ - String or Code. Passed params array 0: CfgMusic class name, 1: event handler id  
    #
    # ==== Returns
    #
    #      Number - event handler id
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setMusicEventHandler, #playMusic, #removeMusicEventHandler, #removeAllMusicEventHandlers
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addMusicEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ehID = addMusicEventHandler ["MusicStart", {hint str _this}];
    # 
    # ====== Example 2:
    # 
    #    _ehID = addMusicEventHandler ["MusicStop", {hint str _this}];
    # 
    def addMusicEventHandler _args
      "addMusicEventHandler _args;" 
    end

    # Adds item to the weapon cargo space.
    # 
    # ==== Description
    # 
    # This is used for infantry weapons
    #  
    # ==== Syntax
    #
    #      unit addPrimaryWeaponItem item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addSecondaryWeaponItem, #addHandgunItem, #weaponsItems, #handgunItems, #primaryWeaponItems, #secondaryWeaponItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addPrimaryWeaponItem
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addPrimaryWeaponItem "muzzle_snds_H";
    # 
    def addPrimaryWeaponItem _obj, _args
      "_obj addPrimaryWeaponItem _args;" 
    end

    # This event handler will detect if a missionNamespace variable (it is attached to) has been broadcast over network with publicVariable, publicVariableClient or publicVariableServer commands and will execute EH code upon detection.
    # 
    # ==== Description
    # 
    # Arguments passed to the code in _this array are:
    # 
    # _this select 0: String - broadcast variable name (same variable name EH is attached to)
    # 
    # _this select 1: Anything - broadcast variable value
    # 
    # Please note:
    # 
    # * EH works only in Multiplayer environment.
    # 
    # * EH will not fire on the machine that executed broadcast command, only on the machines that receive the broadcast.
    # 
    # * The value of broadcast variable can be exactly the same, it is the actual broadcast that triggers EH not the change in variable
    #  
    # ==== Syntax
    #
    #      varName addPublicVariableEventHandler code
    #
    # ==== Parameters
    # 
    # *    +varName+ - String - missionNamespace variable name  
    # *    +code+ - Code - By default, the code is executed in missionNamespace  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #publicVariable, #publicVariableClient, #publicVariableServer
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addPublicVariableEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "publicThis" addPublicVariableEventHandler {
    #    	hint format [
    #    		"%1 has been updated to: %2",
    #    		_this select 0,
    #    		_this select 1
    #    	]
    #    };
    # 
    # ====== Example 2:
    # 
    #    Client:"'^:)123BURP,+=lol" addPublicVariableEventHandler {hint ("NUTS are " + (_this select 1))};
    #    Server:missionNamespace setVariable ["'^:)123BURP,+=lol", "craZZZZy"];
    #    publicVariable "'^:)123BURP,+=lol";
    # 
    def addPublicVariableEventHandler _obj, _args
      "_obj addPublicVariableEventHandler _args;" 
    end

    # Add a number to the rating of a unit.
    # 
    # ==== Description
    # 
    # Negative values can be used to reduce the rating.
    # 
    # This command is usually used to reward for completed mission objectives.
    # 
    # The rating is given at the end of the mission and is automatically adjusted when killing enemies or friendlies.
    # 
    # 
    # 
    # When the rating gets below -2000, the unit's side switches to "ENEMY" and the unit is attacked by everyone
    #  
    # ==== Syntax
    #
    #      unitName addRating rating
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +rating+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Side relations, Rating Values, #rating, #rank, #setUnitRank
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addRating
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addRating 2000
    # 
    def addRating _obj, _args
      "_obj addRating _args;" 
    end

    # Adds resources to a team member
    # 
    # ==== Syntax
    #
    #      teamMember addResources [resource1, resource2, ...
    #
    # ==== Parameters
    # 
    # *    +member+ - Team Member -  
    # *    +resource1+ - dataType  
    # *    +resource2+ - dataType  
    #
    # ==== Returns
    #
    #      returnValue
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addResources
    #
    # ==== Examples
    # 
    def addResources _obj, _args
      "_obj addResources _args;" 
    end

    # Add a number to the score of a unit.
    # 
    # ==== Description
    # 
    # This score is shown in multiplayer in the "I" screen.
    # 
    # Negative values will remove from the score
    #  
    # ==== Syntax
    #
    #      unitName addScore score
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +score+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #score
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addScore
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addScore 10
    # 
    def addScore _obj, _args
      "_obj addScore _args;" 
    end

    # MP Only: adds side score.
    # 
    # ==== Description
    # 
    # This is shown in the MP score tab as the total score
    #  
    # ==== Syntax
    #
    #      side addScoreSide value
    #
    # ==== Parameters
    # 
    # *    +side+ - Side  
    # *    +value+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addScore, #score, #scoreSide
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addScoreSide
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    west addScoreSide 10;
    # 
    def addScoreSide _obj, _args
      "_obj addScoreSide _args;" 
    end

    # Adds item to the weapon cargo space.
    # 
    # ==== Description
    # 
    # This is used for infantry weapons
    #  
    # ==== Syntax
    #
    #      unit addSecondaryWeaponItem item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addPrimaryWeaponItem, #addHandgunItem, #weaponsItems, #handgunItems, #primaryWeaponItems, #secondaryWeaponItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addSecondaryWeaponItem
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def addSecondaryWeaponItem _obj, _args
      "_obj addSecondaryWeaponItem _args;" 
    end

    # Add a unit into the list of units available for Team Switch
    # 
    # ==== Syntax
    #
    #      addSwitchableUnit unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Team_Switch, #removeSwitchableUnit, #switchableUnits
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addSwitchableUnit
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    addSwitchableUnit player
    # 
    def addSwitchableUnit _args
      "addSwitchableUnit _args;" 
    end

    # Add given member to given team
    # 
    # ==== Syntax
    #
    #      team addTeamMember member
    #
    # ==== Parameters
    # 
    # *    +team+ - Team Member  
    # *    +member+ - Team Member  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createTeam, #deleteTeam, #forEachMemberTeam, #removeTeamMember, #teamMember, #teamMemberNull, #teamName, #teams, #teamType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addTeamMember
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _team addTeamMember _teamMember;
    # 
    def addTeamMember _obj, _args
      "_obj addTeamMember _args;" 
    end

    # Create a new uniform and try to link it into uniform slot
    # 
    # ==== Syntax
    #
    #      unit addUniform type
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +type+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeUniform, #uniform
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addUniform
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _unit addUniform "U_B_CombatUniform_mcam";
    # 
    def addUniform _obj, _args
      "_obj addUniform _args;" 
    end

    # Adds a specified vehicle for use by a specified AI led group.
    # 
    # ==== Description
    # 
    # The vehicle will be considered as an available vehicle for use by his group
    #  
    # ==== Syntax
    #
    #      groupName addVehicle vehicleName
    #
    # ==== Parameters
    # 
    # *    +groupName+ - Group  
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #leaveVehicle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addVehicle
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _group addVehicle _vehicle
    # 
    def addVehicle _obj, _args
      "_obj addVehicle _args;" 
    end

    # Create a new vest and try to link it into vest slot
    # 
    # ==== Syntax
    #
    #      unit addVest type
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +type+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeVest, #vest
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addVest
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addVest "V_TacVest_blk_POLICE";
    # 
    def addVest _obj, _args
      "_obj addVest _args;" 
    end

    # Adds (or inserts when index is given) a new waypoint to a group.
    # 
    # ==== Description
    # 
    # The waypoint is placed randomly within a circle with the given center and radius.
    # 
    # The function returns a waypoint with format [group, index]
    #  
    # ==== Syntax
    #
    #      Array = groupName addWaypoint [center, radius] or [center, radius, index]
    #
    # ==== Parameters
    # 
    # *    +groupName+ - Group  
    # *    +[center, radius]+ - Array  
    # *    +center+ - Position or Object  
    # *    +index+ - Number  
    #
    # ==== Returns
    #
    #      Array - format Waypoint
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypoints, #deleteWaypoint, #copyWaypoints, #setCurrentWaypointsetWaypointBehaviour, #setWaypointCombatMode, #setWaypointCompletionRadius, #setWaypointDescription, #setWaypointFormation, #setWaypointHousePosition, #setWaypointPosition, #setWaypointScript, #setWaypointSpeed, #setWaypointStatements, #setWaypointTimeout, #setWaypointType, #setWaypointVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addWaypoint
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _wp = grp addWaypoint [position player, 0]
    # 
    def addWaypoint _obj, _args
      "_obj addWaypoint _args;" 
    end

    # Add a weapon to a unit.
    # 
    # ==== Description
    # 
    # The unit must be local to the computer where command is executed.
    # 
    # For a global version of this command see addWeaponGlobal.
    # 
    # Infantry units can only carry a specific number of weapons, once the weapon slots are filled, any further addWeapon commands are ignored
    #  
    # ==== Syntax
    #
    #      unit addWeapon weapon
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - unit or vehicle to add the weapon to  
    # *    +weapon+ - String - weapon class name. See the topic Category:Weapons for reference about possible values.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWeaponGlobal, #removeWeapon, #removeAllWeapons, #addMagazine
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addWeapon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addMagazine "30Rnd_556x45_Stanag";
    #    player addWeapon "BAF_L85A2_RIS_SUSAT";
    # 
    # ====== Example 2:
    # 
    #    An_2 addMagazine "100Rnd_762x51_M240";
    #    An_2 addWeapon "M240_veh";
    # 
    def addWeapon _obj, _args
      "_obj addWeapon _args;" 
    end

    # Add weapons to the cargo space of vehicles, which can be taken out by infantry units.
    # 
    # ==== Description
    # 
    # Once the weapon cargo space is filled up, any further addWeaponCargo commands are ignored
    #  
    # ==== Syntax
    #
    #      vehicleName addWeaponCargo [weaponName, count]
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object - vehicle to add the weapons to  
    # *    +[weaponName, count]+ - Array  
    # *    +weaponName+ - String - weapon name. See the topic Category:Weapons for reference about possible values.  
    # *    +count+ - Number - number of weapons to add.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWeaponCargoGlobal, #addMagazineCargo, #addMagazineCargoGlobal, #clearMagazineCargo, #clearWeaponCargo, #getWeaponCargo, #addItemCargo, #addItemCargoGlobal, #addBackpackCargo, #addBackpackCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addWeaponCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _truck addWeaponCargo ["M16",5]
    # 
    def addWeaponCargo _obj, _args
      "_obj addWeaponCargo _args;" 
    end

    # Add weapons to the cargo space of vehicles, which can be taken out by infantry units.
    # 
    # ==== Description
    # 
    # 
    # 
    # MP Synchronized
    #  
    # ==== Syntax
    #
    #      vehicleName addWeaponCargoGlobal [weaponName, count]
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object - vehicle to add the weapons to  
    # *    +[weaponName, count]+ - Array  
    # *    +weaponName+ - String - weapon name. See the topic Category:Weapons for reference about possible values.  
    # *    +count+ - Number - number of weapons to add.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazineCargo, #clearMagazineCargo, #clearWeaponCargo, #addMagazineCargoGlobal, #addBackpackCargo, #addBackpackCargoGlobal, #addItemCargo, #addItemCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addWeaponCargoGlobal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _truck addWeaponCargoGlobal["M16",5];
    # 
    def addWeaponCargoGlobal _obj, _args
      "_obj addWeaponCargoGlobal _args;" 
    end

    # Add a weapon to a unit.
    # 
    # ==== Description
    # 
    # Infantry units can only carry a specific number of weapons, once the weapon slots are filled, any further addWeaponGlobal commands are ignored.
    # 
    # To make sure the added weapon is loaded and ready, add the magazine first
    #  
    # ==== Syntax
    #
    #      unit addWeaponGlobal weapon
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - unit or vehicle to add the weapon to  
    # *    +weapon+ - String - weapon class name  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeWeaponGlobal, #addWeapon, #addMagazine, #addMagazineGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addWeaponGlobal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    {
    #    	_x addMagazineGlobal "Laserbatteries";
    #    	_x addWeaponGlobal "Laserdesignator";
    #    } forEach allUnits;
    # 
    # ====== Example 2:
    # 
    #    {
    #    	if (typeOf _x == "O_Heli_Attack_02_black_F") then {
    #    		_x addMagazineGlobal "38Rnd_80mm_rockets";
    #    		_x addWeaponGlobal "rockets_Skyfire";
    #    	};
    #    } forEach vehicles;
    # 
    def addWeaponGlobal _obj, _args
      "_obj addWeaponGlobal _args;" 
    end

    # Add weapons to the weapon pool, of which the player may choose in the following mission.
    # 
    # ==== Description
    # 
    # Available in campaigns only
    #  
    # ==== Syntax
    #
    #      addWeaponPool [weaponName, count]
    #
    # ==== Parameters
    # 
    # *    +weaponName+ - String - weapon name. See the topic Category:Weapons for reference about possible values.  
    # *    +count+ - Number - number of weapons to add  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazinePool, #clearWeaponPool, #queryWeaponPool
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addWeaponPool
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    addWeaponPool ["M16",5]
    # 
    def addWeaponPool _args
      "addWeaponPool _args;" 
    end

    # Return a person for a given agent
    # 
    # ==== Syntax
    #
    #      agent teamMember
    #
    # ==== Parameters
    # 
    # *    +teamMember+ - Team Member  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #agents, #createAgent, #forEachMemberAgent, #isAgent
    # 
    # Official Wiki: https://community.bistudio.com/wiki/agent
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def agent _args
      "agent _args;" 
    end

    # Return a list of agents in the current mission
    # 
    # ==== Syntax
    #
    #      agents
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array of Team Members
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #agent, #createAgent, #isAgent, #forEachMemberAgent, #entities, #vehicles
    # 
    # Official Wiki: https://community.bistudio.com/wiki/agents
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    {agent _x moveTo position player} forEach agents;
    # 
    def agents 
      "agents" 
    end

    # Returns the object's (main turret) aiming position
    # 
    # ==== Syntax
    #
    #      aimPos object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Array - format PositionASL
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #eyePos, #getPosASL, #weaponDirection
    # 
    # Official Wiki: https://community.bistudio.com/wiki/aimPos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    aimPos player
    # 
    def aimPos _args
      "aimPos _args;" 
    end

    # Returns how good the weapon of the vehicle is aimed at the target
    # 
    # ==== Syntax
    #
    #      vehicle aimedAtTarget [target, weapon]
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +[target, weapon]+ - Array  
    # *    +target+ - Object  
    # *    +weapon+ - String - (optional)  
    #
    # ==== Returns
    #
    #      Number - 0...1
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #fireAtTarget
    # 
    # Official Wiki: https://community.bistudio.com/wiki/aimedAtTarget
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _aimingQuality = heli aimedAtTarget [target];
    # 
    # ====== Example 2:
    # 
    #     _aimingQuality = heli aimedAtTarget [target,"M197"];
    # 
    def aimedAtTarget _obj, _args
      "_obj aimedAtTarget _args;" 
    end

    # Checks a side of the airport.
    # 
    # ==== Description
    # 
    # ID is the number to identify which airport on the island you want to check.
    # 
    # 
    # 
    # Possible values for sara are:
    # 
    # 0 - Paraiso
    # 
    # 1 - Rahmadi
    # 
    # 2 - Pita
    # 
    # 3 - Antigua
    #  
    # ==== Syntax
    #
    #      airportSide id
    #
    # ==== Parameters
    # 
    # *    +id+ - Number  
    #
    # ==== Returns
    #
    #      Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setAirportSide
    # 
    # Official Wiki: https://community.bistudio.com/wiki/airportSide
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    airportSide 0
    # 
    def airportSide _args
      "airportSide _args;" 
    end

    # Check if given vehicle/person/building is alive (i.
    # 
    # ==== Description
    # 
    # e.
    # 
    # not dead or destroyed)
    #  
    # ==== Syntax
    #
    #      alive object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object to test  
    #
    # ==== Returns
    #
    #      Boolean: true when alive, false when dead
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setDamage, #damage
    # 
    # Official Wiki: https://community.bistudio.com/wiki/alive
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?!(alive player) : exit
    # 
    def alive _args
      "alive _args;" 
    end

    # Returns list of all curators
    # 
    # ==== Syntax
    #
    #      allCurators
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allCurators
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def allCurators 
      "allCurators" 
    end

    # Return a list of all dead units including agents and destroyed vehicles.
    # 
    # ==== Description
    # 
    # Dead units may be in vehicles
    #  
    # ==== Syntax
    #
    #      allDead
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #allDeadMen, #allUnits, #allGroups, #playableUnits, #switchableUnits, #units, #vehicles
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allDead
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    { deleteVehicle _x } forEach allDead;
    # 
    def allDead 
      "allDead" 
    end

    # Return a list of dead units including agents.
    # 
    # ==== Description
    # 
    # Dead unit might be inside vehicle
    #  
    # ==== Syntax
    #
    #      allDeadMen
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #allDead, #allUnits, #allGroups, #playableUnits, #switchableUnits, #units, #vehicles
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allDeadMen
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    { deleteVehicle _x } forEach allDeadMen;
    # 
    def allDeadMen 
      "allDeadMen" 
    end

    # Return a list of all groups
    # 
    # ==== Syntax
    #
    #      allGroups
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #group, #units, #allUnits, #playableUnits, #switchableUnits, #vehicles
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allGroups
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    {(leader _x) sideChat "Go ! Go ! Go !"} forEach allGroups
    # 
    def allGroups 
      "allGroups" 
    end

    # Return all markers in map
    # 
    # ==== Syntax
    #
    #      allMapMarkers
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array of Strings
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createMarker, #deleteMarker
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allMapMarkers
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _markers = allMapMarkers;
    #    returns: ["marker1","_USER_DEFINED #2/0"]
    # 
    # ====== Example 2:
    # 
    #    {
    #      private "_a";
    #      _a = toArray _x;
    #      _a resize 15;
    #      if (toString _a == "_USER_DEFINED #") then {
    #        deleteMarker _x;
    #      }
    #    } forEach allMapMarkers;
    # 
    # ====== Example 3:
    # 
    #    if (_someString in allMapMarkers) then {
    #      hint (_someString + " is a valid marker name");
    #    };
    # 
    def allMapMarkers 
      "allMapMarkers" 
    end

    # Returns all mission objects with given type (or its subtype)
    # 
    # ==== Syntax
    #
    #      allMissionObjects type
    #
    # ==== Parameters
    # 
    # *    +type+ - String  
    #
    # ==== Returns
    #
    #      Array of Objects
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #allDead, #allGroups, #allUnits, #entities, #vehicles
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allMissionObjects
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _airObjects = allMissionObjects "Air";
    # 
    # ====== Example 2:
    # 
    #    { deleteVehicle _x } forEach (allMissionObjects "");
    # 
    # ====== Example 3:
    # 
    #    _allMObjects = allMissionObjects "All";
    # 
    def allMissionObjects _args
      "allMissionObjects _args;" 
    end

    # Return all sites in map
    # 
    # ==== Syntax
    #
    #      allSites
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allSites
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def allSites 
      "allSites" 
    end

    # Return a list of all units (all persons except agents).
    # 
    # ==== Description
    # 
    # Dead units and units waiting to respawn are excluded
    #  
    # ==== Syntax
    #
    #      allUnits
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #allGroups, #allDead, #playableUnits, #switchableUnits, #units, #vehicles, #allUnitsUav
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allUnits
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    {_x setDamage 0.5; _x groupChat "Braaains"} forEach allUnits;
    # 
    def allUnits 
      "allUnits" 
    end

    # Return a list of all UAV units
    # 
    # ==== Syntax
    #
    #      allUnitsUav
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array of Objects
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #allUnits, #showUavFeed, #shownUavFeed, #getConnectedUav, #isUavConnected, #uavControl
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allUnitsUav
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint format ["No. of UAV(s) on the map: %1", count allUnitsUav];
    # 
    # ====== Example 2:
    # 
    #    {_x setDamage 1} forEach allUnitsUav;
    # 
    def allUnitsUav 
      "allUnitsUav" 
    end

    # Allow/dissallow 3D mode.
    # 
    # ==== Description
    # 
    # ,
    #  
    # ==== Syntax
    #
    #      map allow3DMode bool
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +bool+ - Boolean -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allow3DMode
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def allow3DMode _obj, _args
      "_obj allow3DMode _args;" 
    end

    # If true, units can be in a vehicle with broken tracks/wheels
    # 
    # ==== Syntax
    #
    #      vehicle allowCrewInImmobile bool
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +bool+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #canMove
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allowCrewInImmobile
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _vehicle allowCrewInImmobile true;
    # 
    def allowCrewInImmobile _obj, _args
      "_obj allowCrewInImmobile _args;" 
    end

    # Allows curator placing and working with modules outside of edit areas
    # 
    # ==== Syntax
    #
    #      curatorObj allowCuratorLogicIgnoreAreas allow
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    # *    +allow+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #addCuratorEditingArea, #removeCuratorEditingArea, #removeAllCuratorEditingAreas, #curatorEditingArea
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allowCuratorLogicIgnoreAreas
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    curatorModule allowCuratorLogicIgnoreAreas true
    # 
    def allowCuratorLogicIgnoreAreas _obj, _args
      "_obj allowCuratorLogicIgnoreAreas _args;" 
    end

    # Allow or prevent an object being damaged (or injured, or killed).
    # 
    # ==== Description
    # 
    # NOTE: Command has to be executed where object is local and as long as object does not change locality the effect of this command will be global.
    # 
    # If object changes locality, the command needs to be executed again on the new owner's machine to maintain the effect.
    # 
    # The command does not prevent object from taking scripted damage such as setDamage or setHit
    #  
    # ==== Syntax
    #
    #      object allowDamage allow
    #
    # ==== Parameters
    # 
    # *    +object+ - Object -  
    # *    +allow+ - Boolean -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # This command only works locally and must be run on all machines to have global affect.
    # 
    # ==== See Also
    # 
    # #setDamage, #setHit
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allowDamage
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player allowDamage false
    # 
    def allowDamage _obj, _args
      "_obj allowDamage _args;" 
    end

    # Allow/dissallow file ops (load/save etc)
    # 
    # ==== Syntax
    #
    #      map allowFileOperations bool
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +bool+ - Boolean -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allowFileOperations
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def allowFileOperations _obj, _args
      "_obj allowFileOperations _args;" 
    end

    # Sets the cowardice level (the lack of courage or bravery) of a group or unit.
    # 
    # ==== Description
    # 
    # The more cowardice a Group or Object has, the sooner it will start fleeing.
    # 
    # 0 means maximum courage, while 1 means always fleeing
    #  
    # ==== Syntax
    #
    #      name allowFleeing cowardice
    #
    # ==== Parameters
    # 
    # *    +name+ - Object or Group  
    # *    +cowardice+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #fleeing
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allowFleeing
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _group1 allowFleeing 1
    # 
    def allowFleeing _obj, _args
      "_obj allowFleeing _args;" 
    end

    # Set if the units given in the list are allowed to enter vehicles
    # 
    # ==== Syntax
    #
    #      unitArray allowGetIn allow
    #
    # ==== Parameters
    # 
    # *    +unitArray+ - Array of units  
    # *    +allow+ - Boolean - true allows the units to enter, false denies them  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #orderGetIn
    # 
    # Official Wiki: https://community.bistudio.com/wiki/allowGetIn
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_soldier1, _soldier2] allowGetin true
    # 
    def allowGetIn _obj, _args
      "_obj allowGetIn _args;" 
    end

    # Check how many rounds are left in the currently loaded magazine of the given weapon
    # 
    # ==== Syntax
    #
    #      Number = unitName ammo weaponName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +weaponName+ - String - weapon name. See the topic Category:Weapons for reference about possible values.  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setAmmo, #someAmmo, #magazines
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ammo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _count = player ammo "M16"
    #    returns 30 in case of a full magazine
    # 
    # ====== Example 2:
    # 
    #    _count = player ammo "M203Muzzle"
    # 
    def ammo _obj, _args
      "_obj ammo _args;" 
    end

    # Process a linear animation on an object.
    # 
    # ==== Description
    # 
    # Such animations are only used in user-made addons, they can be defined in the addon's config.
    # 
    # cpp
    #  
    # ==== Syntax
    #
    #      objectName animate [animationName, phase]
    #
    # ==== Parameters
    # 
    # *    +objectName+ - Object  
    # *    +[animationName, phase]+ - Array  
    # *    +animationName+ - String - name of the animation. This is the class-name of the animation defined in the addon's config.cpp.  
    # *    +phase+ - Number - range 0 (start point of the animation) to 1 (end point of the animation). The speed, in which the animation is processed, is defined in the addon's config.cpp and cannot be changed during running missions.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #animationPhase
    # 
    # Official Wiki: https://community.bistudio.com/wiki/animate
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _building animate ["maindoor", 1]
    # 
    def animate _obj, _args
      "_obj animate _args;" 
    end

    # Process animation of door on vehicle.
    # 
    # ==== Description
    # 
    # Animation is defined in config file.
    # 
    # Wanted animation phase is set to phase
    #  
    # ==== Syntax
    #
    #      object animateDoor [doorname, phase, now]
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +[doorname, phase, now]+ - Array  
    # *    +doorname+ - String  
    # *    +phase+ - Number  
    # *    +now+ - Boolean (When true and phase is either 0 or 1, door will change phase instantaneously)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #doorPhase, #animate
    # 
    # Official Wiki: https://community.bistudio.com/wiki/animateDoor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    heli animateDoor ["doors1", 1, false];
    # 
    # ====== Example 2:
    # 
    #    Open left front door on Ifrit instantly:ifrit animateDoor ["Door_LF", 1, true];
    # 
    def animateDoor _obj, _args
      "_obj animateDoor _args;" 
    end

    # Return the phase of the given animation on the given object, which is set by the animate command
    # 
    # ==== Syntax
    #
    #      Number = object animationPhase animationName
    #
    # ==== Parameters
    # 
    # *    +object+ - Object - building eg  
    # *    +animationName+ - String - name of the animation. This is the class-name of the animation defined in the addon's config.cpp.  
    #
    # ==== Returns
    #
    #      Number -Integer of range 0 (start point of the animation) to 1 (end point of the animation).
    #
    # ==== Multiplayer
    # 
    # In OFP, on dedicated servers, animationPhase will always return 0, no matter what the actual phase is.
    # 
    # ==== See Also
    # 
    # #animate
    # 
    # Official Wiki: https://community.bistudio.com/wiki/animationPhase
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _building animate ["maindoor",1]
    #    ~2
    #    _p = _building animationPhase "maindoor"
    #    returns 1 (if the animation speed is <= 2 seconds)
    # 
    def animationPhase _obj, _args
      "_obj animationPhase _args;" 
    end

    # Return the name of a unit's current primary animation
    # 
    # ==== Syntax
    #
    #      String = animationState unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # When executed on a client, this command only returns accurate results when the target unit is within sight of the client. When executed on a dedicated server, the returned value is accurate.
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/animationState
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _state = animationState player
    # 
    def animationState _args
      "animationState _args;" 
    end

    # Return the stored value of armory points
    # 
    # ==== Syntax
    #
    #      armoryPoints
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setArmoryPoints
    # 
    # Official Wiki: https://community.bistudio.com/wiki/armoryPoints
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myArPt = armoryPoints;
    # 
    def armoryPoints 
      "armoryPoints" 
    end

    # Arcsine of a number, result in Degrees
    # 
    # ==== Syntax
    #
    #      Number = asin x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/asin
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _degrees=asin 0.5
    #    returns 30
    # 
    def asin _args
      "asin _args;" 
    end

    # Tests a condition and if the condition is false, displays error on screen (if -showscripterrors enabled) and logs error into .
    # 
    # ==== Description
    # 
    # rpt file.
    # 
    # It does not interrupt the script execution.
    # 
    # If script was pre-processed with preprocessFileLineNumbers, it will also show/log the error line number and the file name
    #  
    # ==== Syntax
    #
    #      assert condition
    #
    # ==== Parameters
    # 
    # *    +condition+ - Boolean  
    #
    # ==== Returns
    #
    #      Boolean - mirrors condition
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #try, #catch, #throw, #diag_captureFrame, #diag_captureSlowFrame, #diag_logSlowFrame
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assert
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    assert (1>2); 
    # 
    def assert _args
      "assert _args;" 
    end

    # Assign a unit as cargo of a vehicle.
    # 
    # ==== Description
    # 
    # Used together with orderGetIn to order a unit to get in as cargo into a specific vehicle.
    # 
    # Before usage of this command a subordinate unit hasn't got the option to get into the cargo space of the vehicle
    #  
    # ==== Syntax
    #
    #      unitName assignAsCargo vehicleName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #assignAsDriver, #assignAsGunner, #assignAsCommander, #moveInCargo, #moveInCommander, #moveInDriver, #moveInGunner, #moveInTurret, #assignedVehicle, #unassignVehicle, #leaveVehicle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignAsCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 assignAsCargo _truck
    #    [_soldier1] orderGetIn true
    # 
    def assignAsCargo _obj, _args
      "_obj assignAsCargo _args;" 
    end

    # Assigns the character to a specific cargo / passenger index of the given vehicle
    # 
    # ==== Syntax
    #
    #      character assignAsCargoIndex [vehicle, index]
    #
    # ==== Parameters
    # 
    # *    +character+ - Object - character to assign  
    # *    +vehicle+ - Object - vehicle to assign to  
    # *    +index+ - Number - cargo / passenger index  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #assignAsCargo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignAsCargoIndex
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player assignAsCargoIndex [myHelicopter, 1];
    # 
    def assignAsCargoIndex _obj, _args
      "_obj assignAsCargoIndex _args;" 
    end

    # Assign a unit as commander of a vehicle.
    # 
    # ==== Description
    # 
    # Used together with orderGetIn to order subordinate units to get in as commander of a specific vehicle.
    # 
    # Before usage of this command a subordinate unit hasn't got the option to get into the commander place of the vehicle
    #  
    # ==== Syntax
    #
    #      unitName assignAsCommander vehicleName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #assignAsDriver, #assignAsGunner, #assignAsCargo, #moveInCargo, #moveInCommander, #moveInDriver, #moveInGunner, #moveInTurret, #assignedVehicle, #unassignVehicle, #leaveVehicle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignAsCommander
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 assignAsCommander _tank
    #    [_soldier1] orderGetIn true
    # 
    def assignAsCommander _obj, _args
      "_obj assignAsCommander _args;" 
    end

    # Assign a unit as driver of a vehicle.
    # 
    # ==== Description
    # 
    # Used together with orderGetIn to order subordinate units to get in as driver of a specific vehicle.
    # 
    # Before usage of this command a subordinate unit hasn't got the option to get into the driver place of the vehicle
    #  
    # ==== Syntax
    #
    #      unitName assignAsDriver vehicleName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #assignAsCommander, #assignAsGunner, #assignAsCargo, #moveInCargo, #moveInCommander, #moveInDriver, #moveInGunner, #moveInTurret, #assignedVehicle, #unassignVehicle, #leaveVehicle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignAsDriver
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 assignAsDriver _tank
    #    [_soldier1] orderGetIn true
    # 
    def assignAsDriver _obj, _args
      "_obj assignAsDriver _args;" 
    end

    # Assign a unit as gunner of a vehicle.
    # 
    # ==== Description
    # 
    # Used together with orderGetIn to order subordinate units to get in as gunner of a specific vehicle.
    # 
    # Before usage of this command a subordinate unit hasn't got the option to get into the gunner place of the vehicle
    #  
    # ==== Syntax
    #
    #      unitName assignAsGunner vehicleName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #assignAsCommander, #assignAsDriver, #assignAsCargo, #moveInCargo, #moveInCommander, #moveInDriver, #moveInGunner, #moveInTurret, #assignedVehicle, #unassignVehicle, #leaveVehicle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignAsGunner
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 assignAsGunner _tank
    #    [_soldier1] orderGetIn true
    # 
    def assignAsGunner _obj, _args
      "_obj assignAsGunner _args;" 
    end

    # Assigns the soldier to turret
    # 
    # ==== Syntax
    #
    #      unit assignAsTurret [vehicle, [turretPath]]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +[vehicle, turretPath]+ - Array  
    # *    +vehicle+ - Object  
    # *    +[turretPath]+ - Array - Array of numbers.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #assignedVehicleRole, #unassignVehicle, #turretUnit, #moveInTurret
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignAsTurret
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def assignAsTurret _obj, _args
      "_obj assignAsTurret _args;" 
    end

    # Assign player as curator.
    # 
    # ==== Description
    # 
    # Two players cannot act as one curator
    #  
    # ==== Syntax
    #
    #      player assignCurator curatorObj
    #
    # ==== Parameters
    # 
    # *    +player+ - Object  
    # *    +curatorObj+ - Object - Curator module.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #unassignCurator
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignCurator
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player assignCurator myCurator;
    # 
    def assignCurator _obj, _args
      "_obj assignCurator _args;" 
    end

    # Assigns existing item from inventory (uniform, vest, backpack) to a correct slot.
    # 
    # ==== Description
    # 
    # If the slot is occupied by another item, it gets replaced
    #  
    # ==== Syntax
    #
    #      unit assignItem item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #unassignItem, #addItem, #removeItem, #linkItem, #unlinkItem, #assignedItems, #removeAllAssignedItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignItem
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    bluforUnit addItem "NVGoggles";
    #    bluforUnit assignItem "NVGoggles";
    #    opforUnit addItem "NVGoggles_OPFOR";
    #    opforUnit assignItem "NVGoggles_OPFOR";
    #    independentUnit addItem "NVGoggles_INDEP";
    #    independentUnit assignItem "NVGoggles_INDEP";
    # 
    def assignItem _obj, _args
      "_obj assignItem _args;" 
    end

    # Assigns the unit (in case of a vehicle, its commander) to the given team.
    # 
    # ==== Description
    # 
    # The possible team values are: "MAIN", "RED", "GREEN", "BLUE" and "YELLOW"
    #  
    # ==== Syntax
    #
    #      vehicleName assignTeam team
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    # *    +team+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #assignedTeam, #dissolveTeam, #unassignTeam
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignTeam
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier2 assignTeam "RED"
    # 
    def assignTeam _obj, _args
      "_obj assignTeam _args;" 
    end

    # Not correctly implemented yet, currently it does the same as landAt.
    # 
    # ==== Description
    # 
    # As the implementation may get fixed sometime, please do not use this command until then
    #  
    # ==== Syntax
    #
    #      assignToAirport
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignToAirport
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    assignToAirport
    # 
    def assignToAirport 
      "assignToAirport" 
    end

    # Returns the list of soldiers assigned to the given vehicle as a cargo
    # 
    # ==== Syntax
    #
    #      assignedCargo vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignedCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _list = assignedCargo _vehicleName
    # 
    def assignedCargo _args
      "assignedCargo _args;" 
    end

    # Returns the soldier assigned to the given vehicle as a commander
    # 
    # ==== Syntax
    #
    #      assignedCommander vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object -  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignedCommander
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _commander = assignedCommander vehicleName 
    # 
    def assignedCommander _args
      "assignedCommander _args;" 
    end

    # Returns the soldier assigned to the given vehicle as a driver
    # 
    # ==== Syntax
    #
    #      assignedDriver vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object -  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignedDriver
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _driver= assignedDriver vehicleName 
    # 
    def assignedDriver _args
      "assignedDriver _args;" 
    end

    # Returns the soldier assigned to the given vehicle as a gunner
    # 
    # ==== Syntax
    #
    #      assignedGunner vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object -  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignedGunner
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def assignedGunner _args
      "assignedGunner _args;" 
    end

    # Get array with all assigned items
    # 
    # ==== Syntax
    #
    #      assignedItems unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #assignItem, #unassignItem, #linkItem, #unlinkItem, #addItem, #removeItem, #removeAllAssignedItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignedItems
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     hint str assignedItems player;
    # 
    def assignedItems _args
      "assignedItems _args;" 
    end

    # Return the target assigned to the vehicle
    # 
    # ==== Syntax
    #
    #      Object = assignedTarget vehicleName
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #commandTarget, #doTarget
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignedTarget
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _target = assignedTarget _T72
    # 
    def assignedTarget _args
      "assignedTarget _args;" 
    end

    # Returns the team the unit belongs to.
    # 
    # ==== Description
    # 
    # Possible values:
    # 
    # MAIN (default and white)
    # 
    # RED
    # 
    # GREEN
    # 
    # BLUE
    # 
    # YELLOW
    #  
    # ==== Syntax
    #
    #      assignedTeam unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      String: "BLUE"
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #assignTeam
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignedTeam
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _team = assignedTeam player;
    # 
    def assignedTeam _args
      "assignedTeam _args;" 
    end

    # Return the vehicle a unit is assigned to.
    # 
    # ==== Description
    # 
    # If no vehicle is assigned objNull is returned
    #  
    # ==== Syntax
    #
    #      Object = assignedVehicle unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addVehicle, #assignAsDriver, #assignAsCargo, #assignAsCommander, #assignAsGunner, #unassignVehicle, #leaveVehicle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignedVehicle
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _vehicle= assignedVehicle player
    # 
    def assignedVehicle _args
      "assignedVehicle _args;" 
    end

    # Return the role a unit is assigned to within its assigned vehicle.
    # 
    # ==== Description
    # 
    # The array which is returned contains:
    # 
    # [] - Not assigned to any vehicle
    # 
    # ["Driver"] - Assigned as driver
    # 
    # ["Cargo"] - Assigned as cargo
    # 
    # ["Turret", [turret path]] - Assigned to a turret
    # 
    # If no vehicle role is assigned, an empty array is returned
    #  
    # ==== Syntax
    #
    #      Array = assignedVehicleRole unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addVehicle, #assignedVehicle, #unassignVehicle, #weaponsTurret, #assignAsCargo, #assignAsCommander, #assignAsDriver, #assignAsGunner, #assignAsTurret
    # 
    # Official Wiki: https://community.bistudio.com/wiki/assignedVehicleRole
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _RoleArray = assignedVehicleRole player;
    # 
    # ====== Example 2:
    # 
    #    Get weapons available to player at player occupied turret:_weaponsTurret = vehicle player weaponsTurret (assignedVehicleRole player select 1);
    # 
    def assignedVehicleRole _args
      "assignedVehicleRole _args;" 
    end

    # ArcTangent of a number, result in Degrees
    # 
    # ==== Syntax
    #
    #      Number = atan x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/atan
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _degrees=atan 1
    #    returns 45
    # 
    def atan _args
      "atan _args;" 
    end

    # ArcTangent of x/y.
    # 
    # ==== Description
    # 
    # Used to determine the angle of a vector [x,y].
    # 
    # Result in Degrees
    #  
    # ==== Syntax
    #
    #      Number = x atan2 y
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    # *    +y+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/atan2
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _xy=[5,3]; _degrees= (_xy select 0) atan2 (_xy select 1)
    #    returns 59.0362
    # 
    def atan2 _obj, _args
      "_obj atan2 _args;" 
    end

    # Attaches a location to the specified object.
    # 
    # ==== Description
    # 
    # To detach a location, attach it to objNull
    #  
    # ==== Syntax
    #
    #      location attachObject object
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #attachedObject, #attachObject (VBS2)
    # 
    # Official Wiki: https://community.bistudio.com/wiki/attachObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myLocation attachObject player
    # 
    def attachObject _obj, _args
      "_obj attachObject _args;" 
    end

    # Attaches an object to another object.
    # 
    # ==== Description
    # 
    # The offset is applied to the object center unless a memory point is provided.
    # 
    # If no offset is specified, the offset used will be the current relative positioning of objects against each other
    #  
    # ==== Syntax
    #
    #      Object attachTo [TObject, Offset, MemPoint]
    #
    # ==== Parameters
    # 
    # *    +Object+ - Object or player  
    # *    +TObject+ - Object or player  
    # *    +Offset+ - Array - format Position - (optional)  
    # *    +MemPoint+ - String - (optional), see ArmA: Selection Translations for czech selections names  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Only has to be executed on one client.
    # 
    # ==== See Also
    # 
    # #attachedObjects, #attachedTo, #detach, #setVectorDir, #setVectorUp, #setVectorDirAndUp, #modelToWorld
    # 
    # Official Wiki: https://community.bistudio.com/wiki/attachTo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player attachTo [car,[0,0,1]]; 
    # 
    # ====== Example 2:
    # 
    #    player attachTo [tank,[0,-1,0],"Usti hlavne"]; 
    # 
    # ====== Example 3:
    # 
    #    Automatic offset:
    #    ammoCrate attachTo [player];
    # 
    # ====== Example 4:
    # 
    #    To set orientation of attached object use setVectorDirAndUp command: _expl1 = "DemoCharge_Remote_Ammo" createVehicle position player;
    #    _expl1 attachTo [player, [-0.1,0.1,0.15],"Pelvis"];
    #    _expl1 setVectorDirAndUp [[0.5,0.5,0],[-0.5,0.5,0]];
    #    _expl2 = "DemoCharge_Remote_Ammo" createVehicle position player;
    #    _expl2 attachTo [player, [0,0.15,0.15],"Pelvis"];
    #    _expl2 setVectorDirAndUp [[1,0,0],[0,1,0]];
    #    _expl3 = "DemoCharge_Remote_Ammo" createVehicle position player;
    #    _expl3 attachTo [player, [0.1,0.1,0.15],"Pelvis"];
    #    _expl3 setVectorDirAndUp [[0.5,-0.5,0],[0.5,0.5,0]]; 
    # 
    def attachTo _obj, _args
      "_obj attachTo _args;" 
    end

    # Returns the object a location is attached to.
    # 
    # ==== Description
    # 
    # If the location is unattached, then objNull is returned
    #  
    # ==== Syntax
    #
    #      attachedObject location
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #attachObject
    # 
    # Official Wiki: https://community.bistudio.com/wiki/attachedObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _locAttachedObj = attachedObject myLocation
    # 
    def attachedObject _args
      "attachedObject _args;" 
    end

    # Returns a list of attached objects
    # 
    # ==== Syntax
    #
    #      attachedObjects obj
    #
    # ==== Parameters
    # 
    # *    +obj+ - Object  
    #
    # ==== Returns
    #
    #      Array of Objects
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #attachedTo, #attachTo, #detach
    # 
    # Official Wiki: https://community.bistudio.com/wiki/attachedObjects
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    {
    #      detach _x;
    #    } forEach attachedObjects player;
    # 
    # ====== Example 2:
    # 
    #    if (count attachedObjects player == 0) then {
    #      hint "There are no objects attached to player";
    #    };
    # 
    def attachedObjects _args
      "attachedObjects _args;" 
    end

    # Returns the object it is attached to.
    # 
    # ==== Description
    # 
    # Returns objNull if not attached to anything
    #  
    # ==== Syntax
    #
    #      attachedTo object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object - child object  
    #
    # ==== Returns
    #
    #      Object - parent object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #attachedObjects, #attachTo, #detach
    # 
    # Official Wiki: https://community.bistudio.com/wiki/attachedTo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (isNull attachedTo _obj1) then {
    #      hint "_obj1 is not attached to anything.";
    #    };
    # 
    def attachedTo _args
      "attachedTo _args;" 
    end

    # Return whether a group's leader can issue attack commands to soldiers under his command
    # 
    # ==== Syntax
    #
    #      Boolean = attackEnabled name
    #
    # ==== Parameters
    # 
    # *    +name+ - Object or Group  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #enableAttack
    # 
    # Official Wiki: https://community.bistudio.com/wiki/attackEnabled
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (not attackEnabled _soldier) then {_soldier setCombatMode "Careless"} 
    # 
    def attackEnabled _args
      "attackEnabled _args;" 
    end

    # Returns a class of a backpack
    # 
    # ==== Syntax
    #
    #      backpack unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/backpack
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def backpack _args
      "backpack _args;" 
    end

    # Get array with backpacks from ammo box (or any general weapon holder container)
    # 
    # ==== Syntax
    #
    #      backpackCargo box
    #
    # ==== Parameters
    # 
    # *    +box+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/backpackCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def backpackCargo _args
      "backpackCargo _args;" 
    end

    # Returns a cargo container of a unit's backpack
    # 
    # ==== Syntax
    #
    #      backpackContainer unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - a soldier  
    #
    # ==== Returns
    #
    #      Object - cargo container or <NULL-object>
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #unitBackpack, #firstBackpack, #everyBackpack, #uniformContainer, #vestContainer
    # 
    # Official Wiki: https://community.bistudio.com/wiki/backpackContainer
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint str backpackContainer player; //1a5f7900# 163944: backpack_fast.p3d
    # 
    # ====== Example 2:
    # 
    #    hint str getMagazineCargo backpackContainer player;
    #    [
    #    	[
    #    		"APERSBoundingMine_Range_Mag",
    #    		"ClaymoreDirectionalMine_Remote_Mag",
    #    		"SLAMDirectionalMine_Wire_Mag",
    #    		"DemoCharge_Remote_Mag"
    #    	],[
    #    		3,
    #    		2,
    #    		2,
    #    		1
    #    	]
    #    ]
    # 
    def backpackContainer _args
      "backpackContainer _args;" 
    end

    # Get array with all items (of any kind, even weapons) in backpack of the given unit
    # 
    # ==== Syntax
    #
    #      backpackItems unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #uniformItems, #vestItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/backpackItems
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    backpackItems player;
    #    [
    #    	"hgun_P07_F",
    #    	"Titan_AT"
    #    ]
    # 
    def backpackItems _args
      "backpackItems _args;" 
    end

    # Get array with all magazines from backpack of the given unit
    # 
    # ==== Syntax
    #
    #      backpackMagazines unit
    #
    # ==== Parameters
    # 
    # *    +unit + - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #uniformMagazines, #vestMagazines, #soldierMagazines
    # 
    # Official Wiki: https://community.bistudio.com/wiki/backpackMagazines
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    backpackMagazines player;
    #    [
    #    	"Titan AT Missile(1/1)[id/cr:16/0](2x)"
    #    ]
    # 
    def backpackMagazines _args
      "backpackMagazines _args;" 
    end

    # Return the behaviour of a unit
    # 
    # ==== Syntax
    #
    #      String = behaviour unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      String -One of "CARELESS", "SAFE", "AWARE", "COMBAT" and "STEALTH".
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #behaviour description, AIBehaviour, #setBehaviour, #setWaypointBehaviour, #combatMode, #setCombatMode, #skill, #setSkill array, CfgAISkill
    # 
    # Official Wiki: https://community.bistudio.com/wiki/behaviour
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier setBehaviour "CARELESS"
    #    _b = behaviour _soldier 
    #    returns "CARELESS"
    # 
    def behaviour _args
      "behaviour _args;" 
    end

    # Returns the value of "3D Performance" in OFP Preferences (flashpoint.
    # 
    # ==== Description
    # 
    # cfg).
    # 
    # This can be used to estimate the computer performance to adapt CPU and GPU demanding settings like view distance dynamically in missions
    #  
    # ==== Syntax
    #
    #      Number = benchmark
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/benchmark
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? (benchmark>2000) : setViewDistance 2000
    # 
    def benchmark 
      "benchmark" 
    end

    # Returns class name of currently used binocular weapon
    # 
    # ==== Syntax
    #
    #      binocular unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #headgear, #goggles, #hmd
    # 
    # Official Wiki: https://community.bistudio.com/wiki/binocular
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _binocs = binocular player; //Rangefinder
    # 
    def binocular _args
      "binocular _args;" 
    end

    # Pre-defined variable for the blufor side
    # 
    # ==== Syntax
    #
    #      blufor
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/blufor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     if (side player == blufor) Then {hint "BLUFOR"};
    # 
    def blufor 
      "blufor" 
    end

    # Returns a bounding box of given object in model coordinate space
    # 
    # ==== Syntax
    #
    #      Array = boundingBox model
    #
    # ==== Parameters
    # 
    # *    +model + - Object  
    #
    # ==== Returns
    #
    #      Array - An array with the extreme points of the model. Format: [[minX, minY, minZ], [maxX, maxY, maxZ]]
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #sizeOf, #boundingBoxReal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/boundingBox
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _box = boundingBox _abrams
    # 
    def boundingBox _args
      "boundingBox _args;" 
    end

    # Returns a bounding box of given object in model coordinates space.
    # 
    # ==== Description
    # 
    # This command is similar to boundingBox but gives more precise measurements
    #  
    # ==== Syntax
    #
    #      boundingBoxReal obj
    #
    # ==== Parameters
    # 
    # *    +obj+ - Object  
    #
    # ==== Returns
    #
    #      Array - An array with the extreme points of the model. Format [[x1,y1,z1],[x2,y2,z2]].
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #boundingBox, #sizeOf
    # 
    # Official Wiki: https://community.bistudio.com/wiki/boundingBoxReal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _bbr = boundingBoxReal vehicle player;
    #    _p1 = _bbr select 0;
    #    _p2 = _bbr select 1;
    #    _maxWidth = abs ((_p2 select 0) - (_p1 select 0));
    #    _maxLength = abs ((_p2 select 1) - (_p1 select 1));
    #    _maxHeight = abs ((_p2 select 2) - (_p1 select 2));
    # 
    def boundingBoxReal _args
      "boundingBoxReal _args;" 
    end

    # Returns the position of original (loaded) center of object in model coordinates.
    # 
    # ==== Description
    # 
    # The result is in format [x,z,y]
    #  
    # ==== Syntax
    #
    #      boundingCenter object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/boundingCenter
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _center = boundingCenter TruckOne
    # 
    def boundingCenter _args
      "boundingCenter _args;" 
    end

    # Breaks block out of scope named name.
    # 
    # ==== Description
    # 
    # Nil is returned.
    # 
    # Scope name can be assigned using scopeName command
    #  
    # ==== Syntax
    #
    #      breakOut name
    #
    # ==== Parameters
    # 
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #scopeName, #breakTo, #exitWith
    # 
    # Official Wiki: https://community.bistudio.com/wiki/breakOut
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    scopeName "main";
    #    while {true} do {
    #    	scopeName "loop1";
    #    	while {true} do {
    #    		scopeName "loop2";
    #    		if (condition1) then {breakTo "main"}; // Breaks all scopes and return to "main"
    #    		if (condition2) then {breakOut "loop2"}; // Breaks scope named "loop2"
    #    		sleep 1;
    #    	};
    #    	sleep 1;
    #    };
    # 
    def breakOut _args
      "breakOut _args;" 
    end

    # Breaks block to scope named name.
    # 
    # ==== Description
    # 
    # Nil is returned.
    # 
    # Scope name can be assigned using scopeName command
    #  
    # ==== Syntax
    #
    #      breakTo name
    #
    # ==== Parameters
    # 
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #scopeName, #breakOut, #exitWith
    # 
    # Official Wiki: https://community.bistudio.com/wiki/breakTo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    scopeName "main";
    #    while {true} do {
    #    	scopeName "loop1";
    #    	while {true} do {
    #    		scopeName "loop2";
    #    		if (condition1) then {breakTo "main"}; // Breaks all scopes and return to "main"
    #    		if (condition2) then {breakOut "loop2"}; // Breaks scope named "loop2"
    #    		sleep 1;
    #    	};
    #    	sleep 1;
    #    };
    # 
    def breakTo _args
      "breakTo _args;" 
    end

    # Returns the name of the current briefing
    # 
    # ==== Syntax
    #
    #      briefingName
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/briefingName
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def briefingName 
      "briefingName" 
    end

    # Returns the given indexed exit in a building.
    # 
    # ==== Description
    # 
    # The returned value is in format Position
    #  
    # ==== Syntax
    #
    #      building buildingExit index
    #
    # ==== Parameters
    # 
    # *    +building+ - Object  
    # *    +index+ - Number  
    #
    # ==== Returns
    #
    #      Array - format Position
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #buildingPos
    # 
    # Official Wiki: https://community.bistudio.com/wiki/buildingExit
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _building buildingExit 0
    # 
    def buildingExit _obj, _args
      "_obj buildingExit _args;" 
    end

    # Returns the given indexed position in a building
    # 
    # ==== Description
    # 
    # The index is 0-based (i.
    # 
    # e.
    # 
    # the first possible position would be 0.
    # 
    # So if a building has 5 positions listed in the editor, 4 would be the highest position index usable with this command)
    #  
    # ==== Syntax
    #
    #      building buildingPos index
    #
    # ==== Parameters
    # 
    # *    +building+ - Object  
    # *    +index+ - Number  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #nearestBuilding, #nearestObject, #nearestObjects, #nearObjects, #buildingExit, #position, #setPos
    # 
    # Official Wiki: https://community.bistudio.com/wiki/buildingPos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier setPos (_house1 buildingPos 2)
    # 
    def buildingPos _obj, _args
      "_obj buildingPos _args;" 
    end

    # Return the action assigned to a control of the currently active user dialog.
    # 
    # ==== Description
    # 
    # Can be used for buttons and active texts.
    # 
    # Read Dialog Control for more information about user dialogs and controls
    #  
    # ==== Syntax
    #
    #      buttonAction control
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number. index of button  
    # *    +control+ - Control  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #buttonSetAction, #ctrlActivate
    # 
    # Official Wiki: https://community.bistudio.com/wiki/buttonAction
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    buttonSetAction [100, {player exec "reply.sqs"}]
    #    _action = buttonAction 100
    #    returns {player exec "reply.sqs"}
    # 
    def buttonAction _args
      "buttonAction _args;" 
    end

    # Set the action of a control of the currently active user dialog.
    # 
    # ==== Description
    # 
    # Can be used for buttons and active texts.
    # 
    # See Dialog Control for more information about user dialogs
    #  
    # ==== Syntax
    #
    #      control buttonSetAction action
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number - control ID  
    # *    +action+ - String - code body that should be executed when the button/active text is clicked  
    # *    +control+ - Control  
    # *    +action+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #buttonAction, #ctrlActivate
    # 
    # Official Wiki: https://community.bistudio.com/wiki/buttonSetAction
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    buttonSetAction [100, "player exec ""reply.sqs"""]
    # 
    def buttonSetAction _obj, _args
      "_obj buttonSetAction _args;" 
    end

    # Returns if the player is currently playing in cadet or veteran mode
    # 
    # ==== Syntax
    #
    #      Boolean = cadetMode
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean -true when playing in cadet mode, false when playing in veteran mode
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cadetMode
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? (cadetMode) : _AIsoldier setSkill 0.1
    # 
    def cadetMode 
      "cadetMode" 
    end

    # Executes the function string.
    # 
    # ==== Description
    # 
    # The argument(s) (if any) are passed as _this.
    # 
    # (argument(s) are passed in an array).
    # 
    # To execute a sleep function in the called code, execute it with spawn instead
    #  
    # ==== Syntax
    #
    #      argument(s) call body
    #
    # ==== Parameters
    # 
    # *    +arguments+ - Any Value - Optional. Argument that is passed to the function in the "_this" variable.  
    # *    +body+ - Code - A function body provided directly 'inline' or  
    #
    # ==== Returns
    #
    #      Anything -The last value given in the function is returned. See the topic Function for more information.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #spawn, #compile, #preprocessFile
    # 
    # Official Wiki: https://community.bistudio.com/wiki/call
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    call {"x = 3"}
    # 
    # ====== Example 2:
    # 
    #    Operation Flashpoint syntax:
    #    _n = 3;call format [{var%1 = 0},_n];
    #    Armed Assault syntax:
    #    _n = 3;call compile format ["var%1 = 0",_n];
    #    result of both syntaxes is var3 = 0
    # 
    # ====== Example 3:
    # 
    #    Operation Flashpoint syntax:
    #    _fAdd = loadFile "add.sqf"
    #    [1,2] call _fAdd 
    #    Armed Assault syntax:
    #    _fAdd = compile loadFile "add.sqf"
    #    _result = [1,2] call _fAdd
    # 
    def call _obj, _args
      "_obj call _args;" 
    end

    # Execute an extension function
    # 
    # ==== Syntax
    #
    #      extension callExtension functionWithArguments
    #
    # ==== Parameters
    # 
    # *    +extension+ - String  
    # *    +functionWithArguments+ - String  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #extension, #call
    # 
    # Official Wiki: https://community.bistudio.com/wiki/callExtension
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    handle = "pipes" callExtension "openPipe(pipe)";
    # 
    def callExtension _obj, _args
      "_obj callExtension _args;" 
    end

    # Executes a command on the given camera / actor object.
    # 
    # ==== Description
    # 
    # The "manual on" and "manual off" commands are recognized for all types.
    # 
    # For the "camera" type, the following commands can be used: "inertia on" and "inertia off".
    # 
    # For the "seagull" type it's one of: "landed" and "airborne" these control if they land or fly.
    # 
    # When you execute camCommand "landed" on a flying seagull, it will land and sit on the floor until you call camCommand "airborne".
    # 
    # The camCommand changes are conducted immediately, the command doesn't wait for camCommit
    #  
    # ==== Syntax
    #
    #      camera camCommand command
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object - object of type "camera" or "seagull"  
    # *    +command+ - String - one of "manual on", "manual off", "inertia on", "inertia off", "landed" and "airborne" corresponding to the description above.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camCommand
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _camera camCommand "manual on"
    # 
    def camCommand _obj, _args
      "_obj camCommand _args;" 
    end

    # Smoothly conduct the changes that were assigned to a camera within the given time.
    # 
    # ==== Description
    # 
    # If the time is set to zero, the changes are done immediately
    #  
    # ==== Syntax
    #
    #      camera camCommit time
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object - object of type "camera"  
    # *    +time+ - Number - time in seconds during which the changes shall be done  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camCommitted
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camCommit
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ; create a camera object
    #    _cam = "camera" camCreate [5600,4800,10]
    #    _cam camSetTarget player
    #    _cam cameraEffect ["internal", "BACK"]
    #    _cam camCommit 0
    #    ; smoothly move the camera to its new position in 6 seconds
    #    _cam camSetPos [5680,4720,20]
    #    _cam camCommit 6
    #    @camCommitted _cam
    #    ; proceed
    # 
    # ====== Example 2:
    # 
    #    // Arma 2 compilat code
    #    private "_cam";
    #    // create a camera object
    #    _cam = "camera" camCreate [position player select 0,position player select 1,2];
    #    _cam camSetTarget player;
    #    _cam cameraEffect ["internal", "BACK"];
    #    _cam camCommit 0;
    #    // smoothly move the camera to its new position in 6 seconds
    #    _cam camSetPos [position player select 0,(position player select 1) + 10,20];
    #    _cam camCommit 6;
    #    waitUntil {camCommitted _cam;};
    # 
    def camCommit _obj, _args
      "_obj camCommit _args;" 
    end

    # Smoothly conduct the changes that were assigned to a camera within the given time.
    # 
    # ==== Description
    # 
    # If the time is set to zero, the changes are done immediately
    #  
    # ==== Syntax
    #
    #      camera camCommitPrepared time
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object - object of type "camera"  
    # *    +time+ - Number - time in seconds during which the changes shall be done  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camCommitPrepared
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ; create a camera object
    #    _cam = "camera" camCreate [5600,4800,10]
    #    _cam camPrepareTarget player
    #    _cam cameraEffect ["internal", "BACK"]
    #    _cam camCommitPrepared 0
    #    ; smoothly move the camera to its new position in 6 seconds
    #    _cam camPreparePos [5680,4720,20]
    #    _cam camCommitPrepared 6
    #    @camCommitted _cam
    #    ; proceed
    # 
    def camCommitPrepared _obj, _args
      "_obj camCommitPrepared _args;" 
    end

    # Checks if the conduction of the last camCommit call already finished
    # 
    # ==== Syntax
    #
    #      Boolean = camCommitted camera
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object - object of type "camera"  
    #
    # ==== Returns
    #
    #      Boolean -true if the last camCommit already finished, false if not
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camCommit
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camCommitted
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ; create a camera object
    #    _cam = "camera" camCreate [5600,4800,10]
    #    _cam camSetTarget player
    #    _cam cameraEffect ["internal", "BACK"]
    #    _cam camCommit 0
    #    ; smoothly move the camera to its new position in 6 seconds
    #    _cam camSetPos [5680,4720,20]
    #    _cam camCommit 6
    #    @camCommitted _cam
    #    ; proceed
    # 
    def camCommitted _args
      "camCommitted _args;" 
    end

    # Sets construction camera parameters
    # 
    # ==== Syntax
    #
    #      camera camConstuctionSetParams [[x,y,z], radius, max above land]
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object  
    # *    +[[x,y,z], radius, max above land]+ - Array  
    # *    +[x,y,z]+ - Position  
    # *    +radius+ - Number  
    # *    +max above land+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camConstuctionSetParams
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _camera camConstuctionSetParams [getPos player, 50, 20];
    # 
    def camConstuctionSetParams _obj, _args
      "_obj camConstuctionSetParams _args;" 
    end

    # Create a camera or a seagull object on the given position.
    # 
    # ==== Description
    # 
    # Also other objects can be created this way, but vehicles created with camCreate cannot be entered.
    # 
    # Any units created with camCreate will remain static.
    # 
    # With difference to createVehicle, objects are created without consideration of the collision detection with surrounding objects, thus the objects are spawned exactly at the given position.
    # 
    # camCreate is conducted immediately, the command doesn't wait for camCommit
    #  
    # ==== Syntax
    #
    #      Object = type camCreate position
    #
    # ==== Parameters
    # 
    # *    +type+ - String - either "camera", "seagull" or any other class name of OFP vehicles.  
    # *    +position+ - Array - format Position - position to create the object at  
    #
    # ==== Returns
    #
    #      Object -The newly created object is returned.
    #
    # ==== Multiplayer
    # 
    # camCreated objects are only visible locally (meaning they are client-side effects).
    # 
    # ==== See Also
    # 
    # #camDestroy, #createVehicle, #createUnit
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camCreate
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _cam = "camera" camCreate (position player)
    # 
    def camCreate _obj, _args
      "_obj camCreate _args;" 
    end

    # Destroy an object created with camCreate.
    # 
    # ==== Description
    # 
    # camDestroy is conducted immediately, the command doesn't wait for camCommit
    #  
    # ==== Syntax
    #
    #      camDestroy object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camCreate, #cameraEffect
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camDestroy
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    camDestroy _cam
    # 
    # ====== Example 2:
    # 
    #    player cameraEffect ["terminate","back"];
    #    camDestroy _cam;
    # 
    def camDestroy _args
      "camDestroy _args;" 
    end

    # Preload the scene for the prepared camera.
    # 
    # ==== Description
    # 
    # Time gives timeout, zero means no (infinite) timeout
    #  
    # ==== Syntax
    #
    #      camera camPreload time
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object  
    # *    +time+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camPreloaded, #preloadCamera
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camPreload
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _camera camPreload 5 
    # 
    def camPreload _obj, _args
      "_obj camPreload _args;" 
    end

    # Checks whether the camera has finished preloading
    # 
    # ==== Syntax
    #
    #      Boolean = camPreloaded camera
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camPreloaded
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     ?(camPreloaded _camera) : exit 
    # 
    def camPreloaded _args
      "camPreloaded _args;" 
    end

    # Prepares the camera bank angle
    # 
    # ==== Syntax
    #
    #      camera camPrepareBank bank
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object  
    # *    +bank+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camPreload, #camCommitPrepared
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camPrepareBank
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _camera camPrepareBank -0.1 
    # 
    def camPrepareBank _obj, _args
      "_obj camPrepareBank _args;" 
    end

    # Prepares the camera heading
    # 
    # ==== Syntax
    #
    #      camera camPrepareDir direction
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object  
    # *    +direction+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camPreload, #camCommitPrepared
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camPrepareDir
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _camera camPrepareDir 150 
    # 
    def camPrepareDir _obj, _args
      "_obj camPrepareDir _args;" 
    end

    # Prepares the camera dive angle
    # 
    # ==== Syntax
    #
    #      camera camPrepareDive dive
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object  
    # *    +dive+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camPreload, #camCommitPrepared
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camPrepareDive
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _camera camPrepareDive -0.1 
    # 
    def camPrepareDive _obj, _args
      "_obj camPrepareDive _args;" 
    end

    # focusRange is in format [distance,blur].
    # 
    # ==== Description
    # 
    # Prepares the camera focus blur.
    # 
    # [-1,1] will reset default values (auto focusing), [-1,-1] will disable postprocessing (all is focused)
    #  
    # ==== Syntax
    #
    #      camera camPrepareFocus focusRange
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object  
    # *    +focusRange+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camPreload, #camCommitPrepared, #camSetFocus
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camPrepareFocus
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _camera camPrepareFocus [50, 1] 
    # 
    def camPrepareFocus _obj, _args
      "_obj camPrepareFocus _args;" 
    end

    # Prepares the camera field of view (zoom).
    # 
    # ==== Description
    # 
    # The default zoom level is 0.
    # 
    # 7, 0.
    # 
    # 01 is the nearest and 2 the furthest zoom value.
    # 
    # The angle of the field of view is atan(FOV)*2 radians when in 4:3 aspect ratio.
    # 
    # Needs the call of camCommitPrepared to be conducted
    #  
    # ==== Syntax
    #
    #      camera camPrepareFov fieldOfView
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object  
    # *    +fieldOfView+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camPreload, #camCommitPrepared
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camPrepareFov
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _camera camPrepareFov 0.1   
    # 
    def camPrepareFov _obj, _args
      "_obj camPrepareFov _args;" 
    end

    # Prepares the camera field of view range for auto zooming
    # 
    # ==== Syntax
    #
    #      camera camPrepareFovRange fovRange
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object  
    # *    +fovRange+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camPreload, #camCommitPrepared
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camPrepareFovRange
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _camera camPrepareFovRange [0.1, 0.5]   
    # 
    def camPrepareFovRange _obj, _args
      "_obj camPrepareFovRange _args;" 
    end

    # Prepares the camera position (format Position)
    # 
    # ==== Syntax
    #
    #      camera camPreparePos position
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object  
    # *    +position+ - Array - format Position  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camPreload, #camCommitPrepared
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camPreparePos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _camera camPreparePos getPos player 
    # 
    def camPreparePos _obj, _args
      "_obj camPreparePos _args;" 
    end

    # Prepares the camera position relative to the current position of the currect target (see camPrepareTarget)
    # 
    # ==== Syntax
    #
    #      camera camPrepareRelPos position
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object  
    # *    +position+ - Array - format (Position)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camPreload, #camCommitPrepared
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camPrepareRelPos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _camera camPrepareRelPos [10,5,-2]   
    # 
    def camPrepareRelPos _obj, _args
      "_obj camPrepareRelPos _args;" 
    end

    # Prepares the camera target to a position or to a target
    # 
    # ==== Syntax
    #
    #      camera camPrepareTarget target
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object - object of type "camera"  
    # *    +position+ - Array - format Position,  target location  
    # *    +camera+ - Object - object of type "camera"  
    # *    +target+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camPreload, #camCommitPrepared
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camPrepareTarget
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _camera camPrepareTarget getPos player 
    # 
    # ====== Example 2:
    # 
    #    _camera camPrepareTarget player 
    # 
    def camPrepareTarget _obj, _args
      "_obj camPrepareTarget _args;" 
    end

    # Set camera bank angle.
    # 
    # ==== Description
    # 
    # Does not commit changes
    #  
    # ==== Syntax
    #
    #      camera camSetBank bank
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object  
    # *    +bank+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camSetDive, #setVectorUp, #fn vbs setPitchBank (VBS2)
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camSetBank
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _camera camSetBank -0.1 
    # 
    def camSetBank _obj, _args
      "_obj camSetBank _args;" 
    end

    # Set the direction of the given camera.
    # 
    # ==== Description
    # 
    # Needs the call of camCommit to be conducted
    #  
    # ==== Syntax
    #
    #      camera camSetDir direction
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object - object of type "camera"  
    # *    +direction+ - (Prior to Arma 3) Number - direction in degrees, range 0 to 360.  
    # *    +direction+ - (Since Arma 3) Array - direction of camera  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #direction, #setDir, #camSetTarget
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camSetDir
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _cam camSetDir 90
    # 
    def camSetDir _obj, _args
      "_obj camSetDir _args;" 
    end

    # Set camera dive angle.
    # 
    # ==== Description
    # 
    # Does not commit changes
    #  
    # ==== Syntax
    #
    #      camera camSetDive dive
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object  
    # *    +dive+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camSetBank, #setVectorUp, #fn vbs setPitchBank (VBS2)
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camSetDive
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _camera camSetDive -0.1
    # 
    def camSetDive _obj, _args
      "_obj camSetDive _args;" 
    end

    # focusRange is in format [distance,blur].
    # 
    # ==== Description
    # 
    # Sets the camera focus blur.
    # 
    # It does not automatically commit changes
    #  
    # ==== Syntax
    #
    #      camera camSetFocus focusRange
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object  
    # *    +focusRange+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camPrepareFocus
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camSetFocus
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _camera camSetFocus [50, 1]
    # 
    def camSetFocus _obj, _args
      "_obj camSetFocus _args;" 
    end

    # Set the zoom level (field of view) of the given camera.
    # 
    # ==== Description
    # 
    # The default zoom level is 0.
    # 
    # 7, 0.
    # 
    # 01 is the nearest and 2 the furthest zoom value.
    # 
    # The angle of the field of view is atan(FOV)*2 radians when in 4:3 aspect ratio.
    # 
    # Needs the call of camCommit to be conducted
    #  
    # ==== Syntax
    #
    #      camera camSetFov level
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object - object of type "camera"  
    # *    +level+ - Number - zoom level, range 0.01 to 2 (see description above)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camSetFovRange, #camSetTarget
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camSetFov
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _cam camSetFov 0.7
    # 
    def camSetFov _obj, _args
      "_obj camSetFov _args;" 
    end

    # Set the zoom level (field of view) start and end values for automatical zooming.
    # 
    # ==== Description
    # 
    # The default zoom level is 0.
    # 
    # 7, 0 is the nearest and 1 the most far zoom value.
    # 
    # Needs the call of camCommit to be conducted
    #  
    # ==== Syntax
    #
    #      camera camSetFovRange fovRange
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object - object of type "camera"  
    # *    +fovRange+ - Array - zoom level, range 0 to 1 (see description above)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camSetFov
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camSetFovRange
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _cam camSetFovRange [0.1,0.7]
    # 
    def camSetFovRange _obj, _args
      "_obj camSetFovRange _args;" 
    end

    # Set the position of the given camera or seagull.
    # 
    # ==== Description
    # 
    # Needs the call of camCommit to be conducted
    #  
    # ==== Syntax
    #
    #      camera camSetPos position
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object - object of type "camera" or "seagull"  
    # *    +position+ - Array - Position to set the object to  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camSetRelPos, #setPos
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camSetPos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _cam camSetPos [2300,1000,130]
    # 
    def camSetPos _obj, _args
      "_obj camSetPos _args;" 
    end

    # Set the position of the given camera relative to its target set with camSetTarget.
    # 
    # ==== Description
    # 
    # Needs the call of camCommit to be conducted
    #  
    # ==== Syntax
    #
    #      camera camSetRelPos position
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object - object of type "camera"  
    # *    +position+ - Array - relative Position  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camSetPos
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camSetRelPos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _cam camSetTarget _car
    #    _cam camSetRelPos [0,10,8]
    # 
    def camSetRelPos _obj, _args
      "_obj camSetRelPos _args;" 
    end

    # Set the target object or position where the given camera should point at.
    # 
    # ==== Description
    # 
    # Needs the call of camCommit to be conducted
    #  
    # ==== Syntax
    #
    #      camera camSetTarget position
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object - object of type "camera"  
    # *    +target+ - Object - target location  
    # *    +camera+ - Object - object of type "camera"  
    # *    +position+ - Array - target location - Position  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camTarget
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camSetTarget
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _camera camSetTarget player
    # 
    # ====== Example 2:
    # 
    #    _camera camSetTarget [2540,1503,26]
    # 
    def camSetTarget _obj, _args
      "_obj camSetTarget _args;" 
    end

    # Returns camera's target
    # 
    # ==== Syntax
    #
    #      camTarget camera
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object -  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camSetTarget
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camTarget
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def camTarget _args
      "camTarget _args;" 
    end

    # Set / clear using of night vision during cutscenes
    # 
    # ==== Syntax
    #
    #      camUseNVG set
    #
    # ==== Parameters
    # 
    # *    +set+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/camUseNVG
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     camUseNVG true 
    # 
    def camUseNVG _args
      "camUseNVG _args;" 
    end

    # Switch to the given camera or object with the given effect.
    # 
    # ==== Description
    # 
    # If you want to switch the screen directly to the first-person, aiming, third-person or group view of an object, use switchCamera instead.
    # 
    # The effect type "Terminate" is used to exit the current camera view and switch back to the player's view.
    # 
    # Does not need camCommit
    #  
    # ==== Syntax
    #
    #      camera cameraEffect [name, position]
    #
    # ==== Parameters
    # 
    # *    +camera+ - Object - object of type "camera"  
    # *    +[name, position]+ - Array  
    # *    +name+ - String - the effect type. One of "Internal", "External", "Fixed", "FixedWithZoom" and "Terminate"  
    # *    +position+ - String - position of the effect. One of "TOP", "LEFT", "RIGHT", "FRONT" and "BACK" ("BACK" is normally used)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #switchCamera, #setCameraEffect, #cameraView, #cameraOn
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cameraEffect
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _cam cameraEffect ["internal", "BACK"]
    # 
    def cameraEffect _obj, _args
      "_obj cameraEffect _args;" 
    end

    # Enable / disable showing of in-game UI during currently active camera effect
    # 
    # ==== Syntax
    #
    #      cameraEffectEnableHUD enable
    #
    # ==== Parameters
    # 
    # *    +enable+ - Boolean -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cameraEffectEnableHUD
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    cameraEffectEnableHUD true
    # 
    def cameraEffectEnableHUD _args
      "cameraEffectEnableHUD _args;" 
    end

    # Return camera interest for given entity, as set by setCameraInterest, or as autodetected
    # 
    # ==== Syntax
    #
    #      Number = cameraInterest entity
    #
    # ==== Parameters
    # 
    # *    +entity+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cameraInterest
    #
    # ==== Examples
    # 
    def cameraInterest _args
      "cameraInterest _args;" 
    end

    # Returns the vehicle to which the camera is attached
    # 
    # ==== Syntax
    #
    #      Object = cameraOn
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #switchCamera, #cameraView, #cameraEffect
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cameraOn
    #
    # ==== Examples
    # 
    def cameraOn 
      "cameraOn" 
    end

    # Returns mode of active camera view.
    # 
    # ==== Description
    # 
    # Mode is one of:
    # 
    # "INTERNAL" (1st person)
    # 
    # "EXTERNAL" (3rd person)
    # 
    # "GUNNER" (optics / sights)
    # 
    # "GROUP" (commander view)
    #  
    # ==== Syntax
    #
    #      cameraView
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #switchCamera, #cameraOn, #cameraEffect
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cameraView
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (cameraOn == _vehicle && cameraView == "External") then
    #    {
    #      _vehicle switchCamera "Internal";
    #    };
    # 
    def cameraView 
      "cameraView" 
    end

    # Return root of campaign description.
    # 
    # ==== Description
    # 
    # ext entries hierarchy
    #  
    # ==== Syntax
    #
    #      Config = campaignConfigFile
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Config
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #configFile, #missionConfigFile, #config/name, #config >> name, #configName, #count, #getArray, #getText, #getNumber, #inheritsFrom, #isArray, #isClass, #isNumber, #isText, #select
    # 
    # Official Wiki: https://community.bistudio.com/wiki/campaignConfigFile
    #
    # ==== Examples
    # 
    def campaignConfigFile 
      "campaignConfigFile" 
    end

    # Check if given object can be stored in inventory of given unit
    # 
    # ==== Syntax
    #
    #      unit canAdd item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String - Config class  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/canAdd
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def canAdd _obj, _args
      "_obj canAdd _args;" 
    end

    # Checks if given object can be stored into soldier's backpack
    # 
    # ==== Syntax
    #
    #      unit canAddItemToBackpack item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/canAddItemToBackpack
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def canAddItemToBackpack _obj, _args
      "_obj canAddItemToBackpack _args;" 
    end

    # Checks if given object can be stored into soldier's uniform
    # 
    # ==== Syntax
    #
    #      unit canAddItemToUniform item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/canAddItemToUniform
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def canAddItemToUniform _obj, _args
      "_obj canAddItemToUniform _args;" 
    end

    # Checks if given object can be stored into soldier's vest
    # 
    # ==== Syntax
    #
    #      unit canAddItemToVest item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/canAddItemToVest
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def canAddItemToVest _obj, _args
      "_obj canAddItemToVest _args;" 
    end

    # Returns if the given vehicle is still able to fire.
    # 
    # ==== Description
    # 
    # This command checks only the damage value, not the ammo!
    #  
    # ==== Syntax
    #
    #      Boolean = canFire unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Boolean -true if it's still able to fire, false if not
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #canMove, #canStand
    # 
    # Official Wiki: https://community.bistudio.com/wiki/canFire
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?!(canFire _tank) : player sideChat "Tank disabled!"
    # 
    def canFire _args
      "canFire _args;" 
    end

    # Returns if the given vehicle is still able to move.
    # 
    # ==== Description
    # 
    # This command checks only the damage value, not the amount of fuel!
    #  
    # ==== Syntax
    #
    #      Boolean = canMove unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Boolean -true if the vehicle is still able to move, false if not
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #canFire, #canStand
    # 
    # Official Wiki: https://community.bistudio.com/wiki/canMove
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?!(canMove _tank) : player sideChat "He's nailed on the ground! Now hurry!"
    # 
    def canMove _args
      "canMove _args;" 
    end

    # Returns if the given soldier is able to stand up
    # 
    # ==== Syntax
    #
    #      Boolean = canStand unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Boolean -true if he's still able to stand up, false if not. Automatically return false if unit is vehicle.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #canMove, #canFire
    # 
    # Official Wiki: https://community.bistudio.com/wiki/canStand
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?!(canStand player) : player groupChat "My legs! They hit my legs!"
    # 
    def canStand _args
      "canStand _args;" 
    end

    # Check if cargo of this vehicle want to get out when in combat
    # 
    # ==== Syntax
    #
    #      canUnloadInCombat vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object -  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/canUnloadInCombat
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (canUnloadInCombat _vehicle) then {...};
    # 
    def canUnloadInCombat _args
      "canUnloadInCombat _args;" 
    end

    # Cancels a simple task destination
    # 
    # ==== Syntax
    #
    #      cancelSimpleTaskDestination task
    #
    # ==== Parameters
    # 
    # *    +task+ - Task  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cancelSimpleTaskDestination
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def cancelSimpleTaskDestination _args
      "cancelSimpleTaskDestination _args;" 
    end

    # Returns if the given unit is captive.
    # 
    # ==== Description
    # 
    # "captive" means that enemies will not shoot at the unit
    #  
    # ==== Syntax
    #
    #      Boolean = captive object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Boolean -true if the unit is captive, false if not
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setCaptive
    # 
    # Official Wiki: https://community.bistudio.com/wiki/captive
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?!(captive _general) : _general setCaptive true
    # 
    def captive _args
      "captive _args;" 
    end

    # Checks whether the unit is a captive.
    # 
    # ==== Description
    # 
    # If the unit is a vehicle, its commander is checked instead.
    # 
    # If a unit's captivity level was set as a Boolean, then the returned number is either 0 (for false) or 1 (for true)
    #  
    # ==== Syntax
    #
    #      captiveNum unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #captive, #setCaptive
    # 
    # Official Wiki: https://community.bistudio.com/wiki/captiveNum
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _captivity = captiveNum _unit
    # 
    def captiveNum _args
      "captiveNum _args;" 
    end

    # See switch do
    # 
    # ==== Syntax
    #
    #      case b
    #
    # ==== Parameters
    # 
    # *    +b+ - Anything  
    #
    # ==== Returns
    #
    #      Switch Type
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Control Structures
    # 
    # Official Wiki: https://community.bistudio.com/wiki/case
    #
    # ==== Examples
    # 
    def case _args
      "case _args;" 
    end

    # Processes code when an exception is thrown in a try block.
    # 
    # ==== Description
    # 
    # The exception caught can be found in the _exception variable
    #  
    # ==== Syntax
    #
    #      try-block catch code
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Anything
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Exception handling
    # 
    # Official Wiki: https://community.bistudio.com/wiki/catch
    #
    # ==== Examples
    # 
    def catch _obj, _args
      "_obj catch _args;" 
    end

    # Returns the current state of a checkbox
    # 
    # ==== Syntax
    #
    #      cbChecked control
    #
    # ==== Parameters
    # 
    # *    +control + - Control  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #cbSetChecked
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cbChecked
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _checked = cbChecked _myCheckBox;
    # 
    def cbChecked _args
      "cbChecked _args;" 
    end

    # Sets the current state of a checkbox
    # 
    # ==== Syntax
    #
    #      control cbSetChecked state
    #
    # ==== Parameters
    # 
    # *    +control + - Control  
    # *    +state + - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #cbChecked
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cbSetChecked
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _myCheckBox cbSetChecked true;
    # 
    def cbSetChecked _obj, _args
      "_obj cbSetChecked _args;" 
    end

    # The ceil value of x
    # 
    # ==== Syntax
    #
    #      Number = ceil x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands, #floor, #round
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ceil
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ceil 5.25
    #    Result is 6
    # 
    # ====== Example 2:
    # 
    #    ceil -5.25
    #    Result is -5
    # 
    def ceil _args
      "ceil _args;" 
    end

    # Checks whether cheats are enabled (whether the designers' version is running)
    # 
    # ==== Syntax
    #
    #      Boolean = cheatsEnabled
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cheatsEnabled
    #
    # ==== Examples
    # 
    def cheatsEnabled 
      "cheatsEnabled" 
    end

    # Check if given AI feature is currently enabled.
    # 
    # ==== Description
    # 
    # Feature may be one of:
    # 
    # "AwareFormationSoft", "CombatFormationSoft"
    #  
    # ==== Syntax
    #
    #      checkAIFeature feature
    #
    # ==== Parameters
    # 
    # *    +feature+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #enableAIFeature
    # 
    # Official Wiki: https://community.bistudio.com/wiki/checkAIFeature
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _featureUsed = checkAIFeature "AwareFormationSoft" 
    # 
    def checkAIFeature _args
      "checkAIFeature _args;" 
    end

    # Pre-defined variable for the civilian side.
    # 
    # ==== Description
    # 
    # When used in a format statement (hint format["%1",civilian]), the string returned is "CIV"
    #  
    # ==== Syntax
    #
    #      Side = civilian
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #side, #west, #east, #resistance
    # 
    # Official Wiki: https://community.bistudio.com/wiki/civilian
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?((side _unit)==civilian) : hint "This is a civilian unit!"
    # 
    def civilian 
      "civilian" 
    end

    # Returns short name of location
    # 
    # ==== Syntax
    #
    #      className loc
    #
    # ==== Parameters
    # 
    # *    +loc+ - Location  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/className
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def className _args
      "className _args;" 
    end

    # Removes all items from the backpack
    # 
    # ==== Syntax
    #
    #      clearAllItemsFromBackpack unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/clearAllItemsFromBackpack
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def clearAllItemsFromBackpack _args
      "clearAllItemsFromBackpack _args;" 
    end

    # Removes all backpacks from ammo box (or any general weapon holder container)
    # 
    # ==== Syntax
    #
    #      clearBackpackCargo box
    #
    # ==== Parameters
    # 
    # *    +box+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #clearBackpackCargoGlobal, #addBackpackCargo, #clearMagazineCargo, #clearMagazineCargoGlobal, #clearWeaponCargo, #clearWeaponCargoGlobal, #clearItemCargo, #clearItemCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/clearBackpackCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def clearBackpackCargo _args
      "clearBackpackCargo _args;" 
    end

    # Removes all backpacks from the vehicle cargo space.
    # 
    # ==== Description
    # 
    # MP synchronized
    #  
    # ==== Syntax
    #
    #      clearBackpackCargoGlobal unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #clearBackpackCargo, #addBackpackCargoGlobal, #clearMagazineCargo, #clearMagazineCargoGlobal, #clearWeaponCargo, #clearWeaponCargoGlobal, #clearItemCargo, #clearItemCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/clearBackpackCargoGlobal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    clearBackpackCargoGlobal jeepOne;
    # 
    def clearBackpackCargoGlobal _args
      "clearBackpackCargoGlobal _args;" 
    end

    # Removes all icon from group
    # 
    # ==== Syntax
    #
    #      clearGroupIcons group
    #
    # ==== Parameters
    # 
    # *    +group+ - Group -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addGroupIcon, #getGroupIcon, #getGroupIconParams, #groupIconSelectable, #groupIconsVisible, #onGroupIconClick, #removeGroupIcon, #setGroupIcon, #setGroupIconParams, #setGroupIconsSelectable, #setGroupIconsVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/clearGroupIcons
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def clearGroupIcons _args
      "clearGroupIcons _args;" 
    end

    # Removes all items from ammo box (or any general weapon holder container)
    # 
    # ==== Syntax
    #
    #      clearItemCargo box
    #
    # ==== Parameters
    # 
    # *    +box+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #clearItemCargoGlobal, #addItemCargo, #clearMagazineCargo, #clearMagazineCargoGlobal, #clearWeaponCargo, #clearWeaponCargoGlobal, #clearBackpackCargo, #clearBackpackCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/clearItemCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def clearItemCargo _args
      "clearItemCargo _args;" 
    end

    # Removes all items from ammo box (or any general weapon holder container)
    # 
    # ==== Syntax
    #
    #      clearItemCargoGlobal box
    #
    # ==== Parameters
    # 
    # *    +box+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Command is executed on all connected clients in multiplayer.
    # 
    # ==== See Also
    # 
    # #clearItemCargo, #addItemCargoGlobal, #clearMagazineCargo, #clearMagazineCargoGlobal, #clearWeaponCargo, #clearWeaponCargoGlobal, #clearBackpackCargo, #clearBackpackCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/clearItemCargoGlobal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def clearItemCargoGlobal _args
      "clearItemCargoGlobal _args;" 
    end

    # Removes all items from ammo box (or any general weapon holder container)
    # 
    # ==== Syntax
    #
    #      clearItemPool box
    #
    # ==== Parameters
    # 
    # *    +box+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addItemPool
    # 
    # Official Wiki: https://community.bistudio.com/wiki/clearItemPool
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    clearItemCargo jeepOne
    # 
    def clearItemPool _args
      "clearItemPool _args;" 
    end

    # Remove all magazines from the given vehicle's magazine cargo space
    # 
    # ==== Syntax
    #
    #      clearMagazineCargo vehicleName
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #clearMagazineCargoGlobal, #addMagazineCargo, #addWeaponCargo, #clearWeaponCargo, #clearWeaponCargoGlobal, #clearBackpackCargo, #clearBackpackCargoGlobal, #clearItemCargo, #clearItemCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/clearMagazineCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    clearMagazineCargo _truck
    # 
    def clearMagazineCargo _args
      "clearMagazineCargo _args;" 
    end

    # Removes all magazines from the vehicle cargo space.
    # 
    # ==== Description
    # 
    # MP synchronized
    #  
    # ==== Syntax
    #
    #      clearMagazineCargoGlobal unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #clearMagazineCargo, #addMagazineCargoGlobal, #clearWeaponCargo, #clearWeaponCargoGlobal, #clearBackpackCargo, #clearBackpackCargoGlobal, #clearItemCargo, #clearItemCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/clearMagazineCargoGlobal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    clearMagazineCargoGlobal jeepOne;
    # 
    def clearMagazineCargoGlobal _args
      "clearMagazineCargoGlobal _args;" 
    end

    # Remove all magazines from the magazine pool, of which the player may choose in the following missions.
    # 
    # ==== Description
    # 
    # Available in campaigns only
    #  
    # ==== Syntax
    #
    #      clearMagazinePool
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazinePool
    # 
    # Official Wiki: https://community.bistudio.com/wiki/clearMagazinePool
    #
    # ==== Examples
    # 
    def clearMagazinePool 
      "clearMagazinePool" 
    end

    # Clear the current overlay
    # 
    # ==== Syntax
    #
    #      clearOverlay map
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/clearOverlay
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    clearOverlay _map,
    # 
    def clearOverlay _args
      "clearOverlay _args;" 
    end

    # Clean up the content of radio protocol history
    # 
    # ==== Syntax
    #
    #      clearRadio
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #enableRadio
    # 
    # Official Wiki: https://community.bistudio.com/wiki/clearRadio
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    clearRadio;
    # 
    def clearRadio 
      "clearRadio" 
    end

    # Remove all weapons from the given vehicle's weapon cargo space
    # 
    # ==== Syntax
    #
    #      clearWeaponCargo vehicleName
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #clearWeaponCargoGlobal, #addWeaponCargo, #addMagazineCargo, #clearMagazineCargo, #clearMagazineCargoGlobal, #clearBackpackCargo, #clearBackpackCargoGlobal, #clearItemCargo, #clearItemCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/clearWeaponCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    clearWeaponCargo _truck
    # 
    def clearWeaponCargo _args
      "clearWeaponCargo _args;" 
    end

    # Removes all weapons from the vehicle cargo space.
    # 
    # ==== Description
    # 
    # MP synchronized
    #  
    # ==== Syntax
    #
    #      clearWeaponCargoGlobal unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #clearWeaponCargo, #addWeaponCargo, #clearMagazineCargo, #clearMagazineCargoGlobal, #clearBackpackCargo, #clearBackpackCargoGlobal, #clearItemCargo, #clearItemCargoGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/clearWeaponCargoGlobal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    clearWeaponCargoGlobal jeepOne;
    # 
    def clearWeaponCargoGlobal _args
      "clearWeaponCargoGlobal _args;" 
    end

    # Remove all weapons from the weapon pool, of which the player may choose in the following missions.
    # 
    # ==== Description
    # 
    # Available in campaigns only
    #  
    # ==== Syntax
    #
    #      clearWeaponPool
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWeaponPool
    # 
    # Official Wiki: https://community.bistudio.com/wiki/clearWeaponPool
    #
    # ==== Examples
    # 
    def clearWeaponPool 
      "clearWeaponPool" 
    end

    # Close the currently active user dialog
    # 
    # ==== Syntax
    #
    #      closeDialog idc
    #
    # ==== Parameters
    # 
    # *    +idc + - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createDialog, #dialog
    # 
    # Official Wiki: https://community.bistudio.com/wiki/closeDialog
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    closeDialog 0
    # 
    def closeDialog _args
      "closeDialog _args;" 
    end

    # Close given display
    # 
    # ==== Syntax
    #
    #      display closeDisplay exitcode
    #
    # ==== Parameters
    # 
    # *    +display+ - Display  
    # *    +exitcode+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createDisplay
    # 
    # Official Wiki: https://community.bistudio.com/wiki/closeDisplay
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _display closeDisplay IDC_OK
    # 
    def closeDisplay _obj, _args
      "_obj closeDisplay _args;" 
    end

    # Closes the current overlay without committing
    # 
    # ==== Syntax
    #
    #      closeOverlay map
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/closeOverlay
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def closeOverlay _args
      "closeOverlay _args;" 
    end

    # Collapse the object tree
    # 
    # ==== Syntax
    #
    #      collapseObjectTree map
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/collapseObjectTree
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    collapseObjectTree _map,
    # 
    def collapseObjectTree _args
      "collapseObjectTree _args;" 
    end

    # Returns the combat mode of the given unit.
    # 
    # ==== Description
    # 
    # See setCombatMode for more information about combat modes
    #  
    # ==== Syntax
    #
    #      String = combatMode grp
    #
    # ==== Parameters
    # 
    # *    +grp+ - Object or Group  
    #
    # ==== Returns
    #
    #      String -One of "BLUE", "GREEN", "WHITE, "YELLOW" and "RED"
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #combat mode description, AI Combat Modes, #setCombatMode, #behaviour, #setBehaviour, #skill, #setSkill array, CfgAISkill
    # 
    # Official Wiki: https://community.bistudio.com/wiki/combatMode
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?((combatMode _grp1)=="BLUE") : _grp1 setCombatMode "GREEN"
    # 
    def combatMode _args
      "combatMode _args;" 
    end

    # Orders a unit to reload defined magazine commence fire burst on the given position (via the radio)
    # 
    # ==== Syntax
    #
    #      unit commandArtilleryFire [position, type, rounds]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +[position, type, rounds]+ - Array  
    # *    +position+ - Position  
    # *    +type+ - String  
    # *    +rounds+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getArtilleryAmmo, #getArtilleryETA, #doArtilleryFire, #enableEngineArtillery, #getArtilleryComputerSettings, #shownArtilleryComputer, #inRangeOfArtillery
    # 
    # Official Wiki: https://community.bistudio.com/wiki/commandArtilleryFire
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    mortar1 commandArtilleryFire [[3000, 120, 1000], "8Rnd_82mm_Mo_shells", 3]
    # 
    def commandArtilleryFire _obj, _args
      "_obj commandArtilleryFire _args;" 
    end

    # Types text to the command radio channel.
    # 
    # ==== Description
    # 
    # ,Note: this function only types text to the list,it does not broadcast,the message.
    # 
    # If you want the message to show on all computers,you have,to execute it on all of them
    #  
    # ==== Syntax
    #
    #      unit commandChat chatText
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object or Array -  
    # *    +chatText+ - String -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/commandChat
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    soldierOne commandChat "Show this text"
    # 
    def commandChat _obj, _args
      "_obj commandChat _args;" 
    end

    # Orders a unit to process command defined by FSM file (via the radio)
    # 
    # ==== Syntax
    #
    #      unitName commandFSM [fsm name, position, target]
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object or Array  
    # *    +[fsm name, position, target]+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # FSM, FSM_Editor_Manual, #execFSM, #completedFSM, #doFSM, #getFSMVariable, #setFSMVariable
    # 
    # Official Wiki: https://community.bistudio.com/wiki/commandFSM
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne commandFSM ["move.fsm", position player, player]
    # 
    def commandFSM _obj, _args
      "_obj commandFSM _args;" 
    end

    # Order the given unit to fire on the given target (via the radio).
    # 
    # ==== Description
    # 
    # If the target is objNull, the unit is ordered to fire on its current target (set with doTarget or commandTarget)
    #  
    # ==== Syntax
    #
    #      unitName commandFire target
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object or Array  
    # *    +target+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #doFire, #fire
    # 
    # Official Wiki: https://community.bistudio.com/wiki/commandFire
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ESoldier1 commandFire _WSoldier1
    # 
    def commandFire _obj, _args
      "_obj commandFire _args;" 
    end

    # Order the given unit to follow the given other unit (via the radio)
    # 
    # ==== Syntax
    #
    #      unitName commandFollow followedunit
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object or Array  
    # *    +followedunit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #doFollow
    # 
    # Official Wiki: https://community.bistudio.com/wiki/commandFollow
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 commandFollow _soldier2
    # 
    def commandFollow _obj, _args
      "_obj commandFollow _args;" 
    end

    # Orders the unit to get out from the vehicle (via the radio)
    # 
    # ==== Syntax
    #
    #      commandGetOut unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object or Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # This command is only effective when used on local units. When used on a remote unit, this command will create radio dialogue on the machine the unit is local to, but the unit will not leave the vehicle.
    # 
    # ==== See Also
    # 
    # #doGetOut
    # 
    # Official Wiki: https://community.bistudio.com/wiki/commandGetOut
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    commandGetOut _unitOne
    # 
    def commandGetOut _args
      "commandGetOut _args;" 
    end

    # Order the given unit(s) to move to the given location (via the radio).
    # 
    # ==== Description
    # 
    # Exactly the same as doMove, except this command displays a radio message
    #  
    # ==== Syntax
    #
    #      unitName commandMove position
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object or Array  
    # *    +position+ - (Array) - format Position  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # This command is only effective when used on local units. When used on a remote unit, this command will create radio dialogue on the machine the unit is local to, but the unit will not move.
    # 
    # ==== See Also
    # 
    # #doMove, #setDestination, #moveTo, #move, #addWaypoint, #fn_vbs_doMoveEx
    # 
    # Official Wiki: https://community.bistudio.com/wiki/commandMove
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 commandMove (getMarkerPos "Marker1") 
    # 
    def commandMove _obj, _args
      "_obj commandMove _args;" 
    end

    # Sends the message to the command radio channel.
    # 
    # ==== Description
    # 
    # The message is defined in the description.
    # 
    # ext file or radio protocol
    #  
    # ==== Syntax
    #
    #      unit commandRadio radioName
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object or Array  
    # *    +radioName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/commandRadio
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player commandRadio "messageOne";
    # 
    def commandRadio _obj, _args
      "_obj commandRadio _args;" 
    end

    # Order the given unit(s) to stop (via the radio).
    # 
    # ==== Description
    # 
    # A stop command will never finish, the unit will never be ready
    #  
    # ==== Syntax
    #
    #      commandStop unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object or Array of Objects  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #doStop, #stopped, #stop
    # 
    # Official Wiki: https://community.bistudio.com/wiki/commandStop
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    commandStop _soldier1;
    # 
    # ====== Example 2:
    # 
    #    commandStop [_soldier1, _soldier2];
    # 
    # ====== Example 3:
    # 
    #    commandStop (units player);
    # 
    def commandStop _args
      "commandStop _args;" 
    end

    # Order the given unit(s) to target the given target (via the radio)
    # 
    # ==== Syntax
    #
    #      unitName commandTarget target
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +target+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # This command is only effective when used on local units. When used on a remote unit, this command will create radio dialogue on the machine the unit is local to, but the unit will not target the target.
    # 
    # ==== See Also
    # 
    # #assignedTarget, #doTarget
    # 
    # Official Wiki: https://community.bistudio.com/wiki/commandTarget
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ESoldier1 commandTarget _WSoldier1
    # 
    def commandTarget _obj, _args
      "_obj commandTarget _args;" 
    end

    # Orders the unit(s) to watch the given position or target (via the radio).
    # 
    # ==== Description
    # 
    # Use objNull as the target to order a unit to stop watching a position/target
    #  
    # ==== Syntax
    #
    #      unitName(s) commandWatch target
    #
    # ==== Parameters
    # 
    # *    +unitNames+ - Object or Array  
    # *    +position+ - Array - format Position  
    # *    +unitNames+ - Object or Array  
    # *    +target+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # This command is only effective when used on local units. When used on a remote unit, this command will create radio dialogue on the machine the unit is local to, but the unit will not watch the target object/position.
    # 
    # ==== See Also
    # 
    # #doWatch
    # 
    # Official Wiki: https://community.bistudio.com/wiki/commandWatch
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne commandWatch markerPos "MarkerMoveOne"
    # 
    # ====== Example 2:
    # 
    #    [s1,s2] commandWatch player
    # 
    def commandWatch _obj, _args
      "_obj commandWatch _args;" 
    end

    # In OFP it returns the commander of a vehicle.
    # 
    # ==== Description
    # 
    # Since ArmA and VBS2 it returns the primary observer.
    # 
    # The commander of a vehicle can be found with effectiveCommander
    #  
    # ==== Syntax
    #
    #      Object = commander vehicleName
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      Object -The unit sitting in the commander place is returned. If vehicle is not a vehicle but a person, the person is returned.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #driver, #gunner, #crew
    # 
    # Official Wiki: https://community.bistudio.com/wiki/commander
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (commander _tank) action ["getout",_tank]
    # 
    def commander _args
      "commander _args;" 
    end

    # Return the name of the player actual topmost commanding menu
    # 
    # ==== Syntax
    #
    #      commandingMenu
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/commandingMenu
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waitUntil {commandingMenu == "RscStatus"}; hint "Press 4, I'm bleeding !";
    # 
    def commandingMenu 
      "commandingMenu" 
    end

    # Define a comment.
    # 
    # ==== Description
    # 
    # 
    # 
    # Mainly used in SQF Syntax, as you're able to introduce comment lines with semicolons in a SQS script
    #  
    # ==== Syntax
    #
    #      comment comment
    #
    # ==== Parameters
    # 
    # *    +comment+ - String - the comment that you'd like to write here  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Control Structures
    # 
    # Official Wiki: https://community.bistudio.com/wiki/comment
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    script.sqs comment "This is a commented line"
    # 
    # ====== Example 2:
    # 
    #    function.sqf comment "This is a commented line";
    # 
    def comment _args
      "comment _args;" 
    end

    # Commit the current overlay
    # 
    # ==== Syntax
    #
    #      commitOverlay map
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/commitOverlay
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    commitOverlay _map,
    # 
    def commitOverlay _args
      "commitOverlay _args;" 
    end

    # Compile expression
    # 
    # ==== Syntax
    #
    #      compile expression
    #
    # ==== Parameters
    # 
    # *    +expression+ - String  
    #
    # ==== Returns
    #
    #      Code
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #call, #spawn, #compileFinal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/compile
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _string = "a = a + 1";
    #    _code = compile _string; 
    #    call _code;
    # 
    # ====== Example 2:
    # 
    #    hint str compile "a = b";
    #    //Result: {a=b}
    # 
    def compile _args
      "compile _args;" 
    end

    # Compile expression and makes it final, preventing it from:
    # 
    # ==== Description
    # 
    # repeated compile or compileFinal
    # 
    # removal by nil
    # 
    # remote rewrite using publicVariable, publicVariableClient and publicVariableServer
    #  
    # ==== Syntax
    #
    #      Code = compileFinal expression
    #
    # ==== Parameters
    # 
    # *    +expression+ - String  
    #
    # ==== Returns
    #
    #      Code
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #compile, #call, #spawn
    # 
    # Official Wiki: https://community.bistudio.com/wiki/compileFinal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myCode = compileFinal "a = a + 1"; 
    #    call myCode;//--- Repeated compile won't have any effect
    #    myCode = compileFinal "a = a + 2";//--- Duplicate code will be final as well
    #    myDuplicateCode = myCode;
    # 
    def compileFinal _args
      "compileFinal _args;" 
    end

    # Check whether the given FSM completes.
    # 
    # ==== Description
    # 
    # The FSM handle is the number returned by the execFSM command
    #  
    # ==== Syntax
    #
    #      completedFSM fsmHandle
    #
    # ==== Parameters
    # 
    # *    +fsmHandle+ - Number  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # FSM, #commandFSM, #doFSM, #execFSM, #getFSMVariable, #setFSMVariable
    # 
    # Official Wiki: https://community.bistudio.com/wiki/completedFSM
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _completed = completedFSM _fsmHandle;
    # 
    def completedFSM _args
      "completedFSM _args;" 
    end

    # Creates a structured text by joining the given structured or plain texts
    # 
    # ==== Syntax
    #
    #      composeText [text1, text2, ...]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Structured Text
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #image, #lineBreak, #parseText, #text
    # 
    # Official Wiki: https://community.bistudio.com/wiki/composeText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _txt = composeText ["First line", image "data\isniper.paa", lineBreak, "Second line"];
    # 
    def composeText _args
      "composeText _args;" 
    end

    # Return root of config entries hierarchy.
    # 
    # ==== Description
    # 
    # See AllInOne Config for a full config extract as example
    #  
    # ==== Syntax
    #
    #      Config = configFile
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Config
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #missionConfigFile, #campaignConfigFile, #config/name, #config >> name, #configName, #count, #getArray, #getText, #getNumber, #inheritsFrom, #isArray, #isClass, #isNumber, #isText, #select
    # 
    # Official Wiki: https://community.bistudio.com/wiki/configFile
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _isMyClassActive = isClass(configFile/"CfgPatches"/"MyClass");
    # 
    def configFile 
      "configFile" 
    end

    # Returns name of config entry
    # 
    # ==== Syntax
    #
    #      String = configName config
    #
    # ==== Parameters
    # 
    # *    +config+ - Config  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #configFile, #config/name, #config >> name, #count, #getArray, #getText, #getNumber, #inheritsFrom, #isArray, #isClass, #isNumber, #isText, #select
    # 
    # Official Wiki: https://community.bistudio.com/wiki/configName
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _name = configName (configFile >> "CfgVehicles") 
    #    Result is "CfgVehicles"
    # 
    def configName _args
      "configName _args;" 
    end

    # Connect person with UAV terminal to UAV unit.
    # 
    # ==== Description
    # 
    # UAV Terminal item needs to be assigned to GPS slot
    #  
    # ==== Syntax
    #
    #      person connectTerminalToUav uav
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +uav+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #allUnitsUav, #getConnectedUav, #isUavConnected, #uavControl, #showUavFeed, #shownUavFeed
    # 
    # Official Wiki: https://community.bistudio.com/wiki/connectTerminalToUav
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    bool = player connectTerminalToUav uav1;
    # 
    # ====== Example 2:
    # 
    #    player connectTerminalToUav objNull; //disconnect
    # 
    def connectTerminalToUav _obj, _args
      "_obj connectTerminalToUav _args;" 
    end

    # A non-existing Control.
    # 
    # ==== Description
    # 
    # This value is not equal to anything, including itself
    #  
    # ==== Syntax
    #
    #      Control = controlNull
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Control
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/controlNull
    #
    # ==== Examples
    # 
    def controlNull 
      "controlNull" 
    end

    # Return the content of the (text) clipboard
    # 
    # ==== Syntax
    #
    #      copyFromClipboard
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #copyToClipboard, #diag_log
    # 
    # Official Wiki: https://community.bistudio.com/wiki/copyFromClipboard
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def copyFromClipboard 
      "copyFromClipboard" 
    end

    # Copy the text to the clipboard
    # 
    # ==== Syntax
    #
    #      copyToClipboard text
    #
    # ==== Parameters
    # 
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Disabled for security reasons.
    # 
    # ==== See Also
    # 
    # #copyFromClipboard, #diag_log
    # 
    # Official Wiki: https://community.bistudio.com/wiki/copyToClipboard
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    copyToClipboard (str (_data));
    # 
    def copyToClipboard _args
      "copyToClipboard _args;" 
    end

    # Copy the chain of waypoints from source to target group.
    # 
    # ==== Description
    # 
    # The target group will start to process waypoints from the first one
    #  
    # ==== Syntax
    #
    #      groupTo copyWaypoints groupFrom
    #
    # ==== Parameters
    # 
    # *    +groupTo+ - Group  
    # *    +groupFrom+ - Group  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypoints, #addWaypoint, #deleteWaypoint
    # 
    # Official Wiki: https://community.bistudio.com/wiki/copyWaypoints
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def copyWaypoints _obj, _args
      "_obj copyWaypoints _args;" 
    end

    # Cosine of a number, argument in degrees
    # 
    # ==== Syntax
    #
    #      Number = cos x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #acos, #sin, #asin
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    cos 60
    #    returns 0.5
    # 
    def cos _args
      "cos _args;" 
    end

    # Returns a count for either
    # 
    # ==== Description
    # 
    # the number of elements in array
    # 
    # the number of elements in array for which given condition is true
    # 
    # the number of sub-entries in a config object
    #  
    # ==== Syntax
    #
    #      count configname
    #
    # ==== Parameters
    # 
    # *    +condition+ - (optional) Code that must return true to be counted.  
    # *    +array+ - Array  
    # *    +configname+ - Config  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #find, #forEach, #in Array
    # 
    # Official Wiki: https://community.bistudio.com/wiki/count
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _cnt = count [0, 0, 1, 2]; // returns 4
    # 
    # ====== Example 2:
    # 
    #    _cnt = count units group player; // returns number of units in player group
    # 
    # ====== Example 3:
    # 
    #    _fnd = [1, 9, 8, 3, 4, 4, 4, 5, 6];
    #    {
    #    	_x == 4;
    #    } count _fnd; // returns 3
    # 
    # ====== Example 4:
    # 
    #    _alive = {
    #    	alive _x;
    #    } count allUnits; // returns the number of living units
    #    _cnt = count (configFile >> "CfgVehicles");
    # 
    def count _args
      "count _args;" 
    end

    # Count how many units in the array are considered enemy to the given unit
    # 
    # ==== Syntax
    #
    #      Number = unitName countEnemy arrayName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +arrayName+ - Array  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #countFriendly, #countSide, #countUnknown
    # 
    # Official Wiki: https://community.bistudio.com/wiki/countEnemy
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _num=player countEnemy list _triggerOne
    # 
    def countEnemy _obj, _args
      "_obj countEnemy _args;" 
    end

    # Count how many units in the array are considered friendly to the given unit
    # 
    # ==== Syntax
    #
    #      Number = unitName countFriendly arrayName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +arrayName+ - Array  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #countEnemy, #countSide, #countUnknown
    # 
    # Official Wiki: https://community.bistudio.com/wiki/countFriendly
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _num=player countFriendly list _triggerOne
    # 
    def countFriendly _obj, _args
      "_obj countFriendly _args;" 
    end

    # Count how many units in the array belong to given side
    # 
    # ==== Syntax
    #
    #      side countSide arrayName
    #
    # ==== Parameters
    # 
    # *    +side+ - Side  
    # *    +arrayName+ - Array of Objects  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #count, #countFriendly, #countEnemy, #countUnknown
    # 
    # Official Wiki: https://community.bistudio.com/wiki/countSide
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _num = west countSide list _triggerOne;
    # 
    # ====== Example 2:
    # 
    #    _numCivPlayable = civilian countSide playableUnits;
    # 
    def countSide _obj, _args
      "_obj countSide _args;" 
    end

    # Count how many units in the array are of given type.
    # 
    # ==== Description
    # 
    # Other than typeOf this command also works with parent classes like "Air", "Tank" and "Car".
    # 
    # For a full class reference see Classes
    #  
    # ==== Syntax
    #
    #      Number = type countType arrayName
    #
    # ==== Parameters
    # 
    # *    +type+ - String - class type  
    # *    +arrayName+ - Array  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #isKindOf, #typeOf, #countFriendly, #countEnemy, #countSide
    # 
    # Official Wiki: https://community.bistudio.com/wiki/countType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _count= "Tank" countType list _triggerOne
    # 
    def countType _obj, _args
      "_obj countType _args;" 
    end

    # Count how many units in the array are unknown to the given unit
    # 
    # ==== Syntax
    #
    #      Number = unitName countUnknown arrayName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +arrayName+ - Array  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #countFriendly, #countEnemy, #countType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/countUnknown
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _num=player countUnknown list _triggerOne
    # 
    def countUnknown _obj, _args
      "_obj countUnknown _args;" 
    end

    # Creates an (independent) agent (person) of the given type (type is a name of a subclass of CfgVehicles).
    # 
    # ==== Description
    # 
    # If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used.
    # 
    # The unit is placed inside a circle with this position as its center and placement as its radius.
    # 
    # Players assigned to an agent using setPlayable will be able to control the agent, operate weapons and other actions, but will not be able to access their inventory using the gear screen.
    # 
    # Special properties can be: "NONE" and "FORM"
    #  
    # ==== Syntax
    #
    #      Object = createAgent [type, position, markers, placement, special]
    #
    # ==== Parameters
    # 
    # *    +type+ - String from CfgVehicles  
    # *    +position+ - Array (Position format)  
    # *    +markers+ - Array  
    # *    +placement+ - Number radius  
    # *    +special+ - String "None", or "Form"  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createAgent
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    agent = createAgent ["SoldierWB", position player, [], 0, "FORM"]
    # 
    def createAgent _args
      "createAgent _args;" 
    end

    # Creates a new AI HQ for the given side.
    # 
    # ==== Description
    # 
    # An 'HQ ' is something each side needs to have to be able to communicate.
    # 
    # By default, all centers for units which are present in the mission are created before the mission is started.
    # 
    # This command can be used to initialize a side which has no units present in the Mission.
    # 
    # sqm, so that you can spawn groups and units for it.
    # 
    # For the available sides see Side
    #  
    # ==== Syntax
    #
    #      Side = createCenter side
    #
    # ==== Parameters
    # 
    # *    +side+ - Side  
    #
    # ==== Returns
    #
    #      Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createUnit, #createUnit array, #createGroup, #createVehicle, #createVehicle array, Side
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createCenter
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _SideHQ = createCenter east
    # 
    def createCenter _args
      "createCenter _args;" 
    end

    # Create a dialog which is defined either in the mission's description.
    # 
    # ==== Description
    # 
    # ext, in the campaign's description.
    # 
    # ext or in the global resource.
    # 
    # cpp.
    # 
    # The given name has to be the class name used in one of these files.
    # 
    # If another dialog is already opened, the desired dialog is created as a child dialog of the one already opened
    #  
    # ==== Syntax
    #
    #      Boolean = createDialog dialogName
    #
    # ==== Parameters
    # 
    # *    +dialogName+ - String - class name used in the description.ext / resource.cpp  
    #
    # ==== Returns
    #
    #      Boolean -true when the dialog was created successfully
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #closeDialog, #dialog
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createDialog
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ok = createDialog "RscDisplayGame"
    #    ?!(_ok) : hint "Dialog couldn't be opened!"
    # 
    def createDialog _args
      "createDialog _args;" 
    end

    # Create a link to the section of diary given by subject.
    # 
    # ==== Description
    # 
    # Record is selected based on given object (diary record,task or unit)
    #  
    # ==== Syntax
    #
    #      createDiaryLink [subject,object,text]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createDiaryLink
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _link = createDiarySubject ["Group",player,"Player"]
    # 
    # ====== Example 2:
    # 
    #    diaryRec1 = player createDiaryRecord ["diary", ["Record 1", "We can't refer to next record (("]];
    #    diaryRec2 = player createDiaryRecord ["diary", ["Record 2", "Got to " + (createDiaryLink ["Diary", diaryRec1, "record 1"])]]; 
    #    diaryRec3 = player createDiaryRecord ["diary", ["Record 3", "Got to " + (createDiaryLink ["Diary", diaryRec2, "record 2"])]];
    # 
    # ====== Example 3:
    # 
    #    funcProcessDiaryLink = {
    #        processDiaryLink createDiaryLink ["diary", _this, ""];
    #    };
    #    diaryRec1 = player createDiaryRecord ["diary", ["Record 1", 
    #        "In this example, we can go to any next record: go to <execute expression='diaryRec2 call funcProcessDiaryLink'>Record 2</execute>"
    #    ]];
    #    diaryRec2 = player createDiaryRecord ["diary", ["Record 2", 
    #        "Go to <execute expression='diaryRec3 call funcProcessDiaryLink'>Record 3</execute>"
    #    ]];
    #    diaryRec3 = player createDiaryRecord ["diary", ["Record 3", 
    #        "Go to <execute expression='diaryRec1 call funcProcessDiaryLink'>Record 1</execute>"
    #    ]];
    # 
    def createDiaryLink _args
      "createDiaryLink _args;" 
    end

    # Create a new subject page in a log
    # 
    # ==== Syntax
    #
    #      person createDiarySubject [subject,display name] or [subject,display name,picture]
    #
    # ==== Parameters
    # 
    # *    +person+ - Object -  
    # *    +[subject,display name,picture]+ - Array -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createDiaryRecord
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createDiarySubject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _index = player createDiarySubject ["myPage","My page"];
    # 
    def createDiarySubject _obj, _args
      "_obj createDiarySubject _args;" 
    end

    # Create child display of given display and load from  "resourceName"
    # 
    # ==== Syntax
    #
    #      parent createDisplay resourceName
    #
    # ==== Parameters
    # 
    # *    +parent+ - Display  
    # *    +resourceName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #closeDisplay
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createDisplay
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _display createDisplay "RscObserver"
    # 
    def createDisplay _obj, _args
      "_obj createDisplay _args;" 
    end

    # Opens gear dialog for given unit
    # 
    # ==== Syntax
    #
    #      CreateGearDialog [unit,resource]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/CreateGearDialog
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    createGearDialog [player, "RscDisplayGear"];
    #    createGearDialog [player, "RscMyDisplayGear"];
    # 
    def CreateGearDialog _args
      "CreateGearDialog _args;" 
    end

    # Creates a new AI group for the given Side.
    # 
    # ==== Description
    # 
    # An HQ (center) for that side must already be in the Mission.
    # 
    # sqm or have been initialized with createCenter.
    # 
    # For the available sides see Side
    #  
    # ==== Syntax
    #
    #      Group = createGroup side
    #
    # ==== Parameters
    # 
    # *    +side+ - Side  
    #
    # ==== Returns
    #
    #      Group
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #deleteGroup, #group, #setGroupId, #groupID, #units, #groupFromNetId, #netId, #leader, #selectLeader, #join, #createCenter, #createUnit, #createUnit array, #createVehicle, #createVehicle array, Side
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createGroup
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _group = createGroup east
    # 
    def createGroup _args
      "createGroup _args;" 
    end

    # Adds a point guarded by the given side.
    # 
    # ==== Description
    # 
    # The actual item or position guarded is determined by the following priority.
    # 
    # If idStatic is not negative, the position of a static object with the given id is guarded.
    # 
    # 
    # 
    # If the given vehicle is valid, the starting position of the vehicle is guarded.
    # 
    # otherwise the given position is guarded
    #  
    # ==== Syntax
    #
    #      createGuardedPoint [side, position, idStatic, vehicle]
    #
    # ==== Parameters
    # 
    # *    +side+ - Side  
    # *    +position+ - Position  
    # *    +idStatic+ - Number  
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Nothing or undocumented
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createGuardedPoint
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    point = createGuardedPoint [ east, [0, 0], -1, vehicle player ]
    # 
    def createGuardedPoint _args
      "createGuardedPoint _args;" 
    end

    # Creates a location of the specified class and dimensions at the specified position.
    # 
    # ==== Description
    # 
    # Classes are defined in CfgLocationTypes
    #  
    # ==== Syntax
    #
    #      Location = createLocation [className, position, sizeX, sizeY]
    #
    # ==== Parameters
    # 
    # *    +className+ - String  
    # *    +position+ - Position  
    # *    +sizeX+ - Number in meters  
    # *    +sizeY+ - Number in meters  
    #
    # ==== Returns
    #
    #      Location
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createLocation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myLocation = createLocation ["NameVillage", [4035,2151,10], 100, 100]
    # 
    def createLocation _args
      "createLocation _args;" 
    end

    # Creates a new marker at the given position.
    # 
    # ==== Description
    # 
    # The marker name has to be unique
    #  
    # ==== Syntax
    #
    #      String = createMarker [name, position]
    #
    # ==== Parameters
    # 
    # *    +name+ - String  
    # *    +position+ - Array - format Position  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # createMarker is global, use createMarkerLocal if you want to create a marker locally
    # 
    # ==== See Also
    # 
    # #setMarkerBrush, #setMarkerColor, #setMarkerDir, #setMarkerPos, #setMarkerShape, #setMarkerSize, #setMarkerText, #setMarkerType, #setMarkerAlpha
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createMarker
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _marker = createMarker ["Marker1", position player ]
    # 
    def createMarker _args
      "createMarker _args;" 
    end

    # Creates a new marker at the given position.
    # 
    # ==== Description
    # 
    # The marker name has to be unique
    #  
    # ==== Syntax
    #
    #      String = createMarkerLocal [name, position]
    #
    # ==== Parameters
    # 
    # *    +name+ - String  
    # *    +position+ - Array - format Position  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # createMarkerLocal is local, so it should be used along with the other local commands
    # 
    # ==== See Also
    # 
    # #setMarkerBrushLocal, #setMarkerColorLocal, #setMarkerDirLocal, #setMarkerPosLocal, #setMarkerShapeLocal, #setMarkerSizeLocal, #setMarkerTextLocal, #setMarkerTypeLocal, #setMarkerAlphaLocal, #deleteMarkerLocal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createMarkerLocal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _marker= createMarkerLocal [Marker1, position player ]
    # 
    def createMarkerLocal _args
      "createMarkerLocal _args;" 
    end

    # Creates a previously added menu
    # 
    # ==== Syntax
    #
    #      map createMenu index
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +index+ - Number -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createMenu
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def createMenu _obj, _args
      "_obj createMenu _args;" 
    end

    # Creates a mine of the given type (type is the name of the subclass of CfgVehicles).
    # 
    # ==== Description
    # 
    # If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used.
    # 
    # The mine is placed inside a circle with this position as its center and placement as its radius
    #  
    # ==== Syntax
    #
    #      Object = createMine [type, position, markers, placement]
    #
    # ==== Parameters
    # 
    # *    +type+ - String  
    # *    +position+ - Position  
    # *    +markers+ - Array  
    # *    +placement+ - Number radius  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createMine
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _mine = createMine ["MineMine", position player, [], 0]
    # 
    def createMine _args
      "createMine _args;" 
    end

    # Create single missions display as a child of given display.
    # 
    # ==== Description
    # 
    # The mission dialog will be set to the directory given as an argument "root"
    #  
    # ==== Syntax
    #
    #      Display = display createMissionDisplay string
    #
    # ==== Parameters
    # 
    # *    +display + - Display  
    # *    +string+ - String  
    #
    # ==== Returns
    #
    #      Display
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createMissionDisplay
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ChildDisplay = _Rootdisplay createMissionDisplay "Tutorial";
    # 
    # ====== Example 2:
    # 
    #    In Arma 3 this would create scenarios UI findDisplay 46 createMissionDisplay "";
    # 
    def createMissionDisplay _obj, _args
      "_obj createMissionDisplay _args;" 
    end

    # Creates a new Task
    # 
    # ==== Syntax
    #
    #      Task = Object createSimpleTask Array
    #
    # ==== Parameters
    # 
    # *    +Object+ - Unit to add this new task  
    # *    +Array+ - ["TaskName"] or ["TaskName", taskParent]  
    #
    # ==== Returns
    #
    #      Task - the new task
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Tasks, #briefing, #removeSimpleTask, #setSimpleTaskDescription, #setSimpleTaskDestination, #setTaskState, #setTaskResult, #taskState
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createSimpleTask
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    currentTask = player createSimpleTask ["NewTask"];
    # 
    # ====== Example 2:
    # 
    #    childTask = player createSimpleTask ["ChildTask", currentTask];
    # 
    def createSimpleTask _obj, _args
      "_obj createSimpleTask _args;" 
    end

    # Create a new site
    # 
    # ==== Syntax
    #
    #      type createSite pos
    #
    # ==== Parameters
    # 
    # *    +type+ - String  
    # *    +pos+ - Position  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #deleteSite, #allSites
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createSite
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def createSite _obj, _args
      "_obj createSite _args;" 
    end

    # Creates a sound source of the given type (type is the name of the subclass of CfgVehicles).
    # 
    # ==== Description
    # 
    # If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used.
    # 
    # The sound source is placed inside a circle with this position as its center and placement as its radius
    #  
    # ==== Syntax
    #
    #      Object = createSoundSource [type, position, markers, placement]
    #
    # ==== Parameters
    # 
    # *    +type+ - String as per CfgVehicles  
    # *    +position+ - Position  
    # *    +markers+ - Array  
    # *    +placement+ - Number. radius  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #playSound, #playSound3D, #sideRadio, #say, #say2D, #say3D, #playMusic
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createSoundSource
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soundSource = createSoundSource ["LittleDog", position player, [], 0]
    # 
    # ====== Example 2:
    # 
    #    [] spawn {
    #    	_alarm = createSoundSource ["Sound_Alarm", position player, [], 0]; //starts alarm
    #    	sleep 10;
    #    	deleteVehicle _alarm; //stops alarm
    #    };
    # 
    def createSoundSource _args
      "createSoundSource _args;" 
    end

    # Create a team and name it
    # 
    # ==== Syntax
    #
    #      createTeam [type, name]
    #
    # ==== Parameters
    # 
    # *    +type+ - String  
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Team Member
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addTeamMember, #deleteTeam, #forEachMemberTeam, #removeTeamMember, #teamMember, #teamMemberNull, #teamName, #teams, #teamType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createTeam
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _team = createTeam ["USMC_Team", "Fire Team Red"]
    # 
    def createTeam _args
      "createTeam _args;" 
    end

    # Creates a new trigger on the given position.
    # 
    # ==== Description
    # 
    # 
    # 
    # An object of the given type is created; this type must be a class name in CfgNonAIVehicles or CfgVehicles with simulation = detector.
    # 
    # An array containing all units that have activated the trigger is available via list triggerobj.
    # 
    # Created triggers can be deleted using deleteVehicle.
    # 
    # NOTE: Triggers in multiplayer are global objects and therefore should only be created on the server.
    # 
    # Creating trigger on a client will result in trigger becoming a dead weight transferred to the server when client logs out.
    # 
    # When created in the editor triggers are created on the server only, the trigger statements are then set on each client individually.
    # 
    # After creating a trigger on the server, you can use setTriggerStatements and other setTriggerXXXX commands on each client to set the required client trigger operation individually
    #  
    # ==== Syntax
    #
    #      Object = createTrigger [type, position]
    #
    # ==== Parameters
    # 
    # *    +type+ - String  
    # *    +position+ - Position  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # Triggers are global and will be present on all machine(s) when this command is run.
    # 
    # ==== See Also
    # 
    # #setTriggerActivation, #setTriggerArea, #setTriggerStatements, #setTriggerText, #setTriggerTimeout, #setTriggerType, #setEffectCondition, #setSoundEffect, #setMusicEffect, #setTitleEffect, #deleteVehicle, #synchronizeWaypoint, #synchronizeTrigger
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createTrigger
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _trg=createTrigger["EmptyDetector",getPos player];
    #    _trg setTriggerArea[5,5,0,false];_trg setTriggerActivation["CIV","PRESENT",true];_trg setTriggerStatements["this", "hint 'Civilian near player'", "hint 'no civilian near'"]; 
    # 
    def createTrigger _args
      "createTrigger _args;" 
    end

    # Create unit of a class that's defined in CfgVehicles.
    # 
    # ==== Description
    # 
    # The Group parameter MUST be an existing group or the unit won't be created
    #  
    # ==== Syntax
    #
    #      type createUnit [ position, group, init, skill, rank]
    #
    # ==== Parameters
    # 
    # *    +type+ - String - Classname of unit to be created as per cfgVehicles  
    # *    +[ position, group, init, skill, rank]+ - Array  
    # *    +position+ - Position - Location unit is created at.  
    # *    +group+ - Group - Existing group new unit will join.  
    # *    +init+ - String - (optional, default "") Command to be executed upon creation of unit. Parameter this is set to the created unit and passed to the code.  
    # *    +skill+ - Number - (optional, default 0.5)  
    # *    +rank+ - String - (optional, default "PRIVATE")  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # The code in init is executed on all connected clients in multiplayer.
    # 
    # It can therefore be used to get around the publicVariable limitation of not being able to send strings and arrays over the network.
    # 
    # ==== See Also
    # 
    # #createUnit array, #createCenter, #createGroup, #createVehicle, #createVehicle array
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createUnit
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "SoldierWB" createUnit [position player, group player]
    # 
    # ====== Example 2:
    # 
    #    "soldierWB" createUnit [getMarkerPos "barracks", _groupAlpha]
    # 
    # ====== Example 3:
    # 
    #    "soldierWB" createUnit [getMarkerPos "marker_1", _groupAlpha,"loon1 = this ;
    #     this addweapon {binocular}", 0.6, "corporal"]
    # 
    def createUnit _obj, _args
      "_obj createUnit _args;" 
    end

    # Creates a unit (person) of the given type (type is a name of a subclass of CfgVehicles) and makes it a member of the given group.
    # 
    # ==== Description
    # 
    # If the markers array contains several marker names, the position of a random one is used.
    # 
    # Otherwise, the given position is used.
    # 
    # The unit is placed inside a circle with this position as its center and placement as its radius.
    # 
    # Special properties can be: "NONE" and "FORM" (also "CAN_COLLIDE" in Arma 3)
    #  
    # ==== Syntax
    #
    #      Object = group createUnit [type, position, markers, placement, special]
    #
    # ==== Parameters
    # 
    # *    +group+ - Group  
    # *    +[type, position, markers, placement, special]+ - Array  
    # *    +type+ - String  
    # *    +position+ - Position  
    # *    +markers+ - Array  
    # *    +placement+ - Number. Radius  
    # *    +special+ - String  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createUnit, #createCenter, #createGroup, #createVehicle, #createVehicle array
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createUnit
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _unit = group player createUnit ["SoldierWB", Position player, [], 0, "FORM"]   
    # 
    def createUnit _obj, _args
      "_obj createUnit _args;" 
    end

    # Create an empty object of given type classname at given position.
    # 
    # ==== Description
    # 
    # For a full class reference see Classes
    #  
    # ==== Syntax
    #
    #      Object = type createVehicle position
    #
    # ==== Parameters
    # 
    # *    +type+ - String - vehicle/object className  
    # *    +position+ - Array - format Position to create the vehicle at  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createVehicle array, #createVehicleLocal, #createUnit, #createUnit array, #deleteVehicle, #createGroup, #createCenter
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createVehicle
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _jeep = "Jeep" createVehicle (position player);
    # 
    # ====== Example 2:
    # 
    #    _heli = "AH1Z" createVehicle (getMarkerPos "hspawn");
    # 
    def createVehicle _obj, _args
      "_obj createVehicle _args;" 
    end

    # Creates crew to given empty vehicle.
    # 
    # ==== Description
    # 
    # Crew members are default crew defined in config.
    # 
    # Crew side will also correspond to vehicle's faction
    #  
    # ==== Syntax
    #
    #      createVehicleCrew vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #moveInDriver, #moveInGunner, #moveInCommander, #moveInTurret, #moveInCargo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createVehicleCrew
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    // Spawn a flying UAV with crew.  
    #    myUAV = [getPos player, 0, "B_UAV_02_F", west] call BIS_fnc_spawnVehicle;
    #    createVehicleCrew (myUAV select 0);
    # 
    # ====== Example 2:
    # 
    #    _veh = createVehicle ["O_MRAP_02_hmg_F", position player, [], 0, "NONE"];
    #    createVehicleCrew _veh;
    #    {
    #    	diag_log [_x, faction _x, side _x, side group _x];
    #    } forEach crew _veh;
    #    [O Alpha 1-1:1,"OPF_F",EAST,EAST]
    #    [O Alpha 1-1:2,"OPF_F",EAST,EAST]
    # 
    def createVehicleCrew _args
      "createVehicleCrew _args;" 
    end

    # Creates an object of the given type.
    # 
    # ==== Description
    # 
    # Created object is not transferred through network in MP games
    #  
    # ==== Syntax
    #
    #      Object = type createVehicleLocal position
    #
    # ==== Parameters
    # 
    # *    +type+ - String  
    # *    +position+ - Position  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createVehicle, #deleteVehicle, #createUnit, #createUnit array, #createVehicle array
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createVehicleLocal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _lightsource = "#lightpoint" createVehicleLocal _pos;
    # 
    def createVehicleLocal _obj, _args
      "_obj createVehicleLocal _args;" 
    end

    # Creates a vehicle of the given type (type is the name of the subclass in CfgVehicles).
    # 
    # ==== Description
    # 
    # If the markers array contains several marker names, the position of a random one is used.
    # 
    # Otherwise, the given position is used.
    # 
    # The vehicle is placed inside a circle with this position as center and placement as its radius.
    # 
    # Special properties can be: "NONE", "FLY" and "FORM".
    # 
    # "CAN_COLLIDE" creates the vehicle exactly where asked, not checking if others objects can cross its 3D model
    #  
    # ==== Syntax
    #
    #      Object = createVehicle [type, position, markers, placement, special]
    #
    # ==== Parameters
    # 
    # *    +type+ - String  
    # *    +position+ - Position  
    # *    +markers+ - Array  
    # *    +placement+ - Number  
    # *    +special+ - String  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createVehicle, #createVehicleLocal, #createUnit, #createUnit array, #deleteVehicle, #createGroup, #createCenter
    # 
    # Official Wiki: https://community.bistudio.com/wiki/createVehicle
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _veh = createVehicle ["ah1w", position player, [], 0, "FLY"]  
    # 
    # ====== Example 2:
    # 
    #    _veh = createVehicle ["2S6M_Tunguska",getMarkerPos "marker1",["marker2","marker3"], 0, "FLY"] 
    # 
    def createVehicle _args
      "createVehicle _args;" 
    end

    # Returns the crew (both dead and alive) of the given vehicle
    # 
    # ==== Syntax
    #
    #      Array = crew vehicleName
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      Array -  An array with all units in the vehicle is returned.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #commander, #driver, #gunner
    # 
    # Official Wiki: https://community.bistudio.com/wiki/crew
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player in (crew _tank)
    # 
    def crew _args
      "crew _args;" 
    end

    # Launch actions attached to given (button based) control
    # 
    # ==== Syntax
    #
    #      ctrlActivate controlName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlActivate
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ctrlActivate _control
    # 
    def ctrlActivate _args
      "ctrlActivate _args;" 
    end

    # Add an event handler (User Interface Event Handlers) to the given control.
    # 
    # ==== Description
    # 
    # Returns id of the handler or -1 when failed
    #  
    # ==== Syntax
    #
    #      control ctrlAddEventHandler [handler,function]
    #
    # ==== Parameters
    # 
    # *    +control+ - Control  
    # *    +[handler,function]+ - Array  
    # *    +handler+ - String - handler name  
    # *    +function+ - String or Code - script  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #displayAddEventHandler
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlAddEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _map ctrlAddEventHandler ["draw","_this call BIS_fnc_strategicMapOpen_draw"];
    # 
    # ====== Example 2:
    # 
    #    _map ctrlAddEventHandler ["draw",{hintSilent str _this}];
    # 
    def ctrlAddEventHandler _obj, _args
      "_obj ctrlAddEventHandler _args;" 
    end

    # Returns number of seconds until auto-scroll starts.
    # 
    # ==== Description
    # 
    # -2 if scrollbar not present
    #  
    # ==== Syntax
    #
    #      ctrlAutoScrollDelay control
    #
    # ==== Parameters
    # 
    # *    +control+ - Control -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlAutoScrollDelay
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def ctrlAutoScrollDelay _args
      "ctrlAutoScrollDelay _args;" 
    end

    # True if auto-scroll should move back to start after it reach end
    # 
    # ==== Syntax
    #
    #      ctrlAutoScrollRewind control
    #
    # ==== Parameters
    # 
    # *    +control+ - Control -  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlAutoScrollRewind
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def ctrlAutoScrollRewind _args
      "ctrlAutoScrollRewind _args;" 
    end

    # Returns number of seconds to auto-scroll one line.
    # 
    # ==== Description
    # 
    # -1 if auto-scroll is disabled.
    # 
    # -2 if scrollbar not present
    #  
    # ==== Syntax
    #
    #      ctrlAutoScrollSpeed control
    #
    # ==== Parameters
    # 
    # *    +control+ - Control -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlAutoScrollSpeed
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def ctrlAutoScrollSpeed _args
      "ctrlAutoScrollSpeed _args;" 
    end

    # Returns the current state of checkbox
    # 
    # ==== Syntax
    #
    #      ctrlChecked control
    #
    # ==== Parameters
    # 
    # *    +control+ - Control  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlChecked
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def ctrlChecked _args
      "ctrlChecked _args;" 
    end

    # Commit control animation
    # 
    # ==== Syntax
    #
    #      controlName ctrlCommit time
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +time+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlCommit
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlCommit 2
    # 
    def ctrlCommit _obj, _args
      "_obj ctrlCommit _args;" 
    end

    # Check if the control animation is finished
    # 
    # ==== Syntax
    #
    #      Boolean = ctrlCommitted controlName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlCommitted
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _done = ctrlCommitted _control
    # 
    def ctrlCommitted _args
      "ctrlCommitted _args;" 
    end

    # Enable or disable a control of the currently active user dialog.
    # 
    # ==== Description
    # 
    # Disabled controls cannot be clicked onto.
    # 
    # Read Dialog Control for more information about user dialogs and controls
    #  
    # ==== Syntax
    #
    #      controlName ctrlEnable enable
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number - control ID  
    # *    +enable+ - Boolean - true to enable the control, false to disable it  
    # *    +controlName+ - Control  
    # *    +enable+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ctrlEnabled
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlEnable
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ctrlEnable [100, false]
    # 
    # ====== Example 2:
    # 
    #    _ctrl ctrlEnable false
    # 
    def ctrlEnable _obj, _args
      "_obj ctrlEnable _args;" 
    end

    # Returns if a control on the currently active user dialog is enabled.
    # 
    # ==== Description
    # 
    # Disabled controls cannot be focused.
    # 
    # Read Dialog Control for more information about user dialogs and controls
    #  
    # ==== Syntax
    #
    #      Boolean = ctrlEnabled controlName
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number - control ID  
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ctrlEnable
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlEnabled
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (!(ctrlEnabled 100)) then
    #    {
    #      ctrlEnable [100, true]
    #    };
    # 
    # ====== Example 2:
    # 
    #    _enabled = ctrlEnabled _control
    # 
    def ctrlEnabled _args
      "ctrlEnabled _args;" 
    end

    # Returns the current fade factor of control
    # 
    # ==== Syntax
    #
    #      Number = ctrlFade controlName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ctrlSetFade
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlFade
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _scale = ctrlFade _control
    # 
    def ctrlFade _args
      "ctrlFade _args;" 
    end

    # Returns true when HTML content was successfully loaded
    # 
    # ==== Syntax
    #
    #      ctrlHTMLLoaded control
    #
    # ==== Parameters
    # 
    # *    +control+ - Control  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlHTMLLoaded
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def ctrlHTMLLoaded _args
      "ctrlHTMLLoaded _args;" 
    end

    # Returns control IDC
    # 
    # ==== Syntax
    #
    #      ctrlIDC control
    #
    # ==== Parameters
    # 
    # *    +control+ - Control  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlIDC
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def ctrlIDC _args
      "ctrlIDC _args;" 
    end

    # Returns display IDD
    # 
    # ==== Syntax
    #
    #      ctrlIDD display
    #
    # ==== Parameters
    # 
    # *    +display+ - Display  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlIDD
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def ctrlIDD _args
      "ctrlIDD _args;" 
    end

    # Adds the next frame to the map animation.
    # 
    # ==== Description
    # 
    # The format of frame is [time, zoom, position], the format of position is Position2D
    #  
    # ==== Syntax
    #
    #      map ctrlMapAnimAdd frame
    #
    # ==== Parameters
    # 
    # *    +map+ - Control  
    # *    +frame+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #mapAnimAdd, #mapAnimClear, #mapAnimCommit, #mapAnimDone, #ctrlMapAnimClear, #ctrlMapAnimCommit, #ctrlMapAnimDone
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlMapAnimAdd
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _map ctrlMapAnimAdd [1, 0.1, getMarkerPos "anim1"]
    # 
    def ctrlMapAnimAdd _obj, _args
      "_obj ctrlMapAnimAdd _args;" 
    end

    # Clears the map animation
    # 
    # ==== Syntax
    #
    #      ctrlMapAnimClear controlName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #mapAnimAdd, #mapAnimClear, #mapAnimCommit, #mapAnimDone, #ctrlMapAnimAdd, #ctrlMapAnimCommit, #ctrlMapAnimDone
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlMapAnimClear
    #
    # ==== Examples
    # 
    def ctrlMapAnimClear _args
      "ctrlMapAnimClear _args;" 
    end

    # Plays the map animation
    # 
    # ==== Syntax
    #
    #      ctrlMapAnimCommit controlName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #mapAnimAdd, #mapAnimClear, #mapAnimCommit, #mapAnimDone, #ctrlMapAnimAdd, #ctrlMapAnimClear, #ctrlMapAnimDone
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlMapAnimCommit
    #
    # ==== Examples
    # 
    def ctrlMapAnimCommit _args
      "ctrlMapAnimCommit _args;" 
    end

    # Checks whether the map animation has finished
    # 
    # ==== Syntax
    #
    #      Boolean = ctrlMapAnimDone controlName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #mapAnimAdd, #mapAnimClear, #mapAnimCommit, #mapAnimDone, #ctrlMapAnimAdd, #ctrlMapAnimClear, #ctrlMapAnimCommit
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlMapAnimDone
    #
    # ==== Examples
    # 
    def ctrlMapAnimDone _args
      "ctrlMapAnimDone _args;" 
    end

    # Changes the default the cursor that appears when interacting with a map control to a custom one.
    # 
    # ==== Description
    # 
    # Use an empty string to restore the default cursor.
    # 
    # If the specified cursor does not exist, the default is used and no error is produced.
    # 
    # The cursor texture is one of the following and is case sensitive:
    # 
    # Track
    # 
    # Move
    # 
    # Array
    # 
    # Scroll
    # 
    # Custom cursor is the name of a config entry from CfgWrapperUI / Cursors
    #  
    # ==== Syntax
    #
    #      control ctrlMapCursor [cursorTexture, customCursor]
    #
    # ==== Parameters
    # 
    # *    +control+ - Control - Map control  
    # *    +cursorTexture+ - String - Cursor texture name  
    # *    +customCursor+ - String - Cursor class name  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlMapCursor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _map ctrlMapCursor ["Track", _customCursor]
    # 
    # ====== Example 2:
    # 
    #    uiNamespace setVariable ["_map",(findDisplay 12) displayCtrl 51];
    #    (uiNamespace getVariable "_map") ctrlMapCursor ["Track","HC_overFriendly"];
    # 
    def ctrlMapCursor _obj, _args
      "_obj ctrlMapCursor _args;" 
    end

    # Returns description of map sign mouse cursor is over
    # 
    # ==== Syntax
    #
    #      ctrlMapMouseOver control
    #
    # ==== Parameters
    # 
    # *    +control+ - Control -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlMapMouseOver
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (uiNamespace getVariable "_map") ctrlMapCursor ["Track","HC_overFriendly"];
    #    _mouseover = if (count (ctrlMapMouseOver (uiNamespace getVariable "_map")) > 0) then
    #    {
    #    	ctrlMapMouseOver (uiNamespace getVariable "_map")
    #    }
    #    else
    #    {
    #    	[""]
    #    };
    #    if (_mouseover select 0 == "task" && str(_logic getVariable "onTaskAssigned") != str{}) then
    #    {
    #    	//--- Task
    #    	(uiNamespace getVariable "_map") ctrlMapCursor ["Track","HC_overMission"];
    #    }
    #    else
    #    {
    #    	//--- Waypoint
    #    	(uiNamespace getVariable "_map") ctrlMapCursor ["Track","HC_move"];
    #    };
    # 
    def ctrlMapMouseOver _args
      "ctrlMapMouseOver _args;" 
    end

    # Return the current scale of the map control
    # 
    # ==== Syntax
    #
    #      Number =  ctrlMapScale controlName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlMapScale
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _scale = ctrlMapScale _control
    # 
    def ctrlMapScale _args
      "ctrlMapScale _args;" 
    end

    # Convert screen coordinates in map to world coordinates
    # 
    # ==== Syntax
    #
    #      map ctrlMapScreenToWorld [x, y]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control  
    # *    +[x, y]+ - Array  
    #
    # ==== Returns
    #
    #      Array (Position2D Format)
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ctrlMapWorldToScreen, #posScreenToWorld, #posWorldToScreen
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlMapScreenToWorld
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _WorldCoord = _Control ctrlMapScreenToWorld _ScreenCoord
    # 
    # ====== Example 2:
    # 
    #    _WorldCoord = _Control ctrlMapScreenToWorld [_x,_y]
    # 
    def ctrlMapScreenToWorld _obj, _args
      "_obj ctrlMapScreenToWorld _args;" 
    end

    # Transfers a map control world position to screen coordinates
    # 
    # ==== Syntax
    #
    #      ctrlMapWorldToScreen controlName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      Array (Position2D Format)
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ctrlMapScreenToWorld
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlMapWorldToScreen
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _screenCoord = _control ctrlMapWorldToScreen _worldCoord;
    # 
    # ====== Example 2:
    # 
    #    _screenCoord = _control ctrlMapWorldToScreen (position player);
    # 
    def ctrlMapWorldToScreen _args
      "ctrlMapWorldToScreen _args;" 
    end

    # Returns container of the given control
    # 
    # ==== Syntax
    #
    #      Display = ctrlParent controlName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      Display
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlParent
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _display = ctrlParent _control
    # 
    def ctrlParent _args
      "ctrlParent _args;" 
    end

    # Returns the current position of control as [x, y, w, h] array
    # 
    # ==== Syntax
    #
    #      Array = ctrlPosition controlName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ctrlSetPosition
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlPosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _pos = ctrlPosition _control
    # 
    def ctrlPosition _args
      "ctrlPosition _args;" 
    end

    # Remove all even handlers from the given control
    # 
    # ==== Syntax
    #
    #      control ctrlRemoveAllEventHandlers handler name
    #
    # ==== Parameters
    # 
    # *    +control+ - Control -  
    # *    +handler name+ - String -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlRemoveAllEventHandlers
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def ctrlRemoveAllEventHandlers _obj, _args
      "_obj ctrlRemoveAllEventHandlers _args;" 
    end

    # Remove a given event handler from the given control
    # 
    # ==== Syntax
    #
    #      control ctrlRemoveEventHandler [handler name,id]
    #
    # ==== Parameters
    # 
    # *    +control+ - Control -  
    # *    +[handler name,id]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlRemoveEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def ctrlRemoveEventHandler _obj, _args
      "_obj ctrlRemoveEventHandler _args;" 
    end

    # Returns the current scale of the control
    # 
    # ==== Syntax
    #
    #      Number = ctrlScale controlName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlScale
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _scale = ctrlScale _control
    # 
    def ctrlScale _args
      "ctrlScale _args;" 
    end

    # Sets text color of given control when control is selected
    # 
    # ==== Syntax
    #
    #      display ctrlSetActiveColor color
    #
    # ==== Parameters
    # 
    # *    +display+ - Control  
    # *    +color+ - Array (format Color)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetActiveColor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetActiveColor [1, 0, 0, 1]
    # 
    def ctrlSetActiveColor _obj, _args
      "_obj ctrlSetActiveColor _args;" 
    end

    # Sets number of second before auto-scroll starts
    # 
    # ==== Syntax
    #
    #      control ctrlSetAutoScrollDelay delay
    #
    # ==== Parameters
    # 
    # *    +control+ - Control -  
    # *    +delay+ - Number -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetAutoScrollDelay
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def ctrlSetAutoScrollDelay _obj, _args
      "_obj ctrlSetAutoScrollDelay _args;" 
    end

    # Defines if scroll should rewind when auto-scroll reach end
    # 
    # ==== Syntax
    #
    #      control ctrlSetAutoScrollRewind delay
    #
    # ==== Parameters
    # 
    # *    +control+ - Control -  
    # *    +delay+ - Boolean -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetAutoScrollRewind
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def ctrlSetAutoScrollRewind _obj, _args
      "_obj ctrlSetAutoScrollRewind _args;" 
    end

    # Sets number of second required to scroll to next line.
    # 
    # ==== Description
    # 
    # If speed smaller than 0,auto-scroll is disabled
    #  
    # ==== Syntax
    #
    #      control ctrlSetAutoScrollSpeed speed
    #
    # ==== Parameters
    # 
    # *    +control+ - Control -  
    # *    +speed+ - Number -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetAutoScrollSpeed
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def ctrlSetAutoScrollSpeed _obj, _args
      "_obj ctrlSetAutoScrollSpeed _args;" 
    end

    # Sets background color of given control
    # 
    # ==== Syntax
    #
    #      display ctrlSetBackgroundColor color
    #
    # ==== Parameters
    # 
    # *    +display+ - Control  
    # *    +color+ - Array (format Color)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetBackgroundColor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetBackgroundColor [1, 0, 0, 1]
    # 
    def ctrlSetBackgroundColor _obj, _args
      "_obj ctrlSetBackgroundColor _args;" 
    end

    # Sets checked state of checkbox
    # 
    # ==== Syntax
    #
    #      control ctrlSetChecked bool
    #
    # ==== Parameters
    # 
    # *    +control+ - Control  
    # *    +bool+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetChecked
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def ctrlSetChecked _obj, _args
      "_obj ctrlSetChecked _args;" 
    end

    # Sets given event handler of given control.
    # 
    # ==== Description
    # 
    # The provided function should return true/false indicating that the event has handled this event fully or not and whether the engine should execute it's default code or not afterwards.
    # 
    # 
    # 
    # See User Interface Event Handlers for the full list of handler names.
    # 
    # If applicable, see DIK_KeyCodes for a list of key code constants, which are relevant to key related user interface events like: KeyDown & KeyUp
    #  
    # ==== Syntax
    #
    #      controlName ctrlSetEventHandler [handlerName, function]
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +[handlerName, function]+ - Array  
    # *    +handlerName+ - String  
    # *    +function+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #displaySetEventHandler, UI Event Handlers, DIK KeyCodes
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetEventHandler ["KeyDown", ""]
    # 
    # ====== Example 2:
    # 
    #    (_display displayCtrl 108) ctrlSetEventHandler ["LBSelChanged","['ListChange',_this] call FireEvents"];
    # 
    def ctrlSetEventHandler _obj, _args
      "_obj ctrlSetEventHandler _args;" 
    end

    # Sets wanted transparency for control animation
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFade fade
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +fade+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ctrlFade
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFade
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFade 1
    # 
    def ctrlSetFade _obj, _args
      "_obj ctrlSetFade _args;" 
    end

    # Set the input focus on given control
    # 
    # ==== Syntax
    #
    #      ctrlSetFocus controlName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFocus
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ctrlSetFocus _control
    # 
    def ctrlSetFocus _args
      "ctrlSetFocus _args;" 
    end

    # Sets the font of given control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFont fontName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +fontName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFont
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFont "TahomaB"
    # 
    def ctrlSetFont _obj, _args
      "_obj ctrlSetFont _args;" 
    end

    # Sets H1 font of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontH1 fontName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +fontName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontH1
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontH1 "TahomaB"
    # 
    def ctrlSetFontH1 _obj, _args
      "_obj ctrlSetFontH1 _args;" 
    end

    # Sets H1 bold font of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontH1B fontName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +fontName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontH1B
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontH1B "TahomaB"
    # 
    def ctrlSetFontH1B _obj, _args
      "_obj ctrlSetFontH1B _args;" 
    end

    # Sets H2 font of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontH2 fontName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +fontName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontH2
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontH2 "TahomaB"
    # 
    def ctrlSetFontH2 _obj, _args
      "_obj ctrlSetFontH2 _args;" 
    end

    # Sets H2 bold font of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontH2B fontName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +fontName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontH2B
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontH2B "TahomaB"
    # 
    def ctrlSetFontH2B _obj, _args
      "_obj ctrlSetFontH2B _args;" 
    end

    # Sets H3 font of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontH3 fontName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +fontName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontH3
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontH3 "TahomaB"
    # 
    def ctrlSetFontH3 _obj, _args
      "_obj ctrlSetFontH3 _args;" 
    end

    # Sets H3 bold font of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontH3B fontName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +fontName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontH3B
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontH3B "TahomaB"
    # 
    def ctrlSetFontH3B _obj, _args
      "_obj ctrlSetFontH3B _args;" 
    end

    # Sets H4 font of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontH4 fontName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +fontName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontH4
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontH4 "TahomaB"
    # 
    def ctrlSetFontH4 _obj, _args
      "_obj ctrlSetFontH4 _args;" 
    end

    # Sets H4 bold font of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontH4B fontName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +fontName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontH4B
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontH4B "TahomaB"
    # 
    def ctrlSetFontH4B _obj, _args
      "_obj ctrlSetFontH4B _args;" 
    end

    # Sets H5 font of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontH5 fontName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +fontName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontH5
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontH5 "TahomaB"
    # 
    def ctrlSetFontH5 _obj, _args
      "_obj ctrlSetFontH5 _args;" 
    end

    # Sets H5 bold font of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontH5B fontName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +fontName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontH5B
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontH5B "TahomaB"
    # 
    def ctrlSetFontH5B _obj, _args
      "_obj ctrlSetFontH5B _args;" 
    end

    # Sets H6 font of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontH6 fontName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +fontName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontH6
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontH6 "TahomaB"
    # 
    def ctrlSetFontH6 _obj, _args
      "_obj ctrlSetFontH6 _args;" 
    end

    # Sets H6 bold font of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontH6B fontName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +fontName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontH6B
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontH6B "TahomaB"
    # 
    def ctrlSetFontH6B _obj, _args
      "_obj ctrlSetFontH6B _args;" 
    end

    # Sets the font size of given control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontHeight height
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +height+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontHeight
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontHeight 0.05
    # 
    def ctrlSetFontHeight _obj, _args
      "_obj ctrlSetFontHeight _args;" 
    end

    # Sets H1 font size of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontHeightH1 height
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +height+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontHeightH1
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontHeightH1 0.05
    # 
    def ctrlSetFontHeightH1 _obj, _args
      "_obj ctrlSetFontHeightH1 _args;" 
    end

    # Sets H2 font size of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontHeightH2 height
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +height+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontHeightH2
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontHeightH2 0.05
    # 
    def ctrlSetFontHeightH2 _obj, _args
      "_obj ctrlSetFontHeightH2 _args;" 
    end

    # Sets H3 font size of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontHeightH3 height
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +height+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontHeightH3
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontHeightH3 0.05
    # 
    def ctrlSetFontHeightH3 _obj, _args
      "_obj ctrlSetFontHeightH3 _args;" 
    end

    # Sets H3 font size of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontHeightH4 height
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +height+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontHeightH4
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontHeightH4 0.05
    # 
    def ctrlSetFontHeightH4 _obj, _args
      "_obj ctrlSetFontHeightH4 _args;" 
    end

    # Sets H5 font size of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontHeightH5 height
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +height+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontHeightH5
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontHeightH5 0.05
    # 
    def ctrlSetFontHeightH5 _obj, _args
      "_obj ctrlSetFontHeightH5 _args;" 
    end

    # Sets H6 font size of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontHeightH6 height
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +height+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontHeightH6
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontHeightH6 0.05
    # 
    def ctrlSetFontHeightH6 _obj, _args
      "_obj ctrlSetFontHeightH6 _args;" 
    end

    # Sets P font of given HTML control or its size
    # 
    # ==== Syntax
    #
    #      control ctrlSetFontP fontOrSize
    #
    # ==== Parameters
    # 
    # *    +control+ - Control  
    # *    +fontOrSize+ - String or Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontP
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontP "TahomaB"
    # 
    # ====== Example 2:
    # 
    #    _control ctrlSetFontP 0.05
    # 
    def ctrlSetFontP _obj, _args
      "_obj ctrlSetFontP _args;" 
    end

    # Sets P bold font of given HTML control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetFontPB fontName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +fontName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetFontPB
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetFontPB "TahomaB"
    # 
    def ctrlSetFontPB _obj, _args
      "_obj ctrlSetFontPB _args;" 
    end

    # Sets foreground color of given control.
    # 
    # ==== Description
    # 
    # Color is in format Color
    #  
    # ==== Syntax
    #
    #      display ctrlSetForegroundColor color
    #
    # ==== Parameters
    # 
    # *    +display+ - Control  
    # *    +color+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetForegroundColor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetForegroundColor [1, 0, 0, 1]
    # 
    def ctrlSetForegroundColor _obj, _args
      "_obj ctrlSetForegroundColor _args;" 
    end

    # Sets wanted position and size for control animation.
    # 
    # ==== Description
    # 
    # Width and height are optional
    #  
    # ==== Syntax
    #
    #      controlName ctrlSetPosition [x, y, w, h]
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +[x, y, w, h]+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ctrlPosition
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetPosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetPosition [0.5, 0.5]
    # 
    def ctrlSetPosition _obj, _args
      "_obj ctrlSetPosition _args;" 
    end

    # Sets wanted scale for control animation.
    # 
    # ==== Description
    # 
    # Top left corner remains same
    #  
    # ==== Syntax
    #
    #      controlName ctrlSetScale scale
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +scale+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetScale
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetScale 0.5
    # 
    def ctrlSetScale _obj, _args
      "_obj ctrlSetScale _args;" 
    end

    # Set the structured text which will be displayed in structured text control
    # 
    # ==== Syntax
    #
    #      controlName ctrlSetStructuredText structuredText
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    # *    +structuredText+ - Structured Text  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #parseText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetStructuredText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetStructuredText parseText "First line<img image=data\isniper.paa /><br />Second line"
    # 
    def ctrlSetStructuredText _obj, _args
      "_obj ctrlSetStructuredText _args;" 
    end

    # Set the text of a control of the currently active user dialog or display.
    # 
    # ==== Description
    # 
    # This command can be used for: static texts, buttons, edit lines and active texts as well as for images, where you can use it to set the image path.
    # 
    # Read Dialog Control for more information about user dialogs and controls
    #  
    # ==== Syntax
    #
    #      controlName ctrlSetText text
    #
    # ==== Parameters
    # 
    # *    +idc+ - Integer - control ID  
    # *    +text+ - String - text or image path, depending on the control type  
    # *    +controlName+ - Control  
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ctrlText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ctrlSetText [100, "Hello world"];//for Dialogs
    # 
    # ====== Example 2:
    # 
    #    _control ctrlSetText "Hello world.";// for Displays
    # 
    def ctrlSetText _obj, _args
      "_obj ctrlSetText _args;" 
    end

    # Sets text color of given control.
    # 
    # ==== Description
    # 
    # Color is in format Color
    #  
    # ==== Syntax
    #
    #      display ctrlSetTextColor color
    #
    # ==== Parameters
    # 
    # *    +display+ - Control  
    # *    +color+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetTextColor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetTextColor [1, 0, 0, 1]
    # 
    def ctrlSetTextColor _obj, _args
      "_obj ctrlSetTextColor _args;" 
    end

    # Sets tooltip text of given control
    # 
    # ==== Syntax
    #
    #      control ctrlSetTooltip text
    #
    # ==== Parameters
    # 
    # *    +control+ - Control - Any control type, except for CT_STATIC & CT_STRUCTURED_TEXT  
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetTooltip
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetTooltip "tooltip"
    # 
    # ====== Example 2:
    # 
    #    ((findDisplay 10000) displayCtrl 10001) ctrlSetTooltip "ThisIsAGoodTip"
    # 
    def ctrlSetTooltip _obj, _args
      "_obj ctrlSetTooltip _args;" 
    end

    # Sets tooltip border color of given control.
    # 
    # ==== Description
    # 
    # Color is in format Color
    #  
    # ==== Syntax
    #
    #      display ctrlSetTooltipColorBox color
    #
    # ==== Parameters
    # 
    # *    +display+ - Control  
    # *    +color+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetTooltipColorBox
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetTooltipColorBox [1, 0, 0, 1]
    # 
    def ctrlSetTooltipColorBox _obj, _args
      "_obj ctrlSetTooltipColorBox _args;" 
    end

    # Sets tooltip background color of given control.
    # 
    # ==== Description
    # 
    # Color is in format Color
    #  
    # ==== Syntax
    #
    #      display ctrlSetTooltipColorShade color
    #
    # ==== Parameters
    # 
    # *    +display+ - Control  
    # *    +color+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetTooltipColorShade
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetTooltipColorShade [1, 0, 0, 1]
    # 
    def ctrlSetTooltipColorShade _obj, _args
      "_obj ctrlSetTooltipColorShade _args;" 
    end

    # Sets tooltip text color of given control.
    # 
    # ==== Description
    # 
    # Color is in format Color
    #  
    # ==== Syntax
    #
    #      display ctrlSetTooltipColorText color
    #
    # ==== Parameters
    # 
    # *    +display+ - Control  
    # *    +color+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlSetTooltipColorText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control ctrlSetTooltipColorText [1, 0, 0, 1]
    # 
    def ctrlSetTooltipColorText _obj, _args
      "_obj ctrlSetTooltipColorText _args;" 
    end

    # Set if a control of the currently active user dialog is shown or not.
    # 
    # ==== Description
    # 
    # Read Dialog Control for more information about user dialogs and controls
    #  
    # ==== Syntax
    #
    #      controlName ctrlShow show
    #
    # ==== Parameters
    # 
    # *    +idc+ - Integer - control ID  
    # *    +show+ - Boolean - true if the control should be shown, false if not  
    # *    +controlName+ - Control  
    # *    +show+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ctrlVisible, #ctrlShown
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlShow
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ctrlShow [100, false]
    # 
    # ====== Example 2:
    # 
    #    _control ctrlShow false
    # 
    def ctrlShow _obj, _args
      "_obj ctrlShow _args;" 
    end

    # Returns whether given control is shown
    # 
    # ==== Syntax
    #
    #      Boolean = ctrlShown controlName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ctrlShow, #ctrlVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlShown
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ok = ctrlShown _control
    # 
    def ctrlShown _args
      "ctrlShown _args;" 
    end

    # Returns the text of a control of the currently active user dialog.
    # 
    # ==== Description
    # 
    # This command can be used on static texts, buttons, edit lines and active texts as well as for images, where it returns the image path.
    # 
    # Read Dialog Control for more information about user dialogs and controls
    #  
    # ==== Syntax
    #
    #      String =  ctrlText controlName
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number - control ID  
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      String - (as above).
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ctrlSetText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _text = ctrlText 100
    # 
    # ====== Example 2:
    # 
    #    _text = ctrlText _control
    # 
    def ctrlText _args
      "ctrlText _args;" 
    end

    # Returns the text height
    # 
    # ==== Syntax
    #
    #      ctrlTextHeight structuredTextControl
    #
    # ==== Parameters
    # 
    # *    +structuredTextControl+ - Control  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlTextHeight
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def ctrlTextHeight _args
      "ctrlTextHeight _args;" 
    end

    # Returns value representing type of control
    # 
    # ==== Syntax
    #
    #      Number = ctrlType controlName
    #
    # ==== Parameters
    # 
    # *    +controlName+ - Control  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _type = ctrlType _control
    # 
    def ctrlType _args
      "ctrlType _args;" 
    end

    # Returns if a control of the currently active user dialog is shown or not.
    # 
    # ==== Description
    # 
    # Read Dialog Control for more information about user dialogs and controls
    #  
    # ==== Syntax
    #
    #      Boolean = ctrlVisible idc
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number - control ID  
    #
    # ==== Returns
    #
    #      Boolean - true if the control is shown, false if not
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ctrlShow, #ctrlShown
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ctrlVisible
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ok=ctrlVisible 100
    # 
    def ctrlVisible _args
      "ctrlVisible _args;" 
    end

    # Returns list of addons allowed to given curator
    # 
    # ==== Syntax
    #
    #      curatorAddons curatorObj
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Curator, #addCuratorAddons, #removeCuratorAddons, #removeAllCuratorAddons
    # 
    # Official Wiki: https://community.bistudio.com/wiki/curatorAddons
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _addons = curatorAddons myCurator;
    # 
    def curatorAddons _args
      "curatorAddons _args;" 
    end

    # Returns curator camera object
    # 
    # ==== Syntax
    #
    #      curatorCamera
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/curatorCamera
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def curatorCamera 
      "curatorCamera" 
    end

    # Returns all curator camera areas
    # 
    # ==== Syntax
    #
    #      curatorCameraArea curatorObj
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Curator, #addCuratorCameraArea, #removeCuratorCameraArea, #removeAllCuratorCameraAreas
    # 
    # Official Wiki: https://community.bistudio.com/wiki/curatorCameraArea
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _camArea = curatorCameraArea myCurator;
    # 
    def curatorCameraArea _args
      "curatorCameraArea _args;" 
    end

    # Returns ceiling height for curator camera
    # 
    # ==== Syntax
    #
    #      curatorCameraAreaCeiling curatorObj
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/curatorCameraAreaCeiling
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def curatorCameraAreaCeiling _args
      "curatorCameraAreaCeiling _args;" 
    end

    # Returns current coeficient setting
    # 
    # ==== Syntax
    #
    #      curatorObj curatorCoef action
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    # *    +action+ - String  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/curatorCoef
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    curatorModule curatorCoef "Place"
    # 
    def curatorCoef _obj, _args
      "_obj curatorCoef _args;" 
    end

    # Returns all editable objects which belong to a curator
    # 
    # ==== Syntax
    #
    #      curatorEditableObjects curatorObj
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # must run on the server
    # 
    # ==== See Also
    # 
    # Curator, #curatorMouseOver, #addCuratorEditableObjects, #removeCuratorEditableObjects, #curatorEditableObjects
    # 
    # Official Wiki: https://community.bistudio.com/wiki/curatorEditableObjects
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _objects = curatorEditableObjects myCurator;
    # 
    def curatorEditableObjects _args
      "curatorEditableObjects _args;" 
    end

    # Returns all curator editing areas
    # 
    # ==== Syntax
    #
    #      curatorEditingArea curatorObj
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Curator, #addCuratorEditingArea, #removeCuratorEditingArea, #removeAllCuratorEditingAreas
    # 
    # Official Wiki: https://community.bistudio.com/wiki/curatorEditingArea
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _editingArea = curatorEditingArea myCurator;
    # 
    def curatorEditingArea _args
      "curatorEditingArea _args;" 
    end

    # Returns type of edit areas assigned to curator (blacklist/whitelist)
    # 
    # ==== Syntax
    #
    #      curatorEditingAreaType obj
    #
    # ==== Parameters
    # 
    # *    +obj+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/curatorEditingAreaType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def curatorEditingAreaType _args
      "curatorEditingAreaType _args;" 
    end

    # Returns Curator Editable Object under curator mouse pointer in form of array:
    # 
    # ==== Description
    # 
    # [] - when not in curator mode
    # 
    # [""] - if no curator editable object under the pointer in curator mode
    # 
    # [typeName, Curator Editable Object] - if there is curator editable object under the pointer in curator mode
    #  
    # ==== Syntax
    #
    #      curatorMouseOver
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # client side command
    # 
    # ==== See Also
    # 
    # Curator, #curatorEditableObjects
    # 
    # Official Wiki: https://community.bistudio.com/wiki/curatorMouseOver
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _mouseOver = curatorMouseOver;
    #    [
    #    	"OBJECT",
    #    	3594ab00# 164218: apc_wheeled_01_cannon_f.p3d
    #    ]
    # 
    def curatorMouseOver 
      "curatorMouseOver" 
    end

    # Returns number of points that curator have.
    # 
    # ==== Description
    # 
    # Points can be only in range from 0 to 1
    #  
    # ==== Syntax
    #
    #      curatorPoints curatorObj
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Curator, #addCuratorPoints
    # 
    # Official Wiki: https://community.bistudio.com/wiki/curatorPoints
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _points = curatorPoints myCurator;
    # 
    def curatorPoints _args
      "curatorPoints _args;" 
    end

    # Returns array with all objects that has curator registered and their settings
    # 
    # ==== Syntax
    #
    #      curatorRegisteredObjects curatorObj
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/curatorRegisteredObjects
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def curatorRegisteredObjects _args
      "curatorRegisteredObjects _args;" 
    end

    # Returns list of all curator selected items
    # 
    # ==== Syntax
    #
    #      curatorSelected
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/curatorSelected
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def curatorSelected 
      "curatorSelected" 
    end

    # Return current price for placing waypoints (curator specific)
    # 
    # ==== Syntax
    #
    #      curatorWaypointCost curatorObj
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/curatorWaypointCost
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def curatorWaypointCost _args
      "curatorWaypointCost _args;" 
    end

    # Return the current command type (empty string when no command) for the commander of given vehicle (or for a given soldier).
    # 
    # ==== Description
    # 
    # Value returned can be one of:
    # 
    # "WAIT","ATTACK","HIDE","MOVE","HEAL","REPAIR","REFUEL","REARM","SUPPORT","JOIN","GET IN","FIRE","GET OUT","STOP","EXPECT","ACTION","ATTACKFIRE",
    #  
    # ==== Syntax
    #
    #      String = currentCommand vehicleName
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/currentCommand
    #
    # ==== Examples
    # 
    def currentCommand _args
      "currentCommand _args;" 
    end

    # Returns class name of currently loaded vehicle's magazine
    # 
    # ==== Syntax
    #
    #      currentMagazine vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object - unit or vehicle  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #magazines, #currentMagazineDetail, #currentWeapon, #currentMuzzle, #currentVisionMode, #currentWeaponMode, #currentZeroing, #magazinesTurret, #weaponsTurret
    # 
    # Official Wiki: https://community.bistudio.com/wiki/currentMagazine
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _magazineClass = currentMagazine player;//Example: "30Rnd_545x39_AK"
    # 
    def currentMagazine _args
      "currentMagazine _args;" 
    end

    # Returns description of vehicle's currently loaded magazine, its ammo count (current/default) and its id
    # 
    # ==== Syntax
    #
    #      currentMagazineDetail vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object - unit or vehicle  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #magazinesDetail, #currentMagazine
    # 
    # Official Wiki: https://community.bistudio.com/wiki/currentMagazineDetail
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _currentMagazineDetail = currentMagazineDetail player; //"6.5mm 30Rnd STANAG Mag(30/30)[id:0]"
    # 
    # ====== Example 2:
    # 
    #    _currentMagazineDetail = currentMagazineDetail Mi_48; //"30mm HE Shells(250/250)[id:21]"
    # 
    def currentMagazineDetail _args
      "currentMagazineDetail _args;" 
    end

    # Returns the name of the type of the currently using magazine on specified turret.
    # 
    # ==== Description
    # 
    # Use turret path [-1] for driver's turret
    #  
    # ==== Syntax
    #
    #      vehicle currentMagazineDetailTurret [turret path]
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +[turret path]+ - Array  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/currentMagazineDetailTurret
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _magazineDetail = MBT_Kuma currentMagazineDetailTurret [0];
    # 
    def currentMagazineDetailTurret _obj, _args
      "_obj currentMagazineDetailTurret _args;" 
    end

    # Returns the name of the type of the currently using magazine on specified turret.
    # 
    # ==== Description
    # 
    # Use turret path [-1] for driver's turret
    #  
    # ==== Syntax
    #
    #      vehicle currentMagazineTurret [turret path]
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +[turret path]+ - Array  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/currentMagazineTurret
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _magazine = MBT_Kuma currentMagazineTurret [0];
    # 
    def currentMagazineTurret _obj, _args
      "_obj currentMagazineTurret _args;" 
    end

    # Returns current muzzle of unit's weapon
    # 
    # ==== Syntax
    #
    #      muzzle = currentMuzzle gunner
    #
    # ==== Parameters
    # 
    # *    +gunner+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #currentWeapon
    # 
    # Official Wiki: https://community.bistudio.com/wiki/currentMuzzle
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _muzzle = currentMuzzle sniper;
    # 
    # ====== Example 2:
    # 
    #    _muzzle = currentMuzzle (gunner (vehicle player));
    # 
    def currentMuzzle _args
      "currentMuzzle _args;" 
    end

    # Return current task of given person
    # 
    # ==== Syntax
    #
    #      currentTask person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object -  
    #
    # ==== Returns
    #
    #      Task
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createSimpleTask, #simpleTasks, #taskCompleted
    # 
    # Official Wiki: https://community.bistudio.com/wiki/currentTask
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def currentTask _args
      "currentTask _args;" 
    end

    # List all uncompleted tasks
    # 
    # ==== Syntax
    #
    #      currentTasks member
    #
    # ==== Parameters
    # 
    # *    +member+ - Team Member  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #taskCompleted
    # 
    # Official Wiki: https://community.bistudio.com/wiki/currentTasks
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _playerTasks = currentTasks teamMember player
    # 
    def currentTasks _args
      "currentTasks _args;" 
    end

    # Returns current vision mode of unit's weapon.
    # 
    # ==== Description
    # 
    # 0 - daytime
    # 
    # 1 - night vision
    # 
    # 2 - FLIR
    #  
    # ==== Syntax
    #
    #      currentVisionMode unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #currentMagazine, #currentWeapon, #currentMuzzle, #currentWeaponMode, #currentZeroing, #magazinesTurret, #weaponsTurret
    # 
    # Official Wiki: https://community.bistudio.com/wiki/currentVisionMode
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _currMode = currentVisionMode gunner _tank
    # 
    # ====== Example 2:
    # 
    #    if (currentVisionMode player == 1) then
    #    {
    #    	hint "nightvision active";
    #    };
    # 
    def currentVisionMode _args
      "currentVisionMode _args;" 
    end

    # Return the index of the current waypoint.
    # 
    # ==== Description
    # 
    # To determine the validity of the index, compare it to the waypoints count.
    # 
    # If all waypoints are 'completed', then the index is 1 greater than the last valid index.
    # 
    # If there are no waypoints, then the index is 0.
    # 
    # By default, a group has 1 waypoint at their starting position, which is considered completed and so the currentWaypoint is 1
    #  
    # ==== Syntax
    #
    #      currentWaypoint groupName
    #
    # ==== Parameters
    # 
    # *    +groupName+ - Group  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypoints, #setCurrentWaypoint
    # 
    # Official Wiki: https://community.bistudio.com/wiki/currentWaypoint
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _index = currentWaypoint group player;
    # 
    def currentWaypoint _args
      "currentWaypoint _args;" 
    end

    # Return the name of the currently selected weapon (on the primary turret for vehicles)
    # 
    # ==== Syntax
    #
    #      currentWeapon vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #currentMagazine, #currentMuzzle, #currentVisionMode, #currentWeaponMode, #currentZeroing, #magazinesTurret, #weaponsTurret
    # 
    # Official Wiki: https://community.bistudio.com/wiki/currentWeapon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _weaponClass = currentWeapon (vehicle player);//Example: "M16A2GL"
    # 
    # ====== Example 2:
    # 
    #    _weaponClass = currentWeapon player;
    # 
    def currentWeapon _args
      "currentWeapon _args;" 
    end

    # Returns current weapon mode of unit's weapon.
    # 
    # ==== Description
    # 
    # Result can be: "Single", "Burst" or "manual"
    #  
    # ==== Syntax
    #
    #      currentWeaponMode gunner
    #
    # ==== Parameters
    # 
    # *    +gunner+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # ArmA:_Actions#SWITCHWEAPON, #currentWeapon
    # 
    # Official Wiki: https://community.bistudio.com/wiki/currentWeaponMode
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _weaponMode = currentWeaponMode player;
    # 
    # ====== Example 2:
    # 
    #     weaponMode  = currentWeaponMode (gunner (vehicle player));
    # 
    def currentWeaponMode _args
      "currentWeaponMode _args;" 
    end

    # Returns the name of the currently selected weapon on specified turret.
    # 
    # ==== Description
    # 
    # Use turret path [-1] for driver's turret
    #  
    # ==== Syntax
    #
    #      vehicle currentWeaponTurret [turret path]
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +[turret path]+ - Array  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/currentWeaponTurret
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _weapon = MBT_Kuma currentWeaponTurret [0];
    # 
    def currentWeaponTurret _obj, _args
      "_obj currentWeaponTurret _args;" 
    end

    # Returns zeroing of unit's weapon
    # 
    # ==== Syntax
    #
    #      currentZeroing gunner
    #
    # ==== Parameters
    # 
    # *    +gunner+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/currentZeroing
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _zeroing = currentZeroing player; 
    # 
    def currentZeroing _args
      "currentZeroing _args;" 
    end

    # This is the entity pointed to by a players cursor
    # 
    # ==== Syntax
    #
    #      cursorTarget
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #laserTarget, #nearTargets, #knowsAbout
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cursorTarget
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    alive cursorTarget
    # 
    def cursorTarget 
      "cursorTarget" 
    end

    # Sends the chat message to the custom radio channel
    # 
    # ==== Syntax
    #
    #      unit customChat [channel, message]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +[channel, message]+ - Array  
    # *    +channel+ - Number  
    # *    +message+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/customChat
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    sweetBoy customChat [1, "Hi, any sweetgirls to chat?"]
    # 
    def customChat _obj, _args
      "_obj customChat _args;" 
    end

    # Sends the message to the custom radio channel.
    # 
    # ==== Description
    # 
    # The message is defined in the description.
    # 
    # ext file or radio protocol
    #  
    # ==== Syntax
    #
    #      unit customRadio [channel, message]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +[channel, message]+ - Array  
    # *    +channel+ - Number  
    # *    +message+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/customRadio
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    soldierOne customRadio [1,"WordEnemy"]
    # 
    def customRadio _obj, _args
      "_obj customRadio _args;" 
    end

    # Terminate the effect in the given layer and set duration of the fade out phase to the given time
    # 
    # ==== Syntax
    #
    #      layer cutFadeOut delay
    #
    # ==== Parameters
    # 
    # *    +layer+ - Number  
    # *    +delay+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #cutText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cutFadeOut
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    0 cutFadeOut 2
    # 
    def cutFadeOut _obj, _args
      "_obj cutFadeOut _args;" 
    end

    # Display an object defined in the mission's description.
    # 
    # ==== Description
    # 
    # ext, the campaign's description.
    # 
    # ext or the global resource.
    # 
    # cpp
    #  
    # ==== Syntax
    #
    #      (layer) cutObj [name, type, (speed)]
    #
    # ==== Parameters
    # 
    # *    +layer+ - Number - This parameter is optional and only available in Arma 2. Omit it for earlier versions. It defines the layer in which the effect is shown, where 0 is the back most.  
    # *    +[name, type, speed]+ - Array  
    # *    +name+ - String - the className of the object  
    # *    +type+ - String - one of "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK IN", "WHITE OUT" and "WHITE IN". See Title Effect Types for more information about these values.  
    # *    +speed+ - Number - This value is optional, time is seconds, in which the object will be faded in. If no speed is given, 1 is assumed.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #titleObj, #cutText, #cutRsc
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cutObj
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    cutObj ["TVSet","PLAIN"]
    #    cutObj ["TVSet","PLAIN",2]
    # 
    # ====== Example 2:
    # 
    #    2 cutObj ["TVSet","PLAIN",2];
    # 
    def cutObj _obj, _args
      "_obj cutObj _args;" 
    end

    # Display a resource defined in the mission's Description.
    # 
    # ==== Description
    # 
    # ext, the campaign's description.
    # 
    # ext or the global resource.
    # 
    # cpp
    #  
    # ==== Syntax
    #
    #      layer cutRsc [name, type, speed,showOnMap] (Introduced in  Arma 2 / VBS2 (1.30+).)
    #
    # ==== Parameters
    # 
    # *    +name+ - String - the class name of the resource. ("Default" will remove the current resource.)  
    # *    +type+ - String - one of "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK IN", "WHITE OUT" and "WHITE IN". See Title Effect Types for more information about these values.  
    # *    +speed+ - Number - Time in seconds to fade in resource (optional, default: 1).  
    # *    +showOnMap+ - Boolean - false to hide the resource when the map is opened (Introduced in ARMA 3 ).  
    # *    +layer+ - Number - Defines the layer in which the effect is shown, where 0 is the back most. Layer number is rounded to the nearest integer and also cannot be negative. Layer 99.5 will be treated as layer 100.  
    # *    +name+ - String - the class name of the resource. ("Default" will remove the current resource.)  
    # *    +type+ - String - one of "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK IN", "WHITE OUT" and "WHITE IN". See Title Effect Types for more information about these values.  
    # *    +speed+ - Number - Time in seconds to fade in resource (optional, default: 1).  
    # *    +showOnMap+ - Boolean - false to hide the resource when the map is opened (Introduced in ARMA 3 ).  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #titleRsc, #cutText, #cutObj, #setTitleEffect
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cutRsc
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    cutRsc ["binocular","PLAIN"];
    #    cutRsc ["binocular","PLAIN",2];
    # 
    # ====== Example 2:
    # 
    #    2 cutRsc ["binocular","PLAIN",2];
    # 
    def cutRsc _obj, _args
      "_obj cutRsc _args;" 
    end

    # Displays a text message in the center of the screen
    # 
    # ==== Syntax
    #
    #      layer cutText [text,type,speed,showOnMap] (Introduced in Arma 2 / VBS2 (1.30+).)
    #
    # ==== Parameters
    # 
    # *    +text+ - String - text to be displayed  
    # *    +type+ - String one of "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK IN", "WHITE OUT" and "WHITE IN". See Title Effect Types for more information about these values.  
    # *    +speed+ - Number - Time in seconds to fade in resource (optional, default: 1)  
    # *    +showOnMap+ - Boolean - false to hide the text when the map is opened (Introduced in ARMA 3 ).  
    # *    +layer+ - Number - Defines the layer in which the effect is shown, where 0 is the backmost one.  
    # *    +text+ - String - text to be displayed  
    # *    +type+ - String one of "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK IN", "WHITE OUT" and "WHITE IN". See Title Effect Types for more information about these values.  
    # *    +speed+ - Number - Time in seconds to fade in resource (optional, default: 1)  
    # *    +showOnMap+ - Boolean - false to hide the text when the map is opened (Introduced in ARMA 3 ).  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #titleText, #cutRsc, #cutObj
    # 
    # Official Wiki: https://community.bistudio.com/wiki/cutText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    cutText ["","BLACK OUT"];
    #    cutText ["Hello World!","PLAIN",2];
    # 
    # ====== Example 2:
    # 
    #    2 cutText ["Hello World!","PLAIN",2];
    # 
    # ====== Example 3:
    # 
    #    1000 cutText ["In The Centre","PLAIN"];
    #    1001 cutText ["At The Bottom","PLAIN DOWN"];
    # 
    def cutText _obj, _args
      "_obj cutText _args;" 
    end

    # Return the damage value of an object
    # 
    # ==== Syntax
    #
    #      Number = damage object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Number -The returned number is in range 0 (healthy) to 1 (dead).
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setDamage, #setDammage, #getDammage, #setHit
    # 
    # Official Wiki: https://community.bistudio.com/wiki/damage
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? ((damage player)>0.1) : player groupChat "I'm hurt! Medic!"
    # 
    def damage _args
      "damage _args;" 
    end

    # Return the actual mission date and time as an array [year, month, day, hour, minute].
    # 
    # ==== Description
    # 
    # Month is a full number between 1 and 12, day is between 1 and 31, hour is between 0 and 23 and minute is between 0 and 59
    #  
    # ==== Syntax
    #
    #      Array = date
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # Returns the current local in game date.
    # 
    # ==== See Also
    # 
    # #setDate, #fn_vbs_timeDifference_(VBS2)
    # 
    # Official Wiki: https://community.bistudio.com/wiki/date
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _DateStamp=Date;
    # 
    def date 
      "date" 
    end

    # Convert a date to a float number, based on Jan 1st 00:00:00 = 0 and Dec 31th  23:59:59 = 1
    # 
    # ==== Syntax
    #
    #      dateToNumber date
    #
    # ==== Parameters
    # 
    # *    +date+ - Array -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #date, #daytime, #time, #numberToDate
    # 
    # Official Wiki: https://community.bistudio.com/wiki/dateToNumber
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _float = dateToNumber [2035,7,6,12,0]; //0.510959
    # 
    # ====== Example 2:
    # 
    #    dateToNumber date; //will return float number for the current date.
    # 
    def dateToNumber _args
      "dateToNumber _args;" 
    end

    # Returns the current ingame time in hours
    # 
    # ==== Syntax
    #
    #      Number = daytime
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number -Time using a 24 hour clock.
    #
    # ==== Multiplayer
    # 
    # Returns the current local ingame time in hours.
    # 
    # ==== See Also
    # 
    # #date, #dateToNumber, #time, #skipTime
    # 
    # Official Wiki: https://community.bistudio.com/wiki/daytime
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ; assumme it is 16:30
    #    _daytime = daytime
    #    returns 16.5
    # 
    def daytime 
      "daytime" 
    end

    # Deactivates the given keyname for the current user profile.
    # 
    # ==== Description
    # 
    # The keys are used to unlock missions or campaigns.
    # 
    # See keys, keysLimit and doneKeys in the description.
    # 
    # ext file of the missions
    #  
    # ==== Syntax
    #
    #      deActivateKey keyname
    #
    # ==== Parameters
    # 
    # *    +keyname+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #isKeyActive, #activateKey
    # 
    # Official Wiki: https://community.bistudio.com/wiki/deActivateKey
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    deActivateKey "Mission04Key"
    # 
    def deActivateKey _args
      "deActivateKey _args;" 
    end

    # Returns debriefing text
    # 
    # ==== Syntax
    #
    #      debriefingText end
    #
    # ==== Parameters
    # 
    # *    +end+ - String  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/debriefingText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def debriefingText _args
      "debriefingText _args;" 
    end

    # Dump (something about FSM) to debugging output.
    # 
    # ==== Description
    # 
    # This command is (assumed to be) non-functional in the retail version
    #  
    # ==== Syntax
    #
    #      FSMhandle debugFSM true
    #
    # ==== Parameters
    # 
    # *    +FSMhandle+ - Number  
    # *    +true+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/debugFSM
    #
    # ==== Examples
    # 
    def debugFSM _obj, _args
      "_obj debugFSM _args;" 
    end

    # Dump argument type and value to debugging output.
    # 
    # ==== Description
    # 
    # 
    # 
    # Note: This command is non-functional in the retail version
    #  
    # ==== Syntax
    #
    #      debugLog anything
    #
    # ==== Parameters
    # 
    # *    +anything+ - Any Value  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/debugLog
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    debugLog player
    # 
    def debugLog _args
      "debugLog _args;" 
    end

    # see switch
    # 
    # ==== Syntax
    #
    #      default a
    #
    # ==== Parameters
    # 
    # *    +a+ - Code  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Control Structures
    # 
    # Official Wiki: https://community.bistudio.com/wiki/default
    #
    # ==== Examples
    # 
    def default _args
      "default _args;" 
    end

    # Convert a number from Radians to Degrees
    # 
    # ==== Syntax
    #
    #      Number = deg x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands, #rad
    # 
    # Official Wiki: https://community.bistudio.com/wiki/deg
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _degrees= deg 1
    #    returns 57.295
    # 
    def deg _args
      "deg _args;" 
    end

    # Destroys the AI center of the given side
    # 
    # ==== Syntax
    #
    #      deleteCenter side
    #
    # ==== Parameters
    # 
    # *    +side+ - Side  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createCenter
    # 
    # Official Wiki: https://community.bistudio.com/wiki/deleteCenter
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    deleteCenter east
    # 
    def deleteCenter _args
      "deleteCenter _args;" 
    end

    # Delete a collection.
    # 
    # ==== Description
    # 
    # As example, used with a soldier, it'll hide the ingame model.
    # 
    # When targetting ArmA 2 1.
    # 
    # 06 or newer, use hideObject instead.
    # 
    # This function is a relic from dynamic building destruction development.
    # 
    # It is left only for compatibility with scripts created before ArmA 2 1.
    # 
    # 06, and its functionality may be changed or removed in the future
    #  
    # ==== Syntax
    #
    #      deleteCollection object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #hideObject
    # 
    # Official Wiki: https://community.bistudio.com/wiki/deleteCollection
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    deleteCollection unitName; 
    # 
    def deleteCollection _args
      "deleteCollection _args;" 
    end

    # Delete the editor object.
    # 
    # ==== Description
    # 
    # Requires all editor object links to be removed prior
    #  
    # ==== Syntax
    #
    #      map deleteEditorObject object
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +object+ - String -  
    #
    # ==== Returns
    #
    #      Any
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/deleteEditorObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def deleteEditorObject _obj, _args
      "_obj deleteEditorObject _args;" 
    end

    # Destroys the given group.
    # 
    # ==== Description
    # 
    # Group must be empty and local to the machine executing command.
    # 
    # 
    # 
    # NOTE: You cannot find out locality of the group with local command as it does not work with groups, and neither is owner or setOwner.
    # 
    # The group will always be local to the client that created it, until the client disconnects, then the group becomes local to the server
    #  
    # ==== Syntax
    #
    #      deleteGroup group
    #
    # ==== Parameters
    # 
    # *    +group+ - Group  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createGroup, #units, #group, #groupFromNetId
    # 
    # Official Wiki: https://community.bistudio.com/wiki/deleteGroup
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    deleteGroup _groupname
    # 
    def deleteGroup _args
      "deleteGroup _args;" 
    end

    # Delete an identity (created with saveIdentity) from the campaign's progress file
    # 
    # ==== Syntax
    #
    #      Boolean = deleteIdentity identityName
    #
    # ==== Parameters
    # 
    # *    +identityName+ - String - name of the saved identity  
    #
    # ==== Returns
    #
    #      Boolean -true if the identy was deleted successfully, false if not
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #saveIdentity
    # 
    # Official Wiki: https://community.bistudio.com/wiki/deleteIdentity
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?deleteIdentity "playerIdentity":hint "Delete ok"
    # 
    def deleteIdentity _args
      "deleteIdentity _args;" 
    end

    # Delete a location
    # 
    # ==== Syntax
    #
    #      deleteLocation location
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/deleteLocation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    deleteLocation myLocation
    # 
    def deleteLocation _args
      "deleteLocation _args;" 
    end

    # Destroys the given marker
    # 
    # ==== Syntax
    #
    #      deleteMarker name
    #
    # ==== Parameters
    # 
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #deleteMarkerLocal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/deleteMarker
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    deleteMarker "Marker1"
    # 
    def deleteMarker _args
      "deleteMarker _args;" 
    end

    # Destroys the given marker
    # 
    # ==== Syntax
    #
    #      deleteMarkerLocal markerName
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #deleteMarker
    # 
    # Official Wiki: https://community.bistudio.com/wiki/deleteMarkerLocal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    deleteMarkerLocal "Marker1"
    # 
    def deleteMarkerLocal _args
      "deleteMarkerLocal _args;" 
    end

    # Removes the site
    # 
    # ==== Syntax
    #
    #      deleteSite site
    #
    # ==== Parameters
    # 
    # *    +site+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/deleteSite
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def deleteSite _args
      "deleteSite _args;" 
    end

    # Delete a status (created with saveStatus) from the campaign's progress file
    # 
    # ==== Syntax
    #
    #      Boolean = deleteStatus statusName
    #
    # ==== Parameters
    # 
    # *    +statusName+ - String - name of the saved status  
    #
    # ==== Returns
    #
    #      Boolean -true if the status was deleted successfully, false if not
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #saveStatus
    # 
    # Official Wiki: https://community.bistudio.com/wiki/deleteStatus
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? deleteStatus "playerStatus" : "saved status gone from campaign"
    # 
    def deleteStatus _args
      "deleteStatus _args;" 
    end

    # Destroy given team
    # 
    # ==== Syntax
    #
    #      deleteTeam team
    #
    # ==== Parameters
    # 
    # *    +team+ - Team Member  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addTeamMember, #createTeam, #forEachMemberTeam, #removeTeamMember, #teamMember, #teamMemberNull, #teamName, #teams, #teamType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/deleteTeam
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    deleteTeam _team
    # 
    def deleteTeam _args
      "deleteTeam _args;" 
    end

    # Deletes an object.
    # 
    # ==== Description
    # 
    # Only units inserted in the mission editor and units created during the game's progress can be deleted by this command.
    # 
    # Island objects and player units cannot be removed.
    # 
    # 
    # 
    # Deleting a vehicle, which is still being accessed by a running script, can result in a CTD
    #  
    # ==== Syntax
    #
    #      deleteVehicle object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # A deleted player unit will stay visible until that player has disconnected.
    # 
    # ==== See Also
    # 
    # #createUnit, #createUnit array, #createVehicle array, #createVehicleLocal, #createVehicle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/deleteVehicle
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    deleteVehicle _house1
    # 
    def deleteVehicle _args
      "deleteVehicle _args;" 
    end

    # Removes the specified waypoint
    # 
    # ==== Syntax
    #
    #      deleteWaypoint [group, index]
    #
    # ==== Parameters
    # 
    # *    +group+ - Group  
    # *    +index+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypoints, #addWaypoint, #currentWaypoint
    # 
    # Official Wiki: https://community.bistudio.com/wiki/deleteWaypoint
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    deleteWaypoint [_grp, 2]
    # 
    def deleteWaypoint _args
      "deleteWaypoint _args;" 
    end

    # Detaches previously attached with attachTo object
    # 
    # ==== Syntax
    #
    #      detach object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Only has to be executed on one client.
    # 
    # ==== See Also
    # 
    # #attachedObjects, #attachedTo, #attachTo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/detach
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    obj1 attachTo [player];
    #    detach obj1;
    # 
    def detach _args
      "detach _args;" 
    end

    # Tests whether any user dialog is open
    # 
    # ==== Syntax
    #
    #      Boolean = dialog
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean -true if a dialog is open, false if not
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createDialog, #closeDialog, Dialog Control
    # 
    # Official Wiki: https://community.bistudio.com/wiki/dialog
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?!(dialog) : createDialog "Dialog1"
    # 
    def dialog 
      "dialog" 
    end

    # Checks whether given subject is present in the diary of given person
    # 
    # ==== Syntax
    #
    #      person diarySubjectExists name
    #
    # ==== Parameters
    # 
    # *    +person+ - Object -  
    # *    +name+ - String -  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/diarySubjectExists
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def diarySubjectExists _obj, _args
      "_obj diarySubjectExists _args;" 
    end

    # Returns high-level selected difficulty mode.
    # 
    # ==== Description
    # 
    # 
    # 
    # Returned value will be: 0 (Recruit), 1 (Regular), 2 (Veteran) or 3 (Elite)
    #  
    # ==== Syntax
    #
    #      difficulty
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/difficulty
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    value = difficulty;
    # 
    # ====== Example 2:
    # 
    #    The command returns the index of selected difficulty as they appear in CfgDifficulties
    #    hint str difficulty; //Result: 4
    # 
    def difficulty 
      "difficulty" 
    end

    # Checks specific difficulty settings of the current user.
    # 
    # ==== Description
    # 
    # Difficulty flag names can be found in the ArmA profile file under class Difficulties/xxx/Flags (xxx being regular or veteran)
    #  
    # ==== Syntax
    #
    #      Boolean = difficultyEnabled flagName
    #
    # ==== Parameters
    # 
    # *    +flagName+ - String - difficulty flag name  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/difficultyEnabled
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint str (difficultyEnabled "armor")
    # 
    def difficultyEnabled _args
      "difficultyEnabled _args;" 
    end

    # Sends the message to the direct channel.
    # 
    # ==== Description
    # 
    # The message is defined in the description.
    # 
    # ext file, radio protocol, or a kbAddTopic
    #  
    # ==== Syntax
    #
    #      unit directSay radioName
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    # *    +radioName+ - String -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/directSay
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def directSay _obj, _args
      "_obj directSay _args;" 
    end

    # Returns the direction an object or a location is facing (differs from getDir in that this also works with locations)
    # 
    # ==== Syntax
    #
    #      Number = direction object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object or Location  
    #
    # ==== Returns
    #
    #      Number -Direction in degrees, range 0 to 360
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setDir
    # 
    # Official Wiki: https://community.bistudio.com/wiki/direction
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setDir 90
    #    _d = direction player
    #    returns 90
    # 
    def direction _args
      "direction _args;" 
    end

    # Disable parts of the AI behaviour to get a better control over the actions of a unit.
    # 
    # ==== Description
    # 
    # Possible values are:
    # 
    # "TARGET" - stop the unit to watch the assigned target
    # 
    # "AUTOTARGET" - prevent the unit from assigning a target independently and watching unknown objects
    # 
    # "MOVE" - disable the AI's movement
    # 
    # "ANIM" - disable ability of AI to change animation.
    # 
    # Available only since Armed Assault.
    # 
    # "FSM" - disable the execution of AI behavior scripts.
    # 
    # Available only since Operation Arrowhead v1.
    # 
    # 60.
    # 
    # Note: All effects of disableAI command are cancelled after mission save or load.
    # 
    # Note: In OFP is no way to undo this command
    #  
    # ==== Syntax
    #
    #      unitName disableAI section
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object - AI unit  
    # *    +section+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #enableAI
    # 
    # Official Wiki: https://community.bistudio.com/wiki/disableAI
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 disableAI "AUTOTARGET"
    # 
    def disableAI _obj, _args
      "_obj disableAI _args;" 
    end

    # Disable collision between vehicles.
    # 
    # ==== Description
    # 
    # This commmand doesn't disable collision between PhysX objects
    #  
    # ==== Syntax
    #
    #      vehicle disableCollisionWith vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/disableCollisionWith
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def disableCollisionWith _obj, _args
      "_obj disableCollisionWith _args;" 
    end

    # Disable the ability to talk to other people
    # 
    # ==== Syntax
    #
    #      unitName disableConversation disable
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +disable+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/disableConversation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player disableConversation true
    # 
    # ====== Example 2:
    # 
    #    soldier1 disableConversation true
    # 
    def disableConversation _obj, _args
      "_obj disableConversation _args;" 
    end

    # Disable debrifing score table
    # 
    # ==== Syntax
    #
    #      disableDebriefingStats
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/disableDebriefingStats
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    disableDebriefingStats;
    # 
    def disableDebriefingStats 
      "disableDebriefingStats" 
    end

    # Disable saving of script containing this command.
    # 
    # ==== Description
    # 
    # After this script can work with the data types which do not support serialization (UI types)
    #  
    # ==== Syntax
    #
    #      disableSerialization
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Display, #displayAddEventHandler, #displayRemoveAllEventHandlers, #displayRemoveEventHandler
    # 
    # Official Wiki: https://community.bistudio.com/wiki/disableSerialization
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    disableSerialization;
    #    _display = findDisplay 46;
    # 
    def disableSerialization 
      "disableSerialization" 
    end

    # Disables TI equipment for given vehicle
    # 
    # ==== Syntax
    #
    #      vehicle disableTIEquipment state
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +state+ - Boolean - true to turn TI off, false to turn TI on  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/disableTIEquipment
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    vehicle player disableTIEquipment true;
    # 
    # ====== Example 2:
    # 
    #    _tank disableTIEquipment true;
    # 
    def disableTIEquipment _obj, _args
      "_obj disableTIEquipment _args;" 
    end

    # Disable and enable the keyboard and mouse input, usually used during cutscenes.
    # 
    # ==== Description
    # 
    # Be careful with the usage of this command, always remember to enable the user input again, as once the user input is disabled, you can only shut down OFP but not exit the mission with escape
    #  
    # ==== Syntax
    #
    #      disableUserInput state
    #
    # ==== Parameters
    # 
    # *    +state+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #enableSimulation, #enableSimulationGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/disableUserInput
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    disableUserInput true
    #    ; cutscene
    #    disableUserInput false
    # 
    def disableUserInput _args
      "disableUserInput _args;" 
    end

    # Add an event handler to the given display.
    # 
    # ==== Description
    # 
    # Returns id of the handler or -1 when failed.
    # 
    # The provided function should return true/false indicating that the event has handled this event fully or not and whether the engine should execute it's default code or not afterwards.
    # 
    # 
    # 
    # See User Interface Event Handlers for the full list of handler names.
    # 
    # If applicable, see DIK_KeyCodes for a list of key code constants, which are relevant to key related user interface events like: KeyDown & KeyUp
    #  
    # ==== Syntax
    #
    #      display displayAddEventHandler [handlerName, function]
    #
    # ==== Parameters
    # 
    # *    +display+ - Display  
    # *    +[handlerName, function]+ - Array  
    # *    +handlerName+ - String  
    # *    +function+ - String or Code - script  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # ListOfKeyCodes, #disableSerialization, #displayRemoveAllEventHandlers, #displayRemoveEventHandler, #displaySetEventHandler, #ctrlAddEventHandler, UI Event Handlers, #findDisplay, DIK KeyCodes, #keyName
    # 
    # Official Wiki: https://community.bistudio.com/wiki/displayAddEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    moduleName_keyDownEHId = (findDisplay 46) displayAddEventHandler ["KeyDown", "hint str _this;"];
    # 
    # ====== Example 2:
    # 
    #    moduleName_keyDownEHId = findDisplay 46 displayAddEventHandler ["KeyDown", {hint str _this}];
    # 
    def displayAddEventHandler _obj, _args
      "_obj displayAddEventHandler _args;" 
    end

    # Return child control with specified idc
    # 
    # ==== Syntax
    #
    #      Control = display displayCtrl idc
    #
    # ==== Parameters
    # 
    # *    +display+ - Display  
    # *    +idc+ - Number  
    #
    # ==== Returns
    #
    #      Control
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #findDisplay
    # 
    # Official Wiki: https://community.bistudio.com/wiki/displayCtrl
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ChildControl = _ParentDisplay displayCtrl 101
    # 
    def displayCtrl _obj, _args
      "_obj displayCtrl _args;" 
    end

    # A non-existing Display.
    # 
    # ==== Description
    # 
    # This value is not equal to anything, including itself
    #  
    # ==== Syntax
    #
    #      Display = displayNull
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Display
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/displayNull
    #
    # ==== Examples
    # 
    def displayNull 
      "displayNull" 
    end

    # Remove all even handlers from the given display
    # 
    # ==== Syntax
    #
    #      display displayRemoveAllEventHandlers handler name
    #
    # ==== Parameters
    # 
    # *    +display+ - Display -  
    # *    +handler name+ - String -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #displayAddEventHandler, #displayRemoveEventHandler
    # 
    # Official Wiki: https://community.bistudio.com/wiki/displayRemoveAllEventHandlers
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def displayRemoveAllEventHandlers _obj, _args
      "_obj displayRemoveAllEventHandlers _args;" 
    end

    # Remove a given event handler from the given display
    # 
    # ==== Syntax
    #
    #      display displayRemoveEventHandler [handler name,id]
    #
    # ==== Parameters
    # 
    # *    +display+ - Display -  
    # *    +[handler name,id]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #disableSerialization, Display, #displayAddEventHandler, #displayRemoveAllEventHandlers
    # 
    # Official Wiki: https://community.bistudio.com/wiki/displayRemoveEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def displayRemoveEventHandler _obj, _args
      "_obj displayRemoveEventHandler _args;" 
    end

    # Sets given event handler of given display.
    # 
    # ==== Description
    # 
    # The return code of the provided function should indicate whether this event was handled correctly.
    # 
    # This implies telling the engine whether it's default code should be executed.
    # 
    # 
    # 
    # See User Interface Event Handlers for the full list of handler names.
    # 
    # If applicable, see DIK_KeyCodes for a list of key code constants, which are relevant to key related user interface events like: KeyDown & KeyUp
    #  
    # ==== Syntax
    #
    #      display displaySetEventHandler [handlerName, function]
    #
    # ==== Parameters
    # 
    # *    +display+ - Display  
    # *    +[handlerName, function]+ - Array  
    # *    +handlerName+ - String  
    # *    +function+ - String. {Code}  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # ListOfKeyCodes, #displayAddEventHandler, #displayRemoveEventHandler, #displayRemoveAllEventHandlers, #ctrlSetEventHandler, UI Event Handlers, DIK KeyCodes, #keyName
    # 
    # Official Wiki: https://community.bistudio.com/wiki/displaySetEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control displaySetEventHandler ["KeyDown", ""] 
    # 
    # ====== Example 2:
    # 
    #    init.sqf 
    #    keyspressed = compile preprocessFile "keyspressed.sqf";
    #    _display = findDisplay 46;
    #    _display displaySetEventHandler ["KeyDown","_this call keyspressed"];
    #    keyspressed.sqf 
    #    private['_handled'];
    #    _handled = false;
    #    switch (_this select 1) do
    #    {
    #    	//F key
    #    	case 33: 
    #    	{
    #    		// code here
    #    		_handled = true;
    #    	};
    #    };
    #    _handled;
    # 
    def displaySetEventHandler _obj, _args
      "_obj displaySetEventHandler _args;" 
    end

    # Dissolves the given team.
    # 
    # ==== Description
    # 
    # All members become members of the main team.
    # 
    # Possible team values are: "RED", "GREEN", "BLUE" or "YELLOW"
    #  
    # ==== Syntax
    #
    #      dissolveTeam teamColor
    #
    # ==== Parameters
    # 
    # *    +teamColor+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #assignTeam, #unassignTeam
    # 
    # Official Wiki: https://community.bistudio.com/wiki/dissolveTeam
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    dissolveTeam "RED"
    # 
    def dissolveTeam _args
      "dissolveTeam _args;" 
    end

    # Returns the distance in meters between two Objects, Positions or (since VBS2 1.
    # 
    # ==== Description
    # 
    # 24) Locations.
    # 
    # NOTE: If positions are supplied as arguments, the coordinates are treated as PositionATL if over the land and as PositionASLW if over the sea
    #  
    # ==== Syntax
    #
    #      param1 distance param2
    #
    # ==== Parameters
    # 
    # *    +param1+ - Object, Location (since VBS2 1.24) or Array-format Position  
    # *    +param2+ - Object, Location (since VBS2 1.24) or Array-format Position  
    #
    # ==== Returns
    #
    #      Number -  Distance in meters.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #distanceSqr
    # 
    # Official Wiki: https://community.bistudio.com/wiki/distance
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _meters=player distance _object
    # 
    # ====== Example 2:
    # 
    #    _meters=player distance [1,2,3]
    # 
    # ====== Example 3:
    # 
    #    _meters=[1,2,3] distance player
    # 
    def distance _obj, _args
      "_obj distance _args;" 
    end

    # Computes the squared distance between two objects or positions
    # 
    # ==== Syntax
    #
    #      var1 distanceSqr var2
    #
    # ==== Parameters
    # 
    # *    +var1+ - Object or Position  
    # *    +var2+ - Object or Position  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #distance
    # 
    # Official Wiki: https://community.bistudio.com/wiki/distanceSqr
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player distanceSqr (leader player)
    # 
    # ====== Example 2:
    # 
    #    _distance = sqrt ((x2 - x1) ^ 2 + (y2 - y1) ^ 2 + (z2 - z1) ^ 2);
    #    _distanceSqr = (x2 - x1) ^ 2 + (y2 - y1) ^ 2 + (z2 - z1) ^ 2;
    #    _distance = [x1, y1, z1] distance [x2, y2, z2];
    #    _distanceSqr = [x1, y1, z1] distanceSqr [x2, y2, z2];
    #    _distance = sqrt ([x1, y1, z1] distanceSqr [x2, y2, z2]);
    #    _distanceSqr = ([x1, y1, z1] distance [x2, y2, z2]) ^ 2;
    # 
    def distanceSqr _obj, _args
      "_obj distanceSqr _args;" 
    end

    # Returns the numerical index for the distribution region of this copy of ArmA.
    # 
    # ==== Description
    # 
    # 
    # 
    # 1 - US
    # 
    # 2 - Rest of the world
    #  
    # ==== Syntax
    #
    #      Number = distributionRegion
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/distributionRegion
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    distributionRegion == 1
    # 
    def distributionRegion 
      "distributionRegion" 
    end

    # Repeat code while condition is true
    # 
    # ==== Syntax
    #
    #      while do code
    #
    # ==== Parameters
    # 
    # *    +while+ - While Type  
    # *    +code+ - Code  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Control Structures
    # 
    # Official Wiki: https://community.bistudio.com/wiki/do
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    while { a > b } do { a = a + 1 };
    # 
    # ====== Example 2:
    # 
    #    A practical example: Repair all members of a group to such a level that they are able to stand up: {
    #        while { (not canStand _x) and (alive _x) } do {
    #            _x setDammage (getDammage _x) - 0.01;
    #        };
    #    } forEach units group unitname;
    # 
    def do _obj, _args
      "_obj do _args;" 
    end

    # Orders a unit to reload defined magazine commence fire burst on the given position (silently)
    # 
    # ==== Syntax
    #
    #      unit doArtilleryFire [position, type, rounds]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +[position, type, rounds]+ - Array  
    # *    +position+ - Position  
    # *    +type+ - String  
    # *    +rounds+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getArtilleryAmmo, #commandArtilleryFire, #getArtilleryETA, #enableEngineArtillery, #getArtilleryComputerSettings, #shownArtilleryComputer, #inRangeOfArtillery
    # 
    # Official Wiki: https://community.bistudio.com/wiki/doArtilleryFire
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    mortar1 doArtilleryFire [[3000, 120, 1000], "8Rnd_82mm_Mo_shells", 3]
    # 
    def doArtilleryFire _obj, _args
      "_obj doArtilleryFire _args;" 
    end

    # Orders a unit to process command defined by FSM file (silently).
    # 
    # ==== Description
    # 
    # 
    # 
    # Unlike with execFSM where _this is passed to the FSM, the following parameters are passed when using doFSM/commandFSM:
    # 
    # _leader
    # 
    # leader of subgroup with this command
    # 
    # _destination
    # 
    # command destination/position
    # 
    # _target
    # 
    # command target
    # 
    # _units
    # 
    # list of all persons in subgroup
    #  
    # ==== Syntax
    #
    #      unit(s) doFSM [fsmName, position, target]
    #
    # ==== Parameters
    # 
    # *    +units+ - Object or Array  
    # *    +[fsmName, position, target]+ - Array  
    # *    +fsmName+ - String  
    # *    +position+ - (Array)  
    # *    +target+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # FSM, FSM_Editor_Manual, #commandFSM, #completedFSM, #execFSM, #getFSMVariable, #setFSMVariable
    # 
    # Official Wiki: https://community.bistudio.com/wiki/doFSM
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne doFSM ["move.fsm", position player, player]
    # 
    def doFSM _obj, _args
      "_obj doFSM _args;" 
    end

    # Order the given unit(s) to fire on the given target (without radio messages).
    # 
    # ==== Description
    # 
    # The target is set with doTarget or commandTarget.
    # 
    # The target can be a unit or a vehicle, but not an object
    #  
    # ==== Syntax
    #
    #      unitName doFire target
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object or Array  
    # *    +target+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #commandFire, #fire
    # 
    # Official Wiki: https://community.bistudio.com/wiki/doFire
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ESoldier1 doFire _WSoldier1
    # 
    def doFire _obj, _args
      "_obj doFire _args;" 
    end

    # Order the given unit(s) to follow the given other unit or vehicle eg (without radio messages)
    # 
    # ==== Syntax
    #
    #      unitName doFollow unitName2
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object or Array  
    # *    +unitName2+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #commandFollow
    # 
    # Official Wiki: https://community.bistudio.com/wiki/doFollow
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 doFollow _soldier2
    # 
    def doFollow _obj, _args
      "_obj doFollow _args;" 
    end

    # Orders a unit or units to get out from the vehicle (silently)
    # 
    # ==== Syntax
    #
    #      doGetOut unit(s)
    #
    # ==== Parameters
    # 
    # *    +units+ - Object or Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #commandGetOut
    # 
    # Official Wiki: https://community.bistudio.com/wiki/doGetOut
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    doGetOut _unitOne
    # 
    def doGetOut _args
      "doGetOut _args;" 
    end

    # Order the given unit(s) to move to the given position (without radio messages).
    # 
    # ==== Description
    # 
    # After reaching his destination, the unit will immediately return to formation (if in a group); or order his group to form around his new position (if a group leader)
    #  
    # ==== Syntax
    #
    #      unit(s) doMove position
    #
    # ==== Parameters
    # 
    # *    +units+ - Object or Array  
    # *    +position+ - Array - format Position  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #commandMove, #setDestination, #moveTo, #move, #addWaypoint, #fn_vbs_doMoveEx, #setExactMovement (VBS2), #getExactMovement (VBS2)
    # 
    # Official Wiki: https://community.bistudio.com/wiki/doMove
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 doMove (position officer)
    # 
    # ====== Example 2:
    # 
    #    this doMove (getMarkerPos "Marker1")
    # 
    def doMove _obj, _args
      "_obj doMove _args;" 
    end

    # Order the given unit(s) to stop (without radio messages).
    # 
    # ==== Description
    # 
    # DoStop'ed units leave the groups formation.
    # 
    # It will prevent the unit from moving around with their group (or formation leader), while still beeing able to turn around and even move to a new position if they see fit.
    # 
    # They will still respond to orders from their group leader (like engage, rearm, board a vehicle), but all of their actions will be separate from the group formation
    #  
    # ==== Syntax
    #
    #      doStop unit(s)
    #
    # ==== Parameters
    # 
    # *    +units+ - Object or Array of Objects  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #commandStop, #stop, #stopped
    # 
    # Official Wiki: https://community.bistudio.com/wiki/doStop
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    doStop _soldier1;
    # 
    # ====== Example 2:
    # 
    #    doStop [_soldier1, _soldier2];
    # 
    # ====== Example 3:
    # 
    #    doStop (units player);
    # 
    def doStop _args
      "doStop _args;" 
    end

    # Order the given unit(s) to target the given target (without radio messages)
    # 
    # ==== Syntax
    #
    #      unit(s) doTarget target
    #
    # ==== Parameters
    # 
    # *    +units+ - Object or Array  
    # *    +target+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #assignedTarget, #commandTarget, #doWatch
    # 
    # Official Wiki: https://community.bistudio.com/wiki/doTarget
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ESoldier1 doTarget _WSoldier1
    # 
    def doTarget _obj, _args
      "_obj doTarget _args;" 
    end

    # Order the given unit(s) to watch the given position or target (without radio messages).
    # 
    # ==== Description
    # 
    # Use objNull as the target to order a unit to stop watching a position/target
    #  
    # ==== Syntax
    #
    #      unit(s) doWatch target
    #
    # ==== Parameters
    # 
    # *    +units+ - Object or Array  
    # *    +position+ - Array - format Position  
    # *    +target+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #commandWatch
    # 
    # Official Wiki: https://community.bistudio.com/wiki/doWatch
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne doWatch markerPos "MarkerMoveOne"
    #    The unit named "soldierOne" will watch the position where the marker "MarkerMoveOne" is placed.
    # 
    # ====== Example 2:
    # 
    #    _soldierOne doWatch _eastSoldier
    #    The unit named "soldierOne" will watch the unit named "eastSoldier".
    # 
    def doWatch _obj, _args
      "_obj doWatch _args;" 
    end

    # Return animation phase of door on vehicle
    # 
    # ==== Syntax
    #
    #      object doorPhase animation
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +animation+ - String  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #animateDoor
    # 
    # Official Wiki: https://community.bistudio.com/wiki/doorPhase
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    heli doorPhase "gunnerDoor"
    # 
    def doorPhase _obj, _args
      "_obj doorPhase _args;" 
    end

    # Draw an arrow on the map
    # 
    # ==== Syntax
    #
    #      map drawArrow [position1, position2, color]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control  
    # *    +[position1, position2, Color]+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #drawEllipse, #drawIcon, #drawLine, #drawRectangle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/drawArrow
    #
    # ==== Examples
    # 
    def drawArrow _obj, _args
      "_obj drawArrow _args;" 
    end

    # Draw an ellipse on the map
    # 
    # ==== Syntax
    #
    #      map drawEllipse [center, a, b, angle, color, fill]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control  
    # *    +[center, a, b, angle, color, fill]+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #drawArrow, #drawIcon, #drawLine, #drawRectangle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/drawEllipse
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (findDisplay 137 displayCtrl 51) drawEllipse [getpos player, 50, 50, 0, [1,1,0,1], ""]
    # 
    def drawEllipse _obj, _args
      "_obj drawEllipse _args;" 
    end

    # Draw an icon on the map.
    # 
    # ==== Description
    # 
    # The command needs to be called every frame, preferably with "Draw" control event handler ctrlAddEventHandler
    #  
    # ==== Syntax
    #
    #      map drawIcon [texture, color, position, width, height, angle, text, shadow, textSize, font, align]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control  
    # *    +texture+ - String  
    # *    +color+ - Array - [r,g,b,a]  
    # *    +position+ - Position2D or Position3D  
    # *    +width+ - Number  
    # *    +height+ - Number  
    # *    +angle+ - Number  
    # *    +text+ - String  
    # *    +shadow+ - Number - 0: no shadow, 1: shadow, 2: outline (works for text and for icon only if icon angle is 0)  
    # *    +textSize+ - Number - (since Arma 3 v0.72)  
    # *    +font+ - String - (since Arma 3 v0.72)  
    # *    +align+ - String - (since Arma 3 v0.72) "left", "right", "center". Default is "right"  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #drawArrow, #drawEllipse, #drawLine, #drawRectangle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/drawIcon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    findDisplay 12 displayCtrl 51 ctrlAddEventHandler ["Draw", "
    #    	_this select 0 drawIcon [
    #    		'iconStaticMG',
    #    		[1,0,0,1],
    #    		getPos player,
    #    		24,
    #    		24,
    #    		getDir player,
    #    		'Player Vehicle',
    #    		1,
    #    		0.03,
    #    		'TahomaB',
    #    		'right'
    #    	]
    #    "];
    # 
    def drawIcon _obj, _args
      "_obj drawIcon _args;" 
    end

    # Draws an ingame icon at a given position.
    # 
    # ==== Description
    # 
    # Command has to be executed each frame.
    # 
    # Use onEachFrame or addMissionEventHandler "Draw3D"
    #  
    # ==== Syntax
    #
    #      drawIcon3D [texture, color, pos, width, height, angle, text, shadow, textSize, font]
    #
    # ==== Parameters
    # 
    # *    +texture+ - String  
    # *    +color+ - Color  
    # *    +pos+ - Position  
    # *    +width+ - Number  
    # *    +height+ - Number  
    # *    +angle+ - Number  
    # *    +text+ - String  
    # *    +shadow+ - Number  
    # *    +textSize+ - Number  
    # *    +font+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #drawLine3D
    # 
    # Official Wiki: https://community.bistudio.com/wiki/drawIcon3D
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    Icon and text:onEachFrame {
    #    	drawIcon3D ["targetIcon.paa", [1,1,1,1], getPos cursorTarget, 1, 1, 45, "Target", 1, 0.05, "TahomaB"];
    #    };
    # 
    # ====== Example 2:
    # 
    #    Just text:
    #    addMissionEventHandler ["Draw3D", {
    #    	drawIcon3D ["", [1,0,0,1], position cursorTarget, 0, 0, 0, "Target", 1, 0.05, "PuristaMedium"];
    #    }];
    # 
    def drawIcon3D _args
      "drawIcon3D _args;" 
    end

    # Draw a line on the map
    # 
    # ==== Syntax
    #
    #      map drawLine [position1, position2, color]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control  
    # *    +[position1, position2, color]+ - Array  
    # *    +position1+ - Position3D  
    # *    +position2+ - Position3D  
    # *    +color+ - Color  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #drawArrow, #drawEllipse, #drawIcon, #drawRectangle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/drawLine
    #
    # ==== Examples
    # 
    def drawLine _obj, _args
      "_obj drawLine _args;" 
    end

    # Draws a line of a given color between two 3D positions.
    # 
    # ==== Description
    # 
    # Command has to be executed each frame.
    # 
    # Use onEachFrame or addMissionEventHandler "Draw3D"
    #  
    # ==== Syntax
    #
    #      drawLine3D [start, end, color]
    #
    # ==== Parameters
    # 
    # *    +start+ - Position  
    # *    +end+ - Position  
    # *    +color+ - Color  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #drawIcon3D
    # 
    # Official Wiki: https://community.bistudio.com/wiki/drawLine3D
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    onEachFrame {
    #    	drawLine3D [getPos player, getPos cursorTarget, [1,1,1,1]];
    #    };
    # 
    def drawLine3D _args
      "drawLine3D _args;" 
    end

    # The editor will draw a line between the two specified editor objects.
    # 
    # ==== Description
    # 
    # Line type can be LINE or ARROW
    #  
    # ==== Syntax
    #
    #      map drawLink [from,to,param type,line type,color]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[from,to,param type,line type,color]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/drawLink
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def drawLink _obj, _args
      "_obj drawLink _args;" 
    end

    # Unknown effect
    # 
    # ==== Syntax
    #
    #      control drawLocation location
    #
    # ==== Parameters
    # 
    # *    +control+ - Control  
    # *    +location+ - Location  
    #
    # ==== Returns
    #
    #      Unknown
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/drawLocation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def drawLocation _obj, _args
      "_obj drawLocation _args;" 
    end

    # Draw a Rectangle on the map
    # 
    # ==== Syntax
    #
    #      map drawRectangle [center, a, b, angle, color, fill]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control  
    # *    +center+ - Array  
    # *    +a+ - Number  
    # *    +b+ - Number  
    # *    +angle+ - Number  
    # *    +color+ - Array  
    # *    +fill+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #drawArrow, #drawEllipse, #drawIcon, #drawLine
    # 
    # Official Wiki: https://community.bistudio.com/wiki/drawRectangle
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ctrl drawRectangle [
    #    	getPos player,
    #    	20,
    #    	20,
    #    	getDir player,
    #    	[0,0,1,1],
    #    	""
    #    ];
    # 
    def drawRectangle _obj, _args
      "_obj drawRectangle _args;" 
    end

    # Returns the driver of a vehicle
    # 
    # ==== Syntax
    #
    #      Object = driver vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Object -The unit sitting in the driver place is returned. If vehicle is not a vehicle but a person, the person is returned.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #commander, #gunner, #crew
    # 
    # Official Wiki: https://community.bistudio.com/wiki/driver
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (driver _tank) action ["getout", _tank];
    # 
    def driver _args
      "driver _args;" 
    end

    # Creates a particle effect.
    # 
    # ==== Description
    # 
    # This command is used to create smoke, fire and similar effects.
    # 
    # The particles are single polygons with single textures that always face the player.
    # 
    # They can be set to dynamically change their position, size, direction, can be set to different weights and more or less dependant on the wind
    #  
    # ==== Syntax
    #
    #      drop array
    #
    # ==== Parameters
    # 
    # *    +array+ - Array - format ParticleArray.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # ParticleArray
    # 
    # Official Wiki: https://community.bistudio.com/wiki/drop
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    drop ["cl_basic", "", "Billboard", 1, 1, [-3.5*(sin(direction xural)),
    #    -3.5*(cos(direction xural)),0], [random 0.1,random 0.1,random 0.5], 1, 0.005, 0.0042,
    #     0.7, [0.3,3], [[0.5,0.5,0.5,0],[0.7,0.7,0.7,0.5],[0.9,0.9,0.9,0]], [0,1,0,1,0,1],
    #     0.2, 0.2, "", "", xural]
    # 
    def drop _args
      "drop _args;" 
    end

    # Pre-defined variable for the eastern side
    # 
    # ==== Syntax
    #
    #      Side = east
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #side, #west, #resistance, #civilian
    # 
    # Official Wiki: https://community.bistudio.com/wiki/east
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?((side _unit)==east) : hint "This is an eastern unit!"
    # 
    def east 
      "east" 
    end

    # Sends any text into the debugger console or the logfile.
    # 
    # ==== Description
    # 
    # Present in internal version only, not working in the retail version
    #  
    # ==== Syntax
    #
    #      echo text
    #
    # ==== Parameters
    # 
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #diag_log
    # 
    # Official Wiki: https://community.bistudio.com/wiki/echo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    echo "Text in logfile"
    # 
    def echo _args
      "echo _args;" 
    end

    # Show the edit object dialog for the given object
    # 
    # ==== Syntax
    #
    #      map editObject object
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +object+ - String -  
    #
    # ==== Returns
    #
    #      Any
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/editObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def editObject _obj, _args
      "_obj editObject _args;" 
    end

    # Sets given event handler of given editor
    # 
    # ==== Syntax
    #
    #      map editorSetEventHandler [handler name,function]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[handler name,function]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/editorSetEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _map editorSetEventHandler ["SelectObject",""]
    # 
    def editorSetEventHandler _obj, _args
      "_obj editorSetEventHandler _args;" 
    end

    # Returns the effective commander (who really commands) of the vehicle
    # 
    # ==== Syntax
    #
    #      Object = effectiveCommander vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/effectiveCommander
    #
    # ==== Examples
    # 
    def effectiveCommander _args
      "effectiveCommander _args;" 
    end

    # Construct an array that can be processed by then
    # 
    # ==== Syntax
    #
    #      ifCode else elseCode
    #
    # ==== Parameters
    # 
    # *    +ifCode+ - Code  
    # *    +elseCode+ - Code  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Control Structures
    # 
    # Official Wiki: https://community.bistudio.com/wiki/else
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (a>b) then {c=0} else {c=1}
    # 
    # ====== Example 2:
    # 
    #    if (a<b) then {
    #       hint "B is greater than A";
    #    } else {
    #       hint "A is greater than B";
    #    };
    # 
    def else _obj, _args
      "_obj else _args;" 
    end

    # Enables parts of the AI behavior that was disabled by disableAI
    # 
    # ==== Syntax
    #
    #      unit enableAI skilltype
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +skilltype+ - String - See disableAI for possible values.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #disableAI
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableAI
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne enableAI "Move"
    # 
    def enableAI _obj, _args
      "_obj enableAI _args;" 
    end

    # Enable/disable given AI feature.
    # 
    # ==== Description
    # 
    # Feature may be one of:
    # 
    # "AwareFormationSoft", "CombatFormationSoft"
    #  
    # ==== Syntax
    #
    #      feature enableAIFeature enabled
    #
    # ==== Parameters
    # 
    # *    +feature+ - String  
    # *    +enabled+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #checkAIFeature
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableAIFeature
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     "AwareFormationSoft" enableAIFeature true 
    # 
    def enableAIFeature _obj, _args
      "_obj enableAIFeature _args;" 
    end

    # Set if leader can issue attack commands to the soldiers in his group
    # 
    # ==== Syntax
    #
    #      group enableAttack enable
    #
    # ==== Parameters
    # 
    # *    +group+ - Object or Group  
    # *    +enable+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #attackEnabled
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableAttack
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _group1 enableAttack true
    # 
    def enableAttack _obj, _args
      "_obj enableAttack _args;" 
    end

    # Allows camera shake effects via addCamShake.
    # 
    # ==== Description
    # 
    # If set to false, then a currently active shake effect will stop immediately.
    # 
    # By default, shake effects are enabled, but once they have been disabled by this command, they will have to be enabled first, in order to be visible
    #  
    # ==== Syntax
    #
    #      enableCamShake value
    #
    # ==== Parameters
    # 
    # *    +value+ - Boolean - If true, then shake effects are visible  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addCamShake, #setCamShakeDefParams, #setCamShakeParams, #resetCamShake
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableCamShake
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    enableCamShake false;
    # 
    def enableCamShake _args
      "enableCamShake _args;" 
    end

    # Enable/disable caustics drawing
    # 
    # ==== Syntax
    #
    #      enableCaustics bool
    #
    # ==== Parameters
    # 
    # *    +bool+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableCaustics
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def enableCaustics _args
      "enableCaustics _args;" 
    end

    # Enable collision between vehicles
    # 
    # ==== Syntax
    #
    #      vehicle enableCollisionWith vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableCollisionWith
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def enableCollisionWith _obj, _args
      "_obj enableCollisionWith _args;" 
    end

    # Enables copilot actions
    # 
    # ==== Syntax
    #
    #      vehicle enableCopilot enable
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +enable+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #isCopilotEnabled
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableCopilot
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if ( ! isCopilotEnabled myHeli ) then { myHeli enableCopilot true; };
    # 
    def enableCopilot _obj, _args
      "_obj enableCopilot _args;" 
    end

    # enable debrifing score table
    # 
    # ==== Syntax
    #
    #      enableDebriefingStats
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableDebriefingStats
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    enableDebriefingStats;
    # 
    def enableDebriefingStats 
      "enableDebriefingStats" 
    end

    # Enable or disable the legend for diagnotic
    # 
    # ==== Syntax
    #
    #      enableDiagLegend Bool
    #
    # ==== Parameters
    # 
    # *    +Bool + - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableDiagLegend
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    enableDiagLegend false
    # 
    def enableDiagLegend _args
      "enableDiagLegend _args;" 
    end

    # Enables the execution of a custom camera sequence after the players death, coded in the script onPlayerKilled.
    # 
    # ==== Description
    # 
    # sqs
    #  
    # ==== Syntax
    #
    #      enableEndDialog
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableEndDialog
    #
    # ==== Examples
    # 
    def enableEndDialog 
      "enableEndDialog" 
    end

    # Enable/disable the artillery engine.
    # 
    # ==== Description
    # 
    # This allows the user to use the artillery computer on mortar/artillery, and for AI to use it for indirect fire
    #  
    # ==== Syntax
    #
    #      enableEngineArtillery enabled
    #
    # ==== Parameters
    # 
    # *    +enabled+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #shownArtilleryComputer, #getArtilleryAmmo, #commandArtilleryFire, #doArtilleryFire, #getArtilleryComputerSettings, #getArtilleryETA, #inRangeOfArtillery
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableEngineArtillery
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    enableEngineArtillery false; 
    # 
    def enableEngineArtillery _args
      "enableEngineArtillery _args;" 
    end

    # Enable/disable environmental effects (ambient life + sound)
    # 
    # ==== Syntax
    #
    #      enableEnvironment enabled
    #
    # ==== Parameters
    # 
    # *    +enabled+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableEnvironment
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    enableEnvironment false;
    # 
    def enableEnvironment _args
      "enableEnvironment _args;" 
    end

    # Enables/Disables the person's fatigue
    # 
    # ==== Syntax
    #
    #      unit enableFatigue enable
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +enable+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getFatigue, #setFatigue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableFatigue
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player enableFatigue false;
    # 
    # ====== Example 2:
    # 
    #    { _x enableFatigue false; } forEach (units group player);
    # 
    def enableFatigue _obj, _args
      "_obj enableFatigue _args;" 
    end

    # Force the AI to use gun lights
    # 
    # ==== Syntax
    #
    #      thing enableGunLights value
    #
    # ==== Parameters
    # 
    # *    +thing+ - Object or Group - the unit or the group forced to use gun lights  
    # *    +value+ - Boolean - true/false / String (Arma 3) - "AUTO", "forceOn", "forceOff"  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableGunLights
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    group enableGunLights true
    # 
    # ====== Example 2:
    # 
    #    unitName enableGunLights true
    # 
    def enableGunLights _obj, _args
      "_obj enableGunLights _args;" 
    end

    # Allows the AI to use IR lasers
    # 
    # ==== Syntax
    #
    #      thing enableIRLasers value
    #
    # ==== Parameters
    # 
    # *    +thing+ - Object or Group - the unit or the group allowed to use IR lasers  
    # *    +value+ - Boolean - true/false  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableIRLasers
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (units group player) enableIRLasers true
    # 
    def enableIRLasers _obj, _args
      "_obj enableIRLasers _args;" 
    end

    # Enable and disable radio messages to be heard and shown in the left lower corner of the screen.
    # 
    # ==== Description
    # 
    # This command can be helpful during cutscenes
    #  
    # ==== Syntax
    #
    #      enableRadio state
    #
    # ==== Parameters
    # 
    # *    +state+ - Boolean - true to enable the radio, false to disable it  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableRadio
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    enableRadio false
    # 
    def enableRadio _args
      "enableRadio _args;" 
    end

    # Enable / disable reload when magazine is empty
    # 
    # ==== Syntax
    #
    #      object enableReload enable
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +enable+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableReload
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _vehicle enableReload false
    # 
    def enableReload _obj, _args
      "_obj enableReload _args;" 
    end

    # Enables/Disables satellite normal map od detail maps
    # 
    # ==== Syntax
    #
    #      enableSatNormalOnDetail state
    #
    # ==== Parameters
    # 
    # *    +state+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableSatNormalOnDetail
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     enableSatNormalOnDetail true;
    # 
    def enableSatNormalOnDetail _args
      "enableSatNormalOnDetail _args;" 
    end

    # Enable / disable saving of the game.
    # 
    # ==== Description
    # 
    # When disabled, the autosave is created (if not forbidden by save == false)
    #  
    # ==== Syntax
    #
    #      enableSaving [enable, save]
    #
    # ==== Parameters
    # 
    # *    +enable+ - Boolean -  
    # *    +enable+ - Boolean - allow manual saving  
    # *    +save+ - Boolean - create autosave  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #loadGame, #saveGame, #savingEnabled
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableSaving
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    enableSaving false; // Saving disabled and make autosave.
    #    enableSaving true;  // Saving enabled without autosave.
    #    enableSaving [ false, false ]; // Saving disabled without autosave.
    #    enableSaving [ false, true  ]; // Saving disabled and make autosave.
    #    enableSaving [ true,  false ]; // Saving enabled without autosave.
    #    enableSaving [ true,  true  ]; // Saving enabled and make autosave.
    # 
    def enableSaving _args
      "enableSaving _args;" 
    end

    # Enables radio transmissions to be heard and seen on screen.
    # 
    # ==== Description
    # 
    # It does not affect KBTell conversations
    #  
    # ==== Syntax
    #
    #      enableSentences enable
    #
    # ==== Parameters
    # 
    # *    +enable+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableSentences
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    enableSentences false;
    # 
    def enableSentences _args
      "enableSentences _args;" 
    end

    # Enable / disable simulation for given entity
    # 
    # ==== Syntax
    #
    #      object enableSimulation bool
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      None
    #
    # ==== Multiplayer
    # 
    # This command only works locally and must be run on all machines to have global affect.
    # 
    # ==== See Also
    # 
    # #enableSimulationGlobal, #simulationEnabled
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableSimulation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player enableSimulation false;
    # 
    def enableSimulation _obj, _args
      "_obj enableSimulation _args;" 
    end

    # Enable or disable simulation for given entity, globally.
    # 
    # ==== Description
    # 
    # Call this only from the server
    #  
    # ==== Syntax
    #
    #      entity enableSimulationGlobal enable
    #
    # ==== Parameters
    # 
    # *    +enable+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #enableSimulation, #simulationEnabled
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableSimulationGlobal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _myObject enableSimulationGlobal false;
    # 
    def enableSimulationGlobal _obj, _args
      "_obj enableSimulationGlobal _args;" 
    end

    # Enable / disable Team Switch.
    # 
    # ==== Description
    # 
    # The default setting is enabled
    #  
    # ==== Syntax
    #
    #      enableTeamSwitch enable
    #
    # ==== Parameters
    # 
    # *    +enable+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Team_Switch, #onBriefingTeamSwitch, #onTeamSwitch, #teamSwitch, #teamSwitchEnabled
    # 
    # Official Wiki: https://community.bistudio.com/wiki/enableTeamSwitch
    #
    # ==== Examples
    # 
    def enableTeamSwitch _args
      "enableTeamSwitch _args;" 
    end

    # Finish loading screen displaying (started by startLoadingScreen)
    # 
    # ==== Syntax
    #
    #      endLoadingScreen
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #startLoadingScreen, #progressLoadingScreen
    # 
    # Official Wiki: https://community.bistudio.com/wiki/endLoadingScreen
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    startLoadingScreen ["Loading My Mission"];//Batch of codeprogressLoadingScreen 0.5;//Batch of codeendLoadingScreen;
    # 
    def endLoadingScreen 
      "endLoadingScreen" 
    end

    # Finish the mission.
    # 
    # ==== Description
    # 
    # The end type can be:
    # 
    # "CONTINUE"
    # 
    # "KILLED"
    # 
    # "LOSER"
    # 
    # "END1"
    # 
    # "END2"
    # 
    # "END3"
    # 
    # "END4"
    # 
    # "END5"
    # 
    # "END6"
    # 
    # Mission saves are deleted.
    # 
    # Use failMission if they should not.
    # 
    # 
    # 
    # To maintain Arma 3 visual style, it's recommended to use BIS_fnc_endMission instead
    #  
    # ==== Syntax
    #
    #      endMission end type
    #
    # ==== Parameters
    # 
    # *    +end type+ - String -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # To end mission properly so that everyone goes to debriefing at the same time, this command should be executed on every machine.
    # 
    # ==== See Also
    # 
    # #failMission, #forceEnd
    # 
    # Official Wiki: https://community.bistudio.com/wiki/endMission
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    endMission "END1"
    # 
    def endMission _args
      "endMission _args;" 
    end

    # Activates and deactivates the engine of a vehicle.
    # 
    # ==== Description
    # 
    # This command has to be executed where vehicle is local.
    # 
    # 
    # 
    # NOTE: Executed on a remote vehicle this command may turn the engine on but then it will get turned off by itself after a short while
    #  
    # ==== Syntax
    #
    #      vehicle engineOn state
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +state+ - Boolean - true to turn the engine on, false to turn it off  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #isEngineOn
    # 
    # Official Wiki: https://community.bistudio.com/wiki/engineOn
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?!(engineOn _jeep) : _jeep engineOn true
    # 
    # ====== Example 2:
    # 
    #    if (local vehicle player) then {
    #    	vehicle player engineOn true; 
    #    } else {
    #    	hint "Get in the driver seat, soldier!";
    #    };
    # 
    def engineOn _obj, _args
      "_obj engineOn _args;" 
    end

    # Returns a list of entities with given type
    # 
    # ==== Syntax
    #
    #      entities type
    #
    # ==== Parameters
    # 
    # *    +type+ - String  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #nearEntities, #allUnits, #vehicles, #agents
    # 
    # Official Wiki: https://community.bistudio.com/wiki/entities
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    entities "Car"
    # 
    def entities _args
      "entities _args;" 
    end

    # Estimated end of MP game converted to serverTime
    # 
    # ==== Syntax
    #
    #      estimatedEndServerTime
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/estimatedEndServerTime
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def estimatedEndServerTime 
      "estimatedEndServerTime" 
    end

    # Sets the "time left" value that is shown in the "Game in Progress" screen during multiplayer sessions.
    # 
    # ==== Description
    # 
    # This command works in MP only.
    # 
    # If you set param1, param2 or following in the mission's description.
    # 
    # ext, you can use those values instead of time
    #  
    # ==== Syntax
    #
    #      estimatedTimeLeft seconds
    #
    # ==== Parameters
    # 
    # *    +seconds+ - Number - estimated time in seconds, or one of {param1, param2, ...}  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/estimatedTimeLeft
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?("OBJ1" objectStatus "DONE") : estimatedTimeLeft 600
    # 
    def estimatedTimeLeft _args
      "estimatedTimeLeft _args;" 
    end

    # Return argument in mission editor of a given object
    # 
    # ==== Syntax
    #
    #      map evalObjectArgument [object, argument]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control  
    # *    +[object, argument]+ - Array  
    #
    # ==== Returns
    #
    #      Any Value
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setObjectArguments
    # 
    # Official Wiki: https://community.bistudio.com/wiki/evalObjectArgument
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    // returns string "[1009.0351, 1319.4928]"
    #    (findDisplay 128 displayCtrl 51) getObjectArgument ["_unit_1", "POSITION"]
    #    // returns array [1009.0351, 1319.4928]
    #    (findDisplay 128 displayCtrl 51) evalObjectArgument ["_unit_1", "POSITION"]
    # 
    def evalObjectArgument _obj, _args
      "_obj evalObjectArgument _args;" 
    end

    # Returns array of backpacks stored in given crate or vehicle.
    # 
    # ==== Description
    # 
    # Used for accessing backpack content of a backpack on ground
    #  
    # ==== Syntax
    #
    #      everyBackpack box
    #
    # ==== Parameters
    # 
    # *    +box+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #firstBackpack, #unitBackpack, #backpack, #backpackCargo, #getBackpackCargo, #backpackItems, #addBackpack, #addBackpackCargo, #addBackpackCargoGlobal, #removeBackpack, #clearBackpackCargo, #clearBackpackCargoGlobal, #clearAllItemsFromBackpack, #loadBackpack, #backpackSpaceFor, #canAddItemToBackpack, #addItemToBackpack, #removeItemFromBackpack
    # 
    # Official Wiki: https://community.bistudio.com/wiki/everyBackpack
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    everyBackpack cursorTarget;
    # 
    # ====== Example 2:
    # 
    #    _vehicleBackpacks = everyBackpack vehicle player;
    # 
    def everyBackpack _args
      "everyBackpack _args;" 
    end

    # Execute a script using (the deprecated) .
    # 
    # ==== Description
    # 
    # sqs syntax.
    # 
    # The argument is passed to the script in the "_this" variable, and magic variable "_time" within the script contains the time in seconds that the script has been running.
    # 
    # It is not recommended to use this command in any game other than OFP.
    # 
    # Instead, the execVM command should be used.
    # 
    # Learn more about scripts under Scripts
    #  
    # ==== Syntax
    #
    #      argument exec script
    #
    # ==== Parameters
    # 
    # *    +argument+ - Any Value - the argument which should be passed to the script. To pass multiple arguments, use an array.  
    # *    +script+ - String - the name of the script. It should be given relatively to the mission folder, campaign scripts subfolder or global scripts folder and is searched there in the same order. If you refer to a script packed together with an addon, the path should look like this: "\ADDON_PBO_NAME\script.sqs" where ADDON_PBO_NAME is the name of the addon's *.pbo file without extension.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #execVM, #call, #spawn, #execFSM
    # 
    # Official Wiki: https://community.bistudio.com/wiki/exec
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [player, _jeep] exec "getin.sqs"
    # 
    def exec _obj, _args
      "_obj exec _args;" 
    end

    # Execute an editor script for the specified object
    # 
    # ==== Syntax
    #
    #      map execEditorScript [object,script]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[object,script]+ - Array -  
    #
    # ==== Returns
    #
    #      Any
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/execEditorScript
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _map execEditorScript ["_team_1","create"]
    # 
    def execEditorScript _obj, _args
      "_obj execEditorScript _args;" 
    end

    # Execute the scripted FSM.
    # 
    # ==== Description
    # 
    # The FSM file is first searched in the mission folder, then in the campaign scripts folder and finally in the global scripts folder.
    # 
    # 
    # 
    # Argument(s) (if any) is/are passed as _this to the FSM.
    # 
    # Returns the FSM handle or 0 when failed
    #  
    # ==== Syntax
    #
    #      argument(s) execFSM filename
    #
    # ==== Parameters
    # 
    # *    +arguments+ - Any Value(s) - Optional. Argument(s) accessible as _this in the FSM  
    # *    +filename+ - String  
    #
    # ==== Returns
    #
    #      Number - FSM handle
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # FSM, FSM Editor Manual, #execVM, #call, #spawn, #exec, #commandFSM, #completedFSM, #doFSM, #getFSMVariable, #setFSMVariable
    # 
    # Official Wiki: https://community.bistudio.com/wiki/execFSM
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _id = player execFSM "test.fsm";
    # 
    # ====== Example 2:
    # 
    #    _handle = [_a, _b, _c] execFSM "test.fsm";
    # 
    # ====== Example 3:
    # 
    #    _handle = execFSM "test.fsm";
    # 
    def execFSM _obj, _args
      "_obj execFSM _args;" 
    end

    # Compile and execute SQF Script.
    # 
    # ==== Description
    # 
    # The optional argument is passed to the script as local variable _this.
    # 
    # Script is compiled every time you use this command.
    # 
    # The Script is first searched for in the mission folder, then in the campaign scripts folder and finally in the global scripts folder
    #  
    # ==== Syntax
    #
    #      argument(s) execVM filename
    #
    # ==== Parameters
    # 
    # *    +arguments+ - Any Value(s)  - Optional.  Argument(s) accessible as _this in the script  
    # *    +filename+ - String  
    #
    # ==== Returns
    #
    #      Script - script handle, which can be used to determine (via scriptDone) when the spawned script has finished.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #exec, #execFSM, #scriptDone, #terminate, SQF syntax, Control Structures
    # 
    # Official Wiki: https://community.bistudio.com/wiki/execVM
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _handle = execVM "test.sqf";
    # 
    # ====== Example 2:
    # 
    #    _handle = player execVM "test.sqf"; 
    #    waitUntil {scriptDone _handle};
    # 
    def execVM _obj, _args
      "_obj execVM _args;" 
    end

    # Stops the execution of a  SQS script.
    # 
    # ==== Description
    # 
    # It's ignored in  SQF Scripts
    #  
    # ==== Syntax
    #
    #      exit
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #exitWith, Control Structures
    # 
    # Official Wiki: https://community.bistudio.com/wiki/exit
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    exit
    # 
    def exit 
      "exit" 
    end

    # Let x be a number, then exp (x) is equal to e to the power of x (or e^x)
    # 
    # ==== Syntax
    #
    #      Number = exp x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/exp
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _result=exp 1
    #    returns 2.7182
    # 
    def exp _args
      "exp _args;" 
    end

    # Return expected destination of unit as an array with format: [ Position, planningMode, forceReplan]
    # 
    # ==== Syntax
    #
    #      Array = expectedDestination person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setDestination
    # 
    # Official Wiki: https://community.bistudio.com/wiki/expectedDestination
    #
    # ==== Examples
    # 
    def expectedDestination _args
      "expectedDestination _args;" 
    end

    # Returns the direction object is watching (eyes, or a vehicle primary observer)
    # 
    # ==== Syntax
    #
    #      eyeDirection unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/eyeDirection
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def eyeDirection _args
      "eyeDirection _args;" 
    end

    # Returns the object's eyes / main turret position
    # 
    # ==== Syntax
    #
    #      eyePos object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Array - format PositionASL
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getPosASL, #setPosASL, #setPosASL2
    # 
    # Official Wiki: https://community.bistudio.com/wiki/eyePos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    eyePos player
    # 
    def eyePos _args
      "eyePos _args;" 
    end

    # Returns the face of a person
    # 
    # ==== Syntax
    #
    #      face person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/face
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    face player
    # 
    def face _args
      "face _args;" 
    end

    # Gets unit faction.
    # 
    # ==== Description
    # 
    # Factions are defined under CfgFactionClasses.
    # 
    # If the given faction is not defined, the command returns empty string.
    # 
    # Standard Factions include:
    # 
    # Arma 2:
    # 
    # West: "USMC", "CDF"
    # 
    # East: "RU", "INS"
    # 
    # Guer: "GUE"
    # 
    # Civ: "CIV", "CIV_RU"
    # 
    # Arma 2: Operation Arrowhead:
    # 
    # West: "BIS_US", "BIS_CZ", "BIS_GER"
    # 
    # East: "BIS_TK", "BIS_TK_INS"
    # 
    # Guer: "BIS_TK_GUE", "BIS_UN"
    # 
    # Civ: "BIS_TK_CIV", "BIS_CIV_special"
    # 
    # DLC FactionsArma 2: British Armed Forces:
    # 
    # West: "BIS_BAF"
    # 
    # Arma 2: Private Military Company:
    # 
    # Guer: "PMC_BAF"
    # 
    # Arma 3:
    # 
    # West: "BLU_F" (NATO)
    # 
    # East: "OPF_F" (CSAT)
    # 
    # Guer: "IND_F" (AAF), "IND_G_F" (FIA)
    # 
    # Civ: "CIV_F" (Civilians)
    #  
    # ==== Syntax
    #
    #      String = faction unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      String. See above.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/faction
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _faction = faction _object;
    # 
    def faction _args
      "faction _args;" 
    end

    # Changes the music volume smoothly within the given time
    # 
    # ==== Syntax
    #
    #      time fadeMusic volume
    #
    # ==== Parameters
    # 
    # *    +time+ - Number in seconds  
    # *    +volume+ - Number - music volume range 0 to 1. Maximum volume is 1. Default is 0.5.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #fadeSound
    # 
    # Official Wiki: https://community.bistudio.com/wiki/fadeMusic
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    5 fadeMusic 0
    # 
    def fadeMusic _obj, _args
      "_obj fadeMusic _args;" 
    end

    # Causes a smooth change in the radio volume.
    # 
    # ==== Description
    # 
    # The change duration is given by time, the target volume by volume.
    # 
    # The default radio volume is 1.
    # 
    # 0
    #  
    # ==== Syntax
    #
    #      time fadeRadio volume
    #
    # ==== Parameters
    # 
    # *    +time+ - Number in seconds  
    # *    +volume+ - Number - radio volume range 0 to 1. Maximum volume is 1. Default is 1.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/fadeRadio
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    5 fadeRadio 0.1
    # 
    def fadeRadio _obj, _args
      "_obj fadeRadio _args;" 
    end

    # Changes the sound volume smoothly within the given time
    # 
    # ==== Syntax
    #
    #      time fadeSound volume
    #
    # ==== Parameters
    # 
    # *    +time+ - Number - the time in seconds  
    # *    +volume+ - Number - sound volume range 0 to 1. Maximum volume is 1. Default is 1.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #fadeMusic
    # 
    # Official Wiki: https://community.bistudio.com/wiki/fadeSound
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    5 fadeSound 0
    # 
    def fadeSound _obj, _args
      "_obj fadeSound _args;" 
    end

    # Cause a smooth change in the master speech volume.
    # 
    # ==== Description
    # 
    # The change duration is given by time, the target volume by volume.
    # 
    # The default master is 1.
    # 
    # 0
    #  
    # ==== Syntax
    #
    #      time fadeSpeech volume
    #
    # ==== Parameters
    # 
    # *    +time+ - Number  
    # *    +volume+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/fadeSpeech
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    5 fadeSpeech 0.1;
    # 
    def fadeSpeech _obj, _args
      "_obj fadeSpeech _args;" 
    end

    # Finish the mission.
    # 
    # ==== Description
    # 
    # If the server is set to run persistent mission, failMission will not end the mission when last player gets kicked to the lobby.
    # 
    # Use endMission to end the mission.
    # 
    # The end type can be:
    # 
    # "CONTINUE"
    # 
    # "KILLED"
    # 
    # "LOSER"
    # 
    # "END1"
    # 
    # "END2"
    # 
    # "END3"
    # 
    # "END4"
    # 
    # "END5"
    # 
    # "END6"
    # 
    # Mission saves won't be deleted.
    # 
    # 
    # 
    # To maintain Arma 3 visual style, it's recommended to use BIS_fnc_endMission instead
    #  
    # ==== Syntax
    #
    #      failMission endtype
    #
    # ==== Parameters
    # 
    # *    +endtype+ - String -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #endMission, #forceEnd
    # 
    # Official Wiki: https://community.bistudio.com/wiki/failMission
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    failMission "LOSER"; 
    # 
    def failMission _args
      "failMission _args;" 
    end

    # Always false
    # 
    # ==== Syntax
    #
    #      false
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #true
    # 
    # Official Wiki: https://community.bistudio.com/wiki/false
    #
    # ==== Examples
    # 
    def false 
      "false" 
    end

    # Adds magazines from the campaign pool to the given unit, depending on his weapons
    # 
    # ==== Syntax
    #
    #      fillWeaponsFromPool unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/fillWeaponsFromPool
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    fillWeaponsFromPool _soldier
    # 
    def fillWeaponsFromPool _args
      "fillWeaponsFromPool _args;" 
    end

    # Returns the 0 based position of the first array element that matches x, returns -1 if not found.
    # 
    # ==== Description
    # 
    # Test is case-sensitive.
    # 
    # Note that you can not locate an array within an array using this command
    #  
    # ==== Syntax
    #
    #      Number = array find x
    #
    # ==== Parameters
    # 
    # *    +array+ - Array to search in  
    # *    +x+ - Any Value except Array to search for in the array  
    #
    # ==== Returns
    #
    #      Number 0 based position of the first array element that matches x, -1 if not found
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #count, #in Array
    # 
    # Official Wiki: https://community.bistudio.com/wiki/find
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [apples,"Oranges",PEARS] find "Oranges" .... result is 1
    # 
    # ====== Example 2:
    # 
    #    if ((magazines player) find "Strela" > -1) then {hint "I got a Strela"}
    # 
    def find _obj, _args
      "_obj find _args;" 
    end

    # Returns the object around where the unit finds cover.
    # 
    # ==== Description
    # 
    # The minDist, visibilityPosition and ignoreObject parameters are optional.
    # 
    # Command is not functional since Arma 2.
    # 
    # This command is part of getHideFrom, findCover, setHideBehind non-functional trio
    #  
    # ==== Syntax
    #
    #      Object = object findCover [position, hidePosition, maxDist, minDist, visibilityPosition, ignoreObject]
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +[position, hidePosition, maxDist, minDist, visibilityPosition, ignoreObject]+ - Array  
    # *    +position+ - Array - format Position  
    # *    +hidePosition+ - Array - format getHideFrom. Position of that which the unit should hide from  
    # *    +maxDist+ - Number  
    # *    +minDist+ - Number (Optional)  
    # *    +visibilityPosition+ - Array - format Position (Optional) used to select cover that unit can see in that direction from  
    # *    +ignoreObject+ - Object (Optional) Ignore this object in visibility check  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getHideFrom, #setHideBehind, #isHidden
    # 
    # Official Wiki: https://community.bistudio.com/wiki/findCover
    #
    # ==== Examples
    # 
    def findCover _obj, _args
      "_obj findCover _args;" 
    end

    # Find display by its IDD (which is defined in the description.
    # 
    # ==== Description
    # 
    # ext or config).
    # 
    # If the specified display can't be found displayNull ("No display") is returned, (which can be tested with the isNull command.
    # 
    # )
    # 
    # The primary display uses IDD 46.
    # 
    # (eg: findDisplay 46).
    # 
    # This will return displayNull on a dedicated server (so be sure to check isDedicated if using this in a waitUntil condition)
    #  
    # ==== Syntax
    #
    #      Display = findDisplay idd
    #
    # ==== Parameters
    # 
    # *    +idd+ - Number  
    #
    # ==== Returns
    #
    #      Display
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #displayCtrl, #isNull
    # 
    # Official Wiki: https://community.bistudio.com/wiki/findDisplay
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _display = findDisplay 1
    # 
    def findDisplay _args
      "findDisplay _args;" 
    end

    # Return object that matches the provided reference
    # 
    # ==== Syntax
    #
    #      map findEditorObject value
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +value+ - Any -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/findEditorObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def findEditorObject _obj, _args
      "_obj findEditorObject _args;" 
    end

    # Searches for an empty position around specified position.
    # 
    # ==== Description
    # 
    # The search starts looking for an empty position at a minimum distance of [minDistance] from the [center] and looks as far away as [maxDistance].
    # 
    # If a [vehicleType] parameter is specified, then the search will look for an empty positions that is big enough to hold that vehicle type.
    # 
    # If an empty position isn't found, an empty array is returned.
    # 
    # This command ignores moving objects present within search area
    #  
    # ==== Syntax
    #
    #      center findEmptyPosition [minDistance, maxDistance] or [minDistance, maxDistance, vehicleType]
    #
    # ==== Parameters
    # 
    # *    +center+ - Array - Search area center position. Accepts Position2D, Position3D, PositionATL or PositionASL  
    # *    +[minDistance, maxDistance, vehicleType]+ - Array  
    # *    +minDistance+ - Number - Start searching no closer than minDistance from the center  
    # *    +maxDistance+ - Number - Stop searching no further than maxDistance from the center  
    # *    +vehicleType+ - String - Class name of a vehicle to accommodate  
    #
    # ==== Returns
    #
    #      Array - A suitable empty position in format Position3D or [] if not found
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #selectBestPlaces, #isFlatEmpty
    # 
    # Official Wiki: https://community.bistudio.com/wiki/findEmptyPosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _position = position player findEmptyPosition [0,100];
    # 
    # ====== Example 2:
    # 
    #    _position = _center findEmptyPosition [10,100,"UH60M_EP1"];
    # 
    # ====== Example 3:
    # 
    #    Check if exact position is empty:
    #    _position = _center findEmptyPosition [0,0,"B_Boat_Armed_01_minigun_F"];
    # 
    def findEmptyPosition _obj, _args
      "_obj findEmptyPosition _args;" 
    end

    # Check if findEmptyPosition can be called without waiting for files
    # 
    # ==== Syntax
    #
    #      center findEmptyPositionReady [radius,maxDistance]
    #
    # ==== Parameters
    # 
    # *    +center+ - Array -  
    # *    +[radius,maxDistance]+ - Array -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/findEmptyPositionReady
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def findEmptyPositionReady _obj, _args
      "_obj findEmptyPositionReady _args;" 
    end

    # Find the nearest enemy to the specified position.
    # 
    # ==== Description
    # 
    # Returns a null object if the object's group does not know about any enemies
    #  
    # ==== Syntax
    #
    #      object findNearestEnemy position
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +position+ - Object or Array  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/findNearestEnemy
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _myNearestEnemy = (units _myGroup select 0) findNearestEnemy player
    # 
    def findNearestEnemy _obj, _args
      "_obj findNearestEnemy _args;" 
    end

    # Finish world initialization before mission is launched
    # 
    # ==== Syntax
    #
    #      finishMissionInit
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #startLoadingScreen, #endLoadingScreen
    # 
    # Official Wiki: https://community.bistudio.com/wiki/finishMissionInit
    #
    # ==== Examples
    # 
    def finishMissionInit 
      "finishMissionInit" 
    end

    # True, if number is finite (not infinite and a valid number)
    # 
    # ==== Syntax
    #
    #      Boolean = finite x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/finite
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?!finite 10/0 : hint "Infinite"
    # 
    def finite _args
      "finite _args;" 
    end

    # Forces a unit to fire the given weapon.
    # 
    # ==== Description
    # 
    # NOTE: Just like with forceWeaponFire it is possible to pass remote unit as argument, but this could be unreliable.
    # 
    # Considering this command might need to be used in combination with selectWeapon, which takes only local arguments, it would make sense to execute fire command where unit is also local
    #  
    # ==== Syntax
    #
    #      unit fire [muzzle, mode, magazine]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - unit that's supposed to fire  
    # *    +weaponName+ - String - name of the weapon to be fired  
    # *    +unit+ - Object  
    # *    +[muzzle, mode, magazine]+ - Array  
    # *    +muzzle+ - String  
    # *    +mode+ - String  
    # *    +magazine+ - String (Optional)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #forceWeaponFire, #selectWeapon, #fireAtTarget, #doFire, #commandFire, #action ["UseWeapon"], Category:Weapons
    # 
    # Official Wiki: https://community.bistudio.com/wiki/fire
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier fire "M16";
    # 
    # ====== Example 2:
    # 
    #    _soldier fire "SmokeShellMuzzle";
    # 
    # ====== Example 3:
    # 
    #    _soldier fire ["SmokeShellMuzzle","SmokeShellMuzzle","SmokeShell"];
    # 
    # ====== Example 4:
    # 
    #    player playActionNow "PutDown";
    #    player selectWeapon "DemoChargeMuzzle";
    #    player fire ["DemoChargeMuzzle", "DemoChargeMuzzle", "DemoCharge_Remote_Mag"];
    #    player setWeaponReloadingTime [player, "DemoChargeMuzzle", 0];
    # 
    def fire _obj, _args
      "_obj fire _args;" 
    end

    # Remotely forces a unit to fire the given weapon
    # 
    # ==== Syntax
    #
    #      Script = sourceVehicle fireAtTarget [targetVehicle,weaponClassName]
    #
    # ==== Parameters
    # 
    # *    +sourceVehicle+ - Object - source vehicle to fire from  
    # *    +targetVehicle+ - Object - target vehicle to fire at  
    # *    +WeaponClassName+ - String - weapon classname, optional parameter  
    #
    # ==== Returns
    #
    #      Script - script handle, which can be used to determine (via scriptDone) when the called script has finished.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #fire, #laserTarget
    # 
    # Official Wiki: https://community.bistudio.com/wiki/fireAtTarget
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _handle = this fireAtTarget [groundtarget1,"HellfireLauncher"];
    # 
    # ====== Example 2:
    # 
    #    _handle = Igla_AA_pod_TK_EP1 fireAtTarget [_helicopter,currentweapon Igla_AA_pod_TK_EP1];
    # 
    # ====== Example 3:
    # 
    #    _handle = Igla_AA_pod_TK_EP1 fireAtTarget [helicopter];
    # 
    def fireAtTarget _obj, _args
      "_obj fireAtTarget _args;" 
    end

    # Returns the first stored backpack
    # 
    # ==== Syntax
    #
    #      firstBackpack box
    #
    # ==== Parameters
    # 
    # *    +box+ - Object  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/firstBackpack
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def firstBackpack _args
      "firstBackpack _args;" 
    end

    # Returns the flag the unit is carrying
    # 
    # ==== Syntax
    #
    #      Object = flag unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Object -Returns the flag. If the unit carries no flag, objNull is returned.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Flag Textures, #flagOwner, #setFlagOwner, #setFlagSide, #setFlagTexture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/flag
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _flag = flag _soldier;
    # 
    def flag _args
      "flag _args;" 
    end

    # Returns the owner of a flag
    # 
    # ==== Syntax
    #
    #      Object = flagOwner flag
    #
    # ==== Parameters
    # 
    # *    +flag+ - Object  
    #
    # ==== Returns
    #
    #      Object -The person or vehicle that owns the flag is returned. If used on anything else than a flag, the returned value is objNull.If the flag is on its pole, the return value is NULL.If the flagowner is dead, the return value is the name of the soldier model.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Flag Textures, #flag, #setFlagOwner, #setFlagSide, #setFlagTexture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/flagOwner
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _person = flagOwner _flagOne;
    # 
    def flagOwner _args
      "flagOwner _args;" 
    end

    # Checks if a unit is fleeing
    # 
    # ==== Syntax
    #
    #      Boolean = fleeing unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Boolean -Returns true if a unit is fleeing, false if not. Dead or empty units return false.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #allowFleeing
    # 
    # Official Wiki: https://community.bistudio.com/wiki/fleeing
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? (fleeing _east_unit) : player sideChat "We have won!"
    # 
    def fleeing _args
      "fleeing _args;" 
    end

    # Returns the next lowest integer in relation to x
    # 
    # ==== Syntax
    #
    #      Number = floor x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands: ceil, #round
    # 
    # Official Wiki: https://community.bistudio.com/wiki/floor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    floor 5.25
    #    Result is 5
    # 
    # ====== Example 2:
    # 
    #    floor -5.25
    #    Result is -6
    # 
    def floor _args
      "floor _args;" 
    end

    # Sets the flying altitude for aircraft relatively to the ground surface.
    # 
    # ==== Description
    # 
    # Avoid too low altitudes, as helicopters and planes won't evade trees and obstacles on the ground.
    # 
    # The default flying altitude is 100 meters
    #  
    # ==== Syntax
    #
    #      aircraft flyInHeight altitude
    #
    # ==== Parameters
    # 
    # *    +aircraft+ - Object  
    # *    +altitude+ - Number - flying altitude in meters  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/flyInHeight
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _helicopter flyInHeight 40
    # 
    def flyInHeight _obj, _args
      "_obj flyInHeight _args;" 
    end

    # Return the current fog
    # 
    # ==== Syntax
    #
    #      Number = fog
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # This command returns the local fog value. Each client and the server can have differing values.
    # 
    # ==== See Also
    # 
    # #fogParams, #fogForecast, #setFog, #setFog array, #nextWeatherChange
    # 
    # Official Wiki: https://community.bistudio.com/wiki/fog
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _foglevel = fog;
    # 
    def fog 
      "fog" 
    end

    # Returns the forecast fog value.
    # 
    # ==== Description
    # 
    # A value of 0 means no fog, 1 means maximum fog
    #  
    # ==== Syntax
    #
    #      Number = fogForecast
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # This command returns the local forcast fog value. Each client and the server can have differing values.
    # 
    # ==== See Also
    # 
    # #fogParams, #fog, #setFog, #setFog array, #nextWeatherChange
    # 
    # Official Wiki: https://community.bistudio.com/wiki/fogForecast
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _level = fogForecast;
    # 
    def fogForecast 
      "fogForecast" 
    end

    # Returns actual params for fog.
    # 
    # ==== Description
    # 
    # 
    # 
    # You can use this command in combination with setFog_array to sync server fog with clients
    #  
    # ==== Syntax
    #
    #      fogParams
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array - [fogValue, fogDecay, fogBase]
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setFog_array, #setFog, #fog, #fogForecast
    # 
    # Official Wiki: https://community.bistudio.com/wiki/fogParams
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    //server
    #    server_fog = fogParams;
    #    publicVariable "server_fog";
    #    //client
    #    0 setFog server_fog;
    # 
    def fogParams 
      "fogParams" 
    end

    # Executes the given command(s) on every item of an array.
    # 
    # ==== Description
    # 
    # The array items are represented by the magic variable _x.
    # 
    # The array indices are represented by _forEachIndex.
    # 
    # In ArmA2 & VBS2, the variable _x is always local to the forEach block so it is safe to nest them
    #  
    # ==== Syntax
    #
    #      command forEach array
    #
    # ==== Parameters
    # 
    # *    +command+ - String (only in Operation Flashpoint), Code (since Armed Assault)  
    # *    +array+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #count, Control Structures
    # 
    # Official Wiki: https://community.bistudio.com/wiki/forEach
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    { _x setDammage 1; } forEach units group player;
    # 
    # ====== Example 2:
    # 
    #    This command can also easily be used to execute a single command multiple times without respect to the array items.
    #    { player addMagazine "M16"; } forEach [1, 2, 3, 4];
    # 
    # ====== Example 3:
    # 
    #    You can also use multiple commands in the same block.
    #    {
    #        _x setCaptive true;
    #        removeAllWeapons _x;
    #        doStop _x;
    #    } forEach units group this;
    # 
    def forEach _obj, _args
      "_obj forEach _args;" 
    end

    # Executes the given command for each member of the team (recursively)
    # 
    # ==== Syntax
    #
    #      command forEachMember team
    #
    # ==== Parameters
    # 
    # *    +command+ - Code  
    # *    +team+ - Team Member  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/forEachMember
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def forEachMember _obj, _args
      "_obj forEachMember _args;" 
    end

    # Executes the given command for each agent member of the team (recursively)
    # 
    # ==== Syntax
    #
    #      command forEachMemberAgent team
    #
    # ==== Parameters
    # 
    # *    +command+ - Code  
    # *    +team+ - Team Member  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #agent, #agents, #createAgent, #isAgent
    # 
    # Official Wiki: https://community.bistudio.com/wiki/forEachMemberAgent
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def forEachMemberAgent _obj, _args
      "_obj forEachMemberAgent _args;" 
    end

    # Executes the given command for each team member of the team (recursively)
    # 
    # ==== Syntax
    #
    #      command forEachMemberTeam team
    #
    # ==== Parameters
    # 
    # *    +command+ - Code  
    # *    +team+ - Team Member  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addTeamMember, #createTeam, #deleteTeam, #removeTeamMember, #teamMember, #teamMemberNull, #teamName, #teams, #teamType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/forEachMemberTeam
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def forEachMemberTeam _obj, _args
      "_obj forEachMemberTeam _args;" 
    end

    # Enforces mission termination.
    # 
    # ==== Description
    # 
    # Can be used in an "END" trigger to force end conditions in the editor
    #  
    # ==== Syntax
    #
    #      forceEnd
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #failMission, #endMission
    # 
    # Official Wiki: https://community.bistudio.com/wiki/forceEnd
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (_TerritoryLost) then {forceEnd}
    # 
    def forceEnd 
      "forceEnd" 
    end

    # Displays the map on the screen during a mission
    # 
    # ==== Syntax
    #
    #      forceMap show
    #
    # ==== Parameters
    # 
    # *    +show+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #showMap, #shownMap, #openMap, #visibleMap
    # 
    # Official Wiki: https://community.bistudio.com/wiki/forceMap
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    forceMap true
    # 
    def forceMap _args
      "forceMap _args;" 
    end

    # Forces unit to respawn.
    # 
    # ==== Description
    # 
    # The effect as if the player pressed RESPAWN button in the game pause menu only there is no "so and so was killed" message
    #  
    # ==== Syntax
    #
    #      forceRespawn unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #playerRespawnTime, #setPlayerRespawnTime
    # 
    # Official Wiki: https://community.bistudio.com/wiki/forceRespawn
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    forceRespawn player;
    # 
    def forceRespawn _args
      "forceRespawn _args;" 
    end

    # Force the speed limit on given object (object will never attempt to move faster than given by forceSpeed).
    # 
    # ==== Description
    # 
    # Use negative value to return to default behaviour.
    # 
    # Used unit is m/s
    #  
    # ==== Syntax
    #
    #      object forceSpeed speed
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +speed+ - Number (in m/s)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/forceSpeed
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _helicopter forceSpeed 150
    # 
    def forceSpeed _obj, _args
      "_obj forceSpeed _args;" 
    end

    # Makes the unit walk, without possibility to run.
    # 
    # ==== Description
    # 
    # Note, you still can sprint
    #  
    # ==== Syntax
    #
    #      unit forceWalk value
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - the unit forced to walk  
    # *    +value+ - Boolean - true/false  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #isForcedWalk, #isWalking
    # 
    # Official Wiki: https://community.bistudio.com/wiki/forceWalk
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player forceWalk true
    # 
    def forceWalk _obj, _args
      "_obj forceWalk _args;" 
    end

    # The unit will be forced to fire from the given weapon.
    # 
    # ==== Description
    # 
    # The weapon will not fire if firemode passed as parameter is not supported by the weapon.
    # 
    # Command must be executed where unit is local
    #  
    # ==== Syntax
    #
    #      unit forceWeaponFire [weapon, firemode]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +[weapon, firemode]+ - Array  
    # *    +weapon+ - String  
    # *    +firemode+ - String - Possible options are "Single", "Burst" and "FullAuto".  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #currentWeapon, #currentWeaponMode, #fire, #setWeaponReloadingTime, #selectWeapon
    # 
    # Official Wiki: https://community.bistudio.com/wiki/forceWeaponFire
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    soldierOne forceWeaponFire ["arifle_MX_F", "Single"];
    # 
    # ====== Example 2:
    # 
    #    _unit forceWeaponFire ["HandGrenadeMuzzle","HandGrenadeMuzzle"];
    #    _unit forceWeaponFire ["MiniGrenadeMuzzle","MiniGrenadeMuzzle"];
    #    _unit forceWeaponFire ["HandGrenade_Stone","HandGrenade_Stone"];
    #    _unit forceWeaponFire ["SmokeShellMuzzle","SmokeShellMuzzle"];
    #    _unit forceWeaponFire ["ChemlightGreenMuzzle","ChemlightGreenMuzzle"];
    #    _unit forceWeaponFire ["IRGrenade","IRGrenade"];
    # 
    def forceWeaponFire _obj, _args
      "_obj forceWeaponFire _args;" 
    end

    # Returns the formation leader of a given unit.
    # 
    # ==== Description
    # 
    # This is often the same as the group leader, but not always, for example in cases when a unit is ordered to follow another unit
    #  
    # ==== Syntax
    #
    #      Object = formLeader unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Object -the leader of the formation is returned. If used on a dead unit, the returned value is objNull
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #formationLeader, #leader, #isFormationLeader, #selectLeader
    # 
    # Official Wiki: https://community.bistudio.com/wiki/formLeader
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? (formLeader player != leader player) :
    #     hint "The formation leader is different to the group leader!"
    #    returns X
    # 
    def formLeader _args
      "formLeader _args;" 
    end

    # Composes a string containing other variables or other variable types.
    # 
    # ==== Description
    # 
    # Converts any variable type to a string.
    # 
    # If you want to convert a string back to a number, use parseNumber
    #  
    # ==== Syntax
    #
    #      String = format [formatString, var1, var2 ...]
    #
    # ==== Parameters
    # 
    # *    +formatString+ - String - a string containing text and/or references to the variables listed below in the array. The references appear in the form of %1, %2 etc.  
    # *    +var1+ - Any Value - variable referenced by %1  
    # *    +var2+ - Any Value - variable referenced by %2  
    #
    # ==== Returns
    #
    #      String -The full string is returned.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/format
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    format ["Player:%1, player's side:%2", player, side player];
    #    returns "Player:WEST 1-1-A:1 (Username), player's side:WEST"
    # 
    # ====== Example 2:
    # 
    #    player addEventHandler ["HandleDamage", {
    #    	hint format ["You just sustained %1%2 damage!", ceil ((_this select 2) * 100), "%"];
    #    }];
    #    hints "You just sustained 20% damage!"
    # 
    def format _args
      "format _args;" 
    end

    # Creates a structured text by replacing %1, %2, etc.
    # 
    # ==== Description
    # 
    # in format with plain or structured texts given as arguments
    #  
    # ==== Syntax
    #
    #      Structured Text = formatText [format, arg1, arg2, ...]
    #
    # ==== Parameters
    # 
    # *    +format+ - String  
    #
    # ==== Returns
    #
    #      Structured Text
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/formatText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _text = formatText ["Image: %1", image "data\isniper.paa"]
    # 
    def formatText _args
      "formatText _args;" 
    end

    # Returns the current formation of a group
    # 
    # ==== Syntax
    #
    #      String = formation grp
    #
    # ==== Parameters
    # 
    # *    +grp+ - Object or Group  
    #
    # ==== Returns
    #
    #      String -  returns either "COLUMN", "STAG COLUMN", "WEDGE", "ECH LEFT", "ECH RIGHT", "VEE" or "LINE"
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #formations description, #formLeader, #setFormation
    # 
    # Official Wiki: https://community.bistudio.com/wiki/formation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    formation group player
    # 
    def formation _args
      "formation _args;" 
    end

    # Return the direction in degrees of the 'unit' watching in formation
    # 
    # ==== Syntax
    #
    #      Number = formationDirection unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # Unit must be local.
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/formationDirection
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _degrees = FormationDirection _unit
    # 
    def formationDirection _args
      "formationDirection _args;" 
    end

    # Return leader of the formation
    # 
    # ==== Syntax
    #
    #      Object = formationLeader unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #formLeader, #leader, #isFormationLeader, #selectLeader
    # 
    # Official Wiki: https://community.bistudio.com/wiki/formationLeader
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? (formationLeader player != leader player) :
    #     hint "Formation leader is not the group leader."
    # 
    def formationLeader _args
      "formationLeader _args;" 
    end

    # Return list of units (drivers) in the formation
    # 
    # ==== Syntax
    #
    #      Array = formationMembers person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/formationMembers
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _drivers=FormationMembers _person
    # 
    def formationMembers _args
      "formationMembers _args;" 
    end

    # Return position of unit in the formation
    # 
    # ==== Syntax
    #
    #      Array = formationPosition person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    #
    # ==== Returns
    #
    #      Array - format Position
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/formationPosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _pos=FormationPosition _person
    # 
    def formationPosition _args
      "formationPosition _args;" 
    end

    # Return the current task of the unit in the formation.
    # 
    # ==== Description
    # 
    # 
    # 
    # You can't use it in ArmA 2, it will always returns "NOTHING"
    #  
    # ==== Syntax
    #
    #      String = formationTask person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    #
    # ==== Returns
    #
    #      String: (EXCLUDED, MOVE, COVER, LEADER)
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setFormationTask
    # 
    # Official Wiki: https://community.bistudio.com/wiki/formationTask
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _CurrentTask = FormationTask _person 
    # 
    def formationTask _args
      "formationTask _args;" 
    end

    # Returns true if freelook is active
    # 
    # ==== Syntax
    #
    #      freeLook
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/freeLook
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def freeLook 
      "freeLook" 
    end

    # Continue sequence of for var command
    # 
    # ==== Syntax
    #
    #      for "_var" from b
    #
    # ==== Parameters
    # 
    # *    +for "_var"+ - For Type  
    # *    +b+ - Number  
    #
    # ==== Returns
    #
    #      For Type
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Control Structures
    # 
    # Official Wiki: https://community.bistudio.com/wiki/from
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    for "_x" from 10 to 20 do {..code..}
    # 
    def from _obj, _args
      "_obj from _args;" 
    end

    # Return if given team was inserted directly from mission editor
    # 
    # ==== Syntax
    #
    #      fromEditor teamMember
    #
    # ==== Parameters
    # 
    # *    +teamMember+ - Team Member  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/fromEditor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _fromEditor = fromEditor _member
    # 
    def fromEditor _args
      "fromEditor _args;" 
    end

    # Checks how much fuel is left in the gas tank of a vehicle
    # 
    # ==== Syntax
    #
    #      Number = fuel vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Number -The returned number is in range 0 (empty tank) to 1 (full tank).
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setFuel
    # 
    # Official Wiki: https://community.bistudio.com/wiki/fuel
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?(fuel (vehicle player) == 0) : hint "The vehicle is out of fuel!"
    # 
    def fuel _args
      "fuel _args;" 
    end

    # Returns gear slot item name
    # 
    # ==== Syntax
    #
    #      gearSlotData control
    #
    # ==== Parameters
    # 
    # *    +control+ - Control -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/gearSlotData
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    Open any ammobox and click by any gear slots
    #    private "_dspl";
    #    disableSerialization;
    #    waitUntil {
    #        _dspl = findDisplay 106;
    #        ! isNull _dspl;
    #    };
    #    uiNamespace setVariable ["/VDMJ/RscDisplayGear/SlotDataEH", {
    #        _self = _this select 0;
    #        _weaponName = gearSlotData _self;
    #        _conf = configFile >> _confSection >> _weaponName;
    #        _name = getText(_conf >> "displayName");
    #        _desc = getText(_conf >> "Library" >> "libTextDesc");
    #        _image = getText(_conf >> "picture");
    #        hint parseText format[
    #            '<t size="1.3" align="center" shadow="true" shadowColor="#000000">%1</t><br /><img image="%2" size="6" align="center" /><br />%3<br />%4',
    #            _name, _image, _desc
    #        ];
    #    }];
    #    for "_i" from 107 to 145 do {
    #        _dspl displayCtrl _i ctrlAddEventHandler ["ButtonClick",
    #            format [
    #                '_confSection = "%1"; _this call (uiNamespace getVariable "/VDMJ/RscDisplayGear/SlotDataEH");',
    #                if( _i >= 109 && _i <= 129 ) then { "CfgMagazines" } else { "CfgWeapons" }
    #            ]
    #        ];
    #    };
    # 
    def gearSlotData _args
      "gearSlotData _args;" 
    end

    # Returns the amount of ammo resources in the cargo space of a repair vehicle
    # 
    # ==== Syntax
    #
    #      getAmmoCargo vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setAmmoCargo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getAmmoCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    value = getAmmoCargo myVehicleName;
    # 
    def getAmmoCargo _args
      "getAmmoCargo _args;" 
    end

    # Extract array from config entry
    # 
    # ==== Syntax
    #
    #      Array = getArray config
    #
    # ==== Parameters
    # 
    # *    +config+ - Config  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #configFile, #config/name, #configName, #count, #getText, #getNumber, #inheritsFrom, #isArray, #isClass, #isNumber, #isText, #select
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getArray
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _array = getArray (configFile >> "CfgVehicles" >> "Thing" >> "threat")
    # 
    def getArray _args
      "getArray _args;" 
    end

    # Get list of all available magazines of artillery units on the list.
    # 
    # ==== Description
    # 
    # Command returns only unique magazine types and doesn't contain any information about which unit has which magazine
    #  
    # ==== Syntax
    #
    #      getArtilleryAmmo [unit1, unit2, unit3....]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getArtilleryETA, #commandArtilleryFire, #doArtilleryFire, #enableEngineArtillery, #getArtilleryComputerSettings, #shownArtilleryComputer, #inRangeOfArtillery
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getArtilleryAmmo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if ("8Rnd_82mm_Mo_Flare_white" in getArtilleryAmmo [
    #    	_mortar1,
    #    	_mortar2,
    #    	_mortar3, 
    #    	_mortar4
    #    ]) then {
    #    	hint "Sir, we have white flares, sir!";
    #    };
    # 
    def getArtilleryAmmo _args
      "getArtilleryAmmo _args;" 
    end

    # Returns settings from artillery computer currently opened by player
    # 
    # ==== Syntax
    #
    #      getArtilleryComputerSettings
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #shownArtilleryComputer, #enableEngineArtillery, #commandArtilleryFire, #doArtilleryFire, #getArtilleryETA, #inRangeOfArtillery, #getArtilleryAmmo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getArtilleryComputerSettings
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def getArtilleryComputerSettings 
      "getArtilleryComputerSettings" 
    end

    # Returns ETA to the target in seconds for given artillery unit based on target position and used magazine
    # 
    # ==== Syntax
    #
    #      unit getArtilleryETA [targetPosition, magazineType]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - artillery unit  
    # *    +targetPosition+ - Position - position of the target  
    # *    +magazineType+ - String - type of magazine used  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getArtilleryAmmo, #commandArtilleryFire, #doArtilleryFire, #enableEngineArtillery, #getArtilleryComputerSettings, #shownArtilleryComputer, #inRangeOfArtillery
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getArtilleryETA
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _mortar getArtilleryETA [getPos _target, getArtilleryAmmo [_mortar] select 0];
    # 
    # ====== Example 2:
    # 
    #    _mortar getArtilleryETA [position _target, currentMagazine _mortar];
    # 
    def getArtilleryETA _obj, _args
      "_obj getArtilleryETA _args;" 
    end

    # Returns curator logic to which has given player access
    # 
    # ==== Syntax
    #
    #      getAssignedCuratorLogic player
    #
    # ==== Parameters
    # 
    # *    +player+ - Object  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getAssignedCuratorLogic
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def getAssignedCuratorLogic _args
      "getAssignedCuratorLogic _args;" 
    end

    # Returns unit assigned to curator logic
    # 
    # ==== Syntax
    #
    #      getAssignedCuratorUnit curatorObj
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getAssignedCuratorUnit
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def getAssignedCuratorUnit _args
      "getAssignedCuratorUnit _args;" 
    end

    # Returns all backpack types and count from the cargo space
    # 
    # ==== Syntax
    #
    #      result = getBackpackCargo object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object - object to check  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addBackpackCargo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getBackpackCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _content = getBackpackCargo carName; 
    # 
    # ====== Example 2:
    # 
    #    _content = getBackpackCargo ammoBoxName;
    # 
    def getBackpackCargo _args
      "getBackpackCargo _args;" 
    end

    # Returns remaining time of bleeding
    # 
    # ==== Syntax
    #
    #      getBleedingRemaining unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getBleedingRemaining
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def getBleedingRemaining _args
      "getBleedingRemaining _args;" 
    end

    # Returns amount of damage from fire
    # 
    # ==== Syntax
    #
    #      getBurningValue unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getBurningValue
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def getBurningValue _args
      "getBurningValue _args;" 
    end

    # Returns center of mass of a PhysX object
    # 
    # ==== Syntax
    #
    #      getCenterOfMass object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Array - [x,y,z] offset relative to the model centre
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getMass, #setCenterOfMass, #setMass
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getCenterOfMass
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _com = getCenterOfMass _myCar
    # 
    def getCenterOfMass _args
      "getCenterOfMass _args;" 
    end

    # Returns client state in network game.
    # 
    # ==== Description
    # 
    # Works on both, client and dedicated server
    #  
    # ==== Syntax
    #
    #      getClientState
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      String - Client state. Possible values are:NONE - no client (or singleplayer)CREATED - client is createCONNECTED - client is connected to server, message formats are registeredLOGGED IN - identity is createdMISSION SELECTED - mission is selectedMISSION ASKED - server was asked to send / not send missionROLE ASSIGNED - role was assigned (and confirmed)MISSION RECEIVED - mission receivedGAME LOADED - island loaded, vehicles receivedBRIEFING SHOWN - briefing was displayedBRIEFING READ - ready to play missionGAME FINISHED - game was finishedDEBRIEFING READ - debriefing read, ready to continue with next mission
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getPlayerUID
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getClientState
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _state = getClientState;
    # 
    def getClientState 
      "getClientState" 
    end

    # Returns UAV if unit has connection to some UAV
    # 
    # ==== Syntax
    #
    #      getConnectedUav unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #showUavFeed, #shownUavFeed, #allUnitsUav, #isUavConnected, #uavControl
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getConnectedUav
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def getConnectedUav _args
      "getConnectedUav _args;" 
    end

    # Returns the object damage in the range from 0 to 1
    # 
    # ==== Syntax
    #
    #      Number = getDammage object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #damage, #setDamage, #setDammage
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getDammage
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _damage= getDammage player 
    # 
    def getDammage _args
      "getDammage _args;" 
    end

    # Returns the string representation of unit as an four slots array
    # 
    # ==== Syntax
    #
    #      getDescription unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array - [unit, uniform, vest, backpack]
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getDescription
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def getDescription _args
      "getDescription _args;" 
    end

    # Returns the unit heading in the range from 0 to 360
    # 
    # ==== Syntax
    #
    #      Number = getDir object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #direction
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getDir
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _degrees = getDir player  
    # 
    def getDir _args
      "getDir _args;" 
    end

    # Fetches a reference to the mission editor camera
    # 
    # ==== Syntax
    #
    #      getEditorCamera map
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getEditorCamera
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def getEditorCamera _args
      "getEditorCamera _args;" 
    end

    # Returns the current mode of the editor
    # 
    # ==== Syntax
    #
    #      getEditorMode map
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getEditorMode
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def getEditorMode _args
      "getEditorMode _args;" 
    end

    # Returns the editor object scope of the specified editor object
    # 
    # ==== Syntax
    #
    #      map getEditorObjectScope object
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +object+ - String -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getEditorObjectScope
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def getEditorObjectScope _obj, _args
      "_obj getEditorObjectScope _args;" 
    end

    # Returns the map elevation offset from [map]/config.
    # 
    # ==== Description
    # 
    # cpp.
    # 
    # Returns 0 if there's no elevationOffset defined in the config of the current world
    #  
    # ==== Syntax
    #
    #      getElevationOffset
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number - elevation offset of the map
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getElevationOffset
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _offset = getElevationOffset;
    # 
    def getElevationOffset 
      "getElevationOffset" 
    end

    # Return the value of variable in the variable space of given FSM.
    # 
    # ==== Description
    # 
    # The FSM handle is the number returned by the execFSM command
    #  
    # ==== Syntax
    #
    #      FSM handle getFSMVariable name
    #
    # ==== Parameters
    # 
    # *    +FSM handle+ - Number -  
    # *    +name+ - String -  
    #
    # ==== Returns
    #
    #      Any
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # FSM, #commandFSM, #completedFSM, #doFSM execFSM, #setFSMVariable
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getFSMVariable
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def getFSMVariable _obj, _args
      "_obj getFSMVariable _args;" 
    end

    # Returns fatigue of given unit
    # 
    # ==== Syntax
    #
    #      getFatigue unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setFatigue, #enableFatigue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getFatigue
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     value = getFatigue player;
    # 
    # ====== Example 2:
    # 
    #     if (getFatigue player < 0.5) Then { player sideChat "I'm good to go!" };
    # 
    def getFatigue _args
      "getFatigue _args;" 
    end

    # Returns if sides are friendly or hostile.
    # 
    # ==== Description
    # 
    # For a value smaller than 0.
    # 
    # 6 it results in being enemy, otherwise it's friendly
    #  
    # ==== Syntax
    #
    #      side1 getFriend side2
    #
    # ==== Parameters
    # 
    # *    +side1+ - Side  
    # *    +side2+ - Side  
    #
    # ==== Returns
    #
    #      Number: Decimal value between 0.0 to 1.0
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setFriend
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getFriend
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    value = west getFriend east
    # 
    # ====== Example 2:
    # 
    #    isEnemy = ((side _killer) getFriend (side _victim) < 0.6)
    # 
    def getFriend _obj, _args
      "_obj getFriend _args;" 
    end

    # Returns the fuel amount (between 0 and 1) in the cargo space of a refuelling vehicle
    # 
    # ==== Syntax
    #
    #      getFuelCargo vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setFuelCargo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getFuelCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    value = getFuelCargo myVehicleName;
    # 
    def getFuelCargo _args
      "getFuelCargo _args;" 
    end

    # Get group icon properties
    # 
    # ==== Syntax
    #
    #      group getGroupIcon ID
    #
    # ==== Parameters
    # 
    # *    +group+ - Group -  
    # *    +ID+ - Number -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addGroupIcon, #clearGroupIcons, #getGroupIconParams, #groupIconSelectable, #groupIconsVisible, #onGroupIconClick, #removeGroupIcon, #setGroupIcon, #setGroupIconParams, #setGroupIconsSelectable, #setGroupIconsVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getGroupIcon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _grpIconId = _group getVariable "BIS_MARTA_ICON_TYPE";
    #    _grpIcon = _group getGroupIcon _grpIconId;
    # 
    def getGroupIcon _obj, _args
      "_obj getGroupIcon _args;" 
    end

    # Returns group icons params.
    # 
    # ==== Description
    # 
    # [color,text,scale,visible]
    #  
    # ==== Syntax
    #
    #      getGroupIconParams group
    #
    # ==== Parameters
    # 
    # *    +group+ - Group -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addGroupIcon, #clearGroupIcons, #getGroupIcon, #groupIconSelectable, #groupIconsVisible, #onGroupIconClick, #removeGroupIcon, #setGroupIcon, #setGroupIconParams, #setGroupIconsSelectable, #setGroupIconsVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getGroupIconParams
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _icon = _this getVariable "icon";
    #    //[color,text,scale,visible]
    #    _params = getGroupIconParams _icon;
    #    _color         = _params select 0;
    #    _text         = _params select 1;
    #    _scale         = _params select 2;
    #    _visible     = _params select 3;
    # 
    def getGroupIconParams _args
      "getGroupIconParams _args;" 
    end

    # Returns all group icons.
    # 
    # ==== Description
    # 
    # [id,icon,[offsetx,offsety],[.
    # 
    # .
    # 
    # ],.
    # 
    # .
    # 
    # ]
    #  
    # ==== Syntax
    #
    #      getGroupIcons group
    #
    # ==== Parameters
    # 
    # *    +group+ - Group -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getGroupIcons
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def getGroupIcons _args
      "getGroupIcons _args;" 
    end

    # Returns the Position where object believes the enemy to be, presumably by extrapolating the expected postion based on the last known position and speed of the enemy.
    # 
    # ==== Description
    # 
    # A returned position of [0,0,0] implies that object does not knowAbout enemy.
    # 
    # If enemy is null it is some position in front of the object or enemy position.
    # 
    # This command is part of getHideFrom, findCover, setHideBehind non-functional trio
    #  
    # ==== Syntax
    #
    #      Array = object getHideFrom enemy
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +enemy+ - Object  
    #
    # ==== Returns
    #
    #      Array - format getHideFrom - The array represents some kind of position, however Z coordinate is raised, possibly for  futher use in findCover and setHideBehind commands.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #findCover, #setHideBehind, #isHidden
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getHideFrom
    #
    # ==== Examples
    # 
    def getHideFrom _obj, _args
      "_obj getHideFrom _args;" 
    end

    # Return current level of damage for a specific Hit Point (specified by its config class).
    # 
    # ==== Description
    # 
    # 0: no damage
    # 
    # 1: full damage
    #  
    # ==== Syntax
    #
    #      vehicle getHitPointDamage hitPointName
    #
    # ==== Parameters
    # 
    # *    +vehicle + - Object - vehicle to be queried  
    # *    +hitPointName+ - String - name of the Hit Point class  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setHitPointDamage
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getHitPointDamage
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (vehicle player) getHitPointDamage "hitEngine";
    # 
    def getHitPointDamage _obj, _args
      "_obj getHitPointDamage _args;" 
    end

    # Returns all items names and count from ammo box (or any general weapon holder container)
    # 
    # ==== Syntax
    #
    #      getItemCargo box
    #
    # ==== Parameters
    # 
    # *    +box+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getItemCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def getItemCargo _args
      "getItemCargo _args;" 
    end

    # Returns all magazines types and count from the cargo space
    # 
    # ==== Syntax
    #
    #      result = getMagazineCargo object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object - object to check  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazineCargo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getMagazineCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _content = getMagazineCargo carName; 
    # 
    # ====== Example 2:
    # 
    #    _content = getMagazineCargo ammoBoxName;
    # 
    # ====== Example 3:
    # 
    #    hint str getMagazineCargo unitBackpack cursorTarget;
    # 
    def getMagazineCargo _args
      "getMagazineCargo _args;" 
    end

    # Returns the color of a given map marker
    # 
    # ==== Syntax
    #
    #      String = getMarkerColor markerName
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String - marker name  
    #
    # ==== Returns
    #
    #      String -The returned color is one of "Default", "ColorBlack", "ColorRed", "ColorRedAlpha", "ColorGreen", "ColorGreenAlpha", "ColorBlue", "ColorYellow" and "ColorWhite"
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setMarkerColor
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getMarkerColor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "MarkerOne" setMarkerColor "ColorBlack"
    #    _color = getMarkerColor "MarkerOne"
    #    returns "ColorBlack"
    # 
    def getMarkerColor _args
      "getMarkerColor _args;" 
    end

    # Returns the position of a given marker.
    # 
    # ==== Description
    # 
    # [x,y,z]
    # 
    # Argument 3 (height above ground) is always zero.
    # 
    # If a non-existing marker is referenced the values returned are [0,0,0]
    #  
    # ==== Syntax
    #
    #      Array = getMarkerPos markerName
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    #
    # ==== Returns
    #
    #      Array - (format Position3D)
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setMarkerPos
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getMarkerPos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "MarkerOne" setMarkerPos [200,100]
    #    _pos = getMarkerPos "MarkerOne"
    #    returns [200,100,0]
    # 
    def getMarkerPos _args
      "getMarkerPos _args;" 
    end

    # Returns the size of a given marker
    # 
    # ==== Syntax
    #
    #      Array = getMarkerSize markerName
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    #
    # ==== Returns
    #
    #      Array -The returned array contains two values: [a,b] where a is the size in the markers x-axis, b the size in its y-axis (in meters).
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setMarkerSize, #setMarkerBrush, #setMarkerColor, #setMarkerDir, #setMarkerPos, #setMarkerShape, #createMarker, #setMarkerText, #setMarkerType, #setMarkerAlpha
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getMarkerSize
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "MarkerOne" setMarkerSize [100,200]
    #    _size = getMarkerSize "MarkerOne"
    #    returns [100,200]
    # 
    def getMarkerSize _args
      "getMarkerSize _args;" 
    end

    # Returns the type of a given marker.
    # 
    # ==== Description
    # 
    # See cfgMarkers for a list of standard markers
    #  
    # ==== Syntax
    #
    #      String =  getMarkerType markerName
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    #
    # ==== Returns
    #
    #      String. See cfgMarkers.If the marker does not exist, the returned type is an empty string, ie ""
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #cfgMarkers, #markerType, #setMarkerType, #setMarkerTypeLocal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getMarkerType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "MarkerOne" setMarkerType "Destroy"
    #    _type = getMarkerType "MarkerOne"
    #    returns "Destroy"
    # 
    def getMarkerType _args
      "getMarkerType _args;" 
    end

    # Returns mass of a PhysX object
    # 
    # ==== Syntax
    #
    #      getMass object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getCenterOfMass, #setCenterOfMass, #setMass
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getMass
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _mass = getMass _myCar
    # 
    def getMass _args
      "getMass _args;" 
    end

    # Extract number from config entry
    # 
    # ==== Syntax
    #
    #      Number =getNumber config
    #
    # ==== Parameters
    # 
    # *    +config+ - Config  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #configFile, #config/name, #configName, #count, #getArray, #getText, #inheritsFrom, #isArray, #isClass, #isNumber, #isText, #select
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getNumber
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _value = getNumber (configFile >> "CfgVehicles" >> "Thing" >> "maxSpeed")
    # 
    def getNumber _args
      "getNumber _args;" 
    end

    # Return name of object argument in mission editor
    # 
    # ==== Syntax
    #
    #      map getObjectArgument [object, argument]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control  
    # *    +object+ - Object  
    # *    +argument+ - String  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getObjectArgument
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    // returns string "[1009.0351, 1319.4928]"
    #    (findDisplay 128 displayCtrl 51) getObjectArgument ["_unit_1", "POSITION"]
    #    // returns array [1009.0351, 1319.4928]
    #    (findDisplay 128 displayCtrl 51) evalObjectArgument ["_unit_1", "POSITION"]
    # 
    def getObjectArgument _obj, _args
      "_obj getObjectArgument _args;" 
    end

    # Return a list of all the children of the specified object
    # 
    # ==== Syntax
    #
    #      map getObjectChildren object
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +object+ - String -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getObjectChildren
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def getObjectChildren _obj, _args
      "_obj getObjectChildren _args;" 
    end

    # Returns a list of all DLCs objects the unit is currently using
    # 
    # ==== Syntax
    #
    #      getObjectDlcs unit;
    #
    # ==== Parameters
    # 
    # *    +Unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getOwnedDlcs
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getObjectDlcs
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _objects = getObjectDlcs player;
    # 
    def getObjectDlcs _args
      "getObjectDlcs _args;" 
    end

    # Return the proxy object associated with the given editor object
    # 
    # ==== Syntax
    #
    #      map getObjectProxy object
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +object+ - String -  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setObjectProxy
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getObjectProxy
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    // it returns the object 'B 1-1-A:1 (Sean Johnson)'
    #    (findDisplay 128 displayCtrl 51) getObjectProxy "_unit_1"
    # 
    def getObjectProxy _obj, _args
      "_obj getObjectProxy _args;" 
    end

    # Returns amount of remaining oxygen
    # 
    # ==== Syntax
    #
    #      getOxygenRemaining unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getOxygenRemaining
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def getOxygenRemaining _args
      "getOxygenRemaining _args;" 
    end

    # Return an uniqueID of the given unit as string if it's player and empty value if it's AI.
    # 
    # ==== Description
    # 
    # The uniqueID may be up to 100 characters long and may contain numbers, uppercase letters and underscores (the value can be used to construct a valid variable name by appending to another valid variable name).
    # 
    # Note: while for ArmA 2 or ArmA 2: Operation Arrowhead until version 1.
    # 
    # 60 the result always contains a number, it should be always handled as an opaque string.
    # 
    # Converting it to a Number can cause precision problems, as Number cannot accurately represent integers above 16777216 (2^24).
    # 
    # Moreover, game versions since ArmA 2: Operation Arrowhead 1.
    # 
    # 61 provide a non-numeric value as a result
    #  
    # ==== Syntax
    #
    #      getPlayerUID unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # UID string is returned only in multiplayer.
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getPlayerUID
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _uid = getPlayerUID player;
    # 
    def getPlayerUID _args
      "getPlayerUID _args;" 
    end

    # Returns the object position in format Position.
    # 
    # ==== Description
    # 
    # Z value is height over the surface underneath
    #  
    # ==== Syntax
    #
    #      Array = getPos object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object; since VBS2 1.24: Location  
    #
    # ==== Returns
    #
    #      Array - format Position
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setPos, #position, #getPosATL, #getPosASL, #getPosASLW, #visiblePosition, #visiblePositionASL, #getMarkerPos
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getPos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    getPos player 
    # 
    # ====== Example 2:
    # 
    #    //getPos vs. other methods (over sea)
    #    diag_log getPos ship; //[2412.01,6036.33,-0.839965]
    #    diag_log getPosATL ship; //[2412.01,6036.33,19.4266]
    #    diag_log getPosASL ship; //[2412.01,6036.33,-0.920066]
    #    diag_log getPosASLW ship; //[2412.01,6036.33,-0.865981]
    #    diag_log visiblePosition ship; //[2412.02,6036.33,-0.837952]
    #    diag_log visiblePositionASL ship; //[2412.02,6036.33,-0.91798]
    #    diag_log position ship; //[2412.01,6036.33,-0.839965]
    # 
    # ====== Example 3:
    # 
    #    //getPos vs. other methods (over land)
    #    diag_log getPos car; //[2508.64,5681.47,0.0609589]
    #    diag_log getPosATL car; //[2508.64,5681.47,0.0356369]
    #    diag_log getPosASL car; //[2508.64,5681.47,71.718]
    #    diag_log getPosASLW car; //[2508.64,5681.47,71.718]
    #    diag_log visiblePosition car; //[2508.64,5681.47,0.0609512]
    #    diag_log visiblePositionASL car; //[2508.64,5681.47,71.718]
    #    diag_log position car; //[2508.64,5681.47,0.0609589]
    # 
    def getPos _args
      "getPos _args;" 
    end

    # Returns the object position height above sea level
    # 
    # ==== Syntax
    #
    #      Array = getPosASL object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Array - format PositionASL
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setPosASL, #setPosASL2, #position, #getPos, #getPosATL, #getPosASLW, #visiblePosition, #visiblePositionASL
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getPosASL
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _AslPosn = getPosASL player;
    # 
    # ====== Example 2:
    # 
    #    hint format ["position above sea level: %1", (getPosASL player) select 2];
    # 
    def getPosASL _args
      "getPosASL _args;" 
    end

    # Returns the object position height above sea surface (waves included)
    # 
    # ==== Syntax
    #
    #      getPosASLW obj
    #
    # ==== Parameters
    # 
    # *    +obj+ - Object  
    #
    # ==== Returns
    #
    #      PositionASLW
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setPosASLW, #position, #getPos, #getPosATL, #getPosASL, #visiblePosition, #visiblePositionASL
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getPosASLW
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _pos = getPosASLW _diver;
    # 
    def getPosASLW _args
      "getPosASLW _args;" 
    end

    # Returns the position of an object relative to the terrain
    # 
    # ==== Syntax
    #
    #      getPosATL object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Array - format PositionATL
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setPosATL, #position, #getPos, #getPosASL, #getPosASLW, #visiblePosition, #visiblePositionASL
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getPosATL
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _objPosition = getPosATL player
    # 
    def getPosATL _args
      "getPosATL _args;" 
    end

    # Returns the amount of repair resources from empty (0) to full (1) in the cargo space of a repair vehicle
    # 
    # ==== Syntax
    #
    #      getRepairCargo vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setRepairCargo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getRepairCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    value = getRepairCargo vehicleName;
    # 
    def getRepairCargo _args
      "getRepairCargo _args;" 
    end

    # Returns an array containing all information about resolution.
    # 
    # ==== Description
    # 
    # The returned Array is as follow: [width, height, 2D viewport width, 2D viewport height, aspect ratio, UI scale]
    # 
    # Note: aspect ratio and UI scale are returned as coefficients and not 16:9 for example
    #  
    # ==== Syntax
    #
    #      getResolution
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #worldToScreen, #screenToWorld
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getResolution
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _values = getResolution;
    # 
    # ====== Example 2:
    # 
    #    if (isDedicated) then {diag_log getResolution}; //[160,120,136,102,1.33333,0.85]
    # 
    def getResolution 
      "getResolution" 
    end

    # Gets the shadows rendering distance
    # 
    # ==== Syntax
    #
    #      getShadowDistance
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getShadowDistance
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _value = getShadowDistance;
    # 
    def getShadowDistance 
      "getShadowDistance" 
    end

    # Get the speed for the given speed mode.
    # 
    # ==== Description
    # 
    # SpeedMode can be:
    # 
    # "AUTO"
    # 
    # "SLOW"
    # 
    # "NORMAL"
    # 
    # "FAST"
    #  
    # ==== Syntax
    #
    #      Number = object getSpeed speedMode
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +speedMode+ - String  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getSpeed
    #
    # ==== Examples
    # 
    def getSpeed _obj, _args
      "_obj getSpeed _args;" 
    end

    # Returns the terrain height above the sea for the given position
    # 
    # ==== Syntax
    #
    #      getTerrainHeightASL position
    #
    # ==== Parameters
    # 
    # *    +position+ - Position2D  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getTerrainHeightASL
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _height = getTerrainHeightASL (position player); 
    # 
    # ====== Example 2:
    # 
    #     _height = getTerrainHeightASL [5213,3245]; 
    # 
    def getTerrainHeightASL _args
      "getTerrainHeightASL _args;" 
    end

    # Extract text from config entry
    # 
    # ==== Syntax
    #
    #      String = getText config
    #
    # ==== Parameters
    # 
    # *    +config+ - Config  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #configFile, #config/name, #configName, #count, #getArray, #getNumber, #inheritsFrom, #isArray, #isClass, #isNumber, #isText, #select
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _text = getText (configFile >> "CfgVehicles" >> "Thing" >> "icon")  
    # 
    def getText _args
      "getText _args;" 
    end

    # Returns the position of a selected waypoint of a given group.
    # 
    # ==== Description
    # 
    # Waypoints include only those which were placed in the mission editor
    #  
    # ==== Syntax
    #
    #      Array = getWPPos [group, index]
    #
    # ==== Parameters
    # 
    # *    +group+ - Group - the group/unit, of which you want to select a waypoint  
    # *    +index+ - Number - 0 equals the starting position of the group.  
    # *    +The number used in this and other waypoint commands is one more than the one displayed in the waypoint window in the editor. i.e. if the editor labeled a WP "0+ - MOVE" the you would have to use getWPPos [grp,1] to access this particular WP  
    #
    # ==== Returns
    #
    #      Array - format Position3D.The returned position equals [0,0,0], if the selected waypoint doesn't exist.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setWPPos
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getWPPos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_group1,1] setWPPos [200,600,0]_pos = getWPPos [_group1,1]
    #    returns [200,600,0]
    # 
    def getWPPos _args
      "getWPPos _args;" 
    end

    # Returns all weapons types and count from the cargo space
    # 
    # ==== Syntax
    #
    #      result = getWeaponCargo object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object - object to check  
    #
    # ==== Returns
    #
    #      Nested Array in format [all_types_array, all_counts_array]. Eg: [["a", "b"], [3, 2]]
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWeaponCargo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/getWeaponCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _content = getWeaponCargo carName; 
    # 
    # ====== Example 2:
    # 
    #    _content = getWeaponCargo ammoBoxName;
    # 
    # ====== Example 3:
    # 
    #    Sample result returns:
    #    [["arifle_Katiba_F","launch_B_Titan_short_F"],[2,1]]
    # 
    def getWeaponCargo _args
      "getWeaponCargo _args;" 
    end

    # Control what the unit is glancing at (target or Position).
    # 
    # ==== Description
    # 
    # How frequently the unit is glancing there depends on behaviour
    #  
    # ==== Syntax
    #
    #      unit(s) glanceAt position
    #
    # ==== Parameters
    # 
    # *    +units+ - Object or Array  
    # *    +position+ - Object or Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/glanceAt
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _someSoldier glanceAt _otherSoldier
    # 
    # ====== Example 2:
    # 
    #    _otherSoldier glanceAt markerPos "markerOne"
    # 
    def glanceAt _obj, _args
      "_obj glanceAt _args;" 
    end

    # Make a unit send a text message over the global radio channel.
    # 
    # ==== Description
    # 
    # Does not need to have assigned "itemRadio" to see or transmit the messages
    #  
    # ==== Syntax
    #
    #      unit globalChat chatText
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +chatText+ - String - the message that should be sent  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #sideChat, #groupChat, #vehicleChat
    # 
    # Official Wiki: https://community.bistudio.com/wiki/globalChat
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne globalChat "Show this text"
    # 
    def globalChat _obj, _args
      "_obj globalChat _args;" 
    end

    # Make a unit send a message over the global radio channel.
    # 
    # ==== Description
    # 
    # The message is defined in the description.
    # 
    # ext of the mission and may contain text and sound
    #  
    # ==== Syntax
    #
    #      unit globalRadio radioName
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +radioName+ - String - the name of the message class in the description.ext  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #sideRadio, #groupRadio, #vehicleRadio
    # 
    # Official Wiki: https://community.bistudio.com/wiki/globalRadio
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne globalRadio "messageOne"
    # 
    def globalRadio _obj, _args
      "_obj globalRadio _args;" 
    end

    # Returns name of currently used goggles (not NVGoggles)
    # 
    # ==== Syntax
    #
    #      goggles unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeGoggles, #addGoggles
    # 
    # Official Wiki: https://community.bistudio.com/wiki/goggles
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _goggles = goggles assaultDiver; //G_Diving
    # 
    # ====== Example 2:
    # 
    #    _goggles = goggles reconTeamLeader; //G_Shades_Black
    # 
    def goggles _args
      "goggles _args;" 
    end

    # In SQS scripts only: Go to given label.
    # 
    # ==== Description
    # 
    # String argument is used here.
    # 
    # Be sure to use double quotes around label name in goto.
    # 
    # Define the label with #.
    # 
    # Note that Labels are not case sensitive and that labels are searched for from the top of the script, so multiple occurrences of a label will only result in the top most one ever being found
    #  
    # ==== Syntax
    #
    #      goto label
    #
    # ==== Parameters
    # 
    # *    +label+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/goto
    #
    # ==== Examples
    # 
    def goto _args
      "goto _args;" 
    end

    # Returns the group a unit is assigned to
    # 
    # ==== Syntax
    #
    #      Group = group object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Group -For dead units, the returned group equals grpNull.
    #
    # ==== Multiplayer
    # 
    # -Problems:In MP the command is not initialised in functions called by initline or init eventhandlers.
    # 
    # ==== See Also
    # 
    # #join, #leader, #units, #allGroups, #groupID
    # 
    # Official Wiki: https://community.bistudio.com/wiki/group
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _playerGrp = group player
    # 
    def group _args
      "group _args;" 
    end

    # Make a unit send a text message over the group radio channel.
    # 
    # ==== Description
    # 
    # Must have assigned "itemRadio" to see or transmit the messages
    #  
    # ==== Syntax
    #
    #      unit groupChat chatText
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +chatText+ - String - the message that should be sent  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #globalChat, #sideChat, #vehicleChat
    # 
    # Official Wiki: https://community.bistudio.com/wiki/groupChat
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne groupChat "Show this text"
    # 
    def groupChat _obj, _args
      "_obj groupChat _args;" 
    end

    # Get group with given unique ID
    # 
    # ==== Syntax
    #
    #      groupFromNetId id
    #
    # ==== Parameters
    # 
    # *    +id+ - String  
    #
    # ==== Returns
    #
    #      Group
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/groupFromNetId
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def groupFromNetId _args
      "groupFromNetId _args;" 
    end

    # Returns group name
    # 
    # ==== Syntax
    #
    #      groupID group
    #
    # ==== Parameters
    # 
    # *    +group+ - Group  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setGroupId, #group
    # 
    # Official Wiki: https://community.bistudio.com/wiki/groupID
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _name = groupID (group player);
    # 
    def groupID _args
      "groupID _args;" 
    end

    # Return if groups icon raises onClick and onOver events
    # 
    # ==== Syntax
    #
    #      groupIconSelectable
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addGroupIcon, #clearGroupIcons, #getGroupIcon, #getGroupIconParams, #groupIconsVisible, #onGroupIconClick, #removeGroupIcon, #setGroupIcon, #setGroupIconParams, #setGroupIconsSelectable, #setGroupIconsVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/groupIconSelectable
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def groupIconSelectable 
      "groupIconSelectable" 
    end

    # Return group icons are visible
    # 
    # ==== Syntax
    #
    #      groupIconsVisible
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addGroupIcon, #clearGroupIcons, #getGroupIcon, #getGroupIconParams, #groupIconSelectable, #onGroupIconClick, #removeGroupIcon, #setGroupIcon, #setGroupIconParams, #setGroupIconsSelectable, #setGroupIconsVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/groupIconsVisible
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    // HC bar active
    #    if (isNil "BIS_HC_visible") then {BIS_HC_visible = groupIconsVisible};
    #    setGroupIconsVisible [true,true];
    # 
    def groupIconsVisible 
      "groupIconsVisible" 
    end

    # Make a unit send a message over the group radio channel.
    # 
    # ==== Description
    # 
    # The message is defined in the description.
    # 
    # ext of the mission and may contain text and sound
    #  
    # ==== Syntax
    #
    #      unit groupRadio radioName
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +radioName+ - String - the name of the message class in the description.ext  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #globalRadio, #sideRadio, #vehicleRadio
    # 
    # Official Wiki: https://community.bistudio.com/wiki/groupRadio
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne groupRadio "messageOne"
    # 
    def groupRadio _obj, _args
      "_obj groupRadio _args;" 
    end

    # Select unit from unit's group
    # 
    # ==== Syntax
    #
    #      unitName groupSelectUnit [unit, booleanValue]
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object - desc  
    # *    +[unit, booleanValue]+ - Array  
    # *    +unit+ - Object - desc  
    # *    +booleanValue+ - Boolean - desc  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/groupSelectUnit
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    {//after leaving menu deselect all units (command menu is not opened -> no selection)
    #        player groupSelectUnit [_x, false];
    #    } forEach (groupSelectedUnits player);
    # 
    def groupSelectUnit _obj, _args
      "_obj groupSelectUnit _args;" 
    end

    # Returns selected groups in sgroup
    # 
    # ==== Syntax
    #
    #      groupSelectedUnits unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/groupSelectedUnits
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _selectedUnits = groupSelectedUnits player;
    # 
    def groupSelectedUnits _args
      "groupSelectedUnits _args;" 
    end

    # A non-existing Group.
    # 
    # ==== Description
    # 
    # This value is not equal to anything, including itself
    #  
    # ==== Syntax
    #
    #      Group = grpNull
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Group
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/grpNull
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _group = grpNull 
    # 
    def grpNull 
      "grpNull" 
    end

    # Returns the gunner of a vehicle
    # 
    # ==== Syntax
    #
    #      Object = gunner vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Object -The person sitting in the gunner place is returned. If vehicle is not a vehicle but a person, the person is returned.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #commander, #driver, #crew
    # 
    # Official Wiki: https://community.bistudio.com/wiki/gunner
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (gunner _tank1) action ["getout",_tank1]
    # 
    def gunner _args
      "gunner _args;" 
    end

    # Return the current gusts value.
    # 
    # ==== Description
    # 
    # Scale is 0 to 1
    #  
    # ==== Syntax
    #
    #      gusts
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setGusts, #windStr, #wind
    # 
    # Official Wiki: https://community.bistudio.com/wiki/gusts
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _gustsval = gusts;
    # 
    def gusts 
      "gusts" 
    end

    # Stops the program into a debugger.
    # 
    # ==== Description
    # 
    # In retail version using halt results in error
    #  
    # ==== Syntax
    #
    #      halt
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/halt
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? _DbugWanted :halt 
    # 
    def halt 
      "halt" 
    end

    # Returns array with all items assigned to the handgun.
    # 
    # ==== Description
    # 
    # This command is used for infantry weapons only
    #  
    # ==== Syntax
    #
    #      handgunItems unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addHandgunItem, #removeHandgunItem, #removeAllHandgunItems, #weaponsItems, #primaryWeaponItems, #secondaryWeaponItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/handgunItems
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    handgunItems player; 
    #    /*
    #    [
    #    	"muzzle_snds_L",	//silencer
    #    	"",			//laser
    #    	""			//optics
    #    ]
    #    */
    # 
    def handgunItems _args
      "handgunItems _args;" 
    end

    # Returns either single element array, containing class name of currently loaded in the handgun magazine, or an empty array if unit has no handgun or handgun is not loaded.
    # 
    # ==== Description
    # 
    # This command is used for infantry weapons only
    #  
    # ==== Syntax
    #
    #      handgunMagazine unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #handgunWeapon, #handgunItems, #addHandgunItem, #removeHandgunItem, #removeAllHandgunItems, #primaryWeaponMagazine, #secondaryWeaponMagazine
    # 
    # Official Wiki: https://community.bistudio.com/wiki/handgunMagazine
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint handgunMagazine player; //["16Rnd_9x21_Mag"]
    # 
    # ====== Example 2:
    # 
    #    _array = handgunMagazine player;
    #    if (count _array > 0) then {
    #    	hint ("Handgun is loaded with " + (_array select 0) + "!");
    #    } else {
    #    	if (handgunWeapon player != "") then {
    #    		hint "Handgun is not loaded!";
    #    	} else {
    #    		hint "Player doesn't have a handgun!";
    #    	};
    #    };
    # 
    def handgunMagazine _args
      "handgunMagazine _args;" 
    end

    # Returns the name of a unit's handgun (an empty string if there is none)
    # 
    # ==== Syntax
    #
    #      handgunWeapon unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #handgunMagazine, #handgunItems, #addHandgunItem, #removeHandgunItem, #removeAllHandgunItems, #primaryWeapon, #secondaryWeapon, #currentWeapon, #weapons
    # 
    # Official Wiki: https://community.bistudio.com/wiki/handgunWeapon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint handgunWeapon player; //"hgun_P07_F"
    # 
    def handgunWeapon _args
      "handgunWeapon _args;" 
    end

    # Checks if a soldier's hands are hit, which results in inaccurate aiming
    # 
    # ==== Syntax
    #
    #      Number = handsHit unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Number -If the hands aren't damaged, the returned value is 0. If the hands are hit or the unit is dead, the returned value is 1.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #damage
    # 
    # Official Wiki: https://community.bistudio.com/wiki/handsHit
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? (handsHit player == 1) : player globalChat "Ouch! Don't shoot at my hands dammit!"
    # 
    def handsHit _args
      "handsHit _args;" 
    end

    # Returns true if the computer has an interface (a real player).
    # 
    # ==== Description
    # 
    # False for a dedicated server or for a headless client
    #  
    # ==== Syntax
    #
    #      hasInterface
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #isDedicated, #isServer
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hasInterface
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    headless = !(hasInterface || isDedicated);
    # 
    # ====== Example 2:
    # 
    #    _isHC = !hasInterface && !isDedicated;
    # 
    def hasInterface 
      "hasInterface" 
    end

    # Checks if a unit has the given weapon
    # 
    # ==== Syntax
    #
    #      Boolean = unitName hasWeapon weaponName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +weaponName+ - String - the name of the weapon to check for.  
    #
    # ==== Returns
    #
    #      Boolean -Returns true if the unit has the weapon, false if not.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #weapons
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hasWeapon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?!(player hasWeapon "M16") : player addWeapon "M16"
    # 
    def hasWeapon _obj, _args
      "_obj hasWeapon _args;" 
    end

    # Returns selected groups in high command
    # 
    # ==== Syntax
    #
    #      hcAllGroups unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # High Command, #hcGroupParams, #hcLeader, #hcRemoveAllGroups, #hcRemoveGroup, #hcSelected, #hcSelectGroup, #hcSetGroup, #hcShowBar, #hcShownBar, #onHCGroupSelectionChanged
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hcAllGroups
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def hcAllGroups _args
      "hcAllGroups _args;" 
    end

    # Returns parameters describing group in high command bar.
    # 
    # ==== Description
    # 
    # Return value is [string, float[4]]
    #  
    # ==== Syntax
    #
    #      unit hcGroupParams group
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    # *    +group+ - Group -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # High Command, #hcAllGroups, #hcLeader, #hcRemoveAllGroups, #hcRemoveGroup, #hcSelected, #hcSelectGroup, #hcSetGroup, #hcShowBar, #hcShownBar, #onHCGroupSelectionChanged
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hcGroupParams
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def hcGroupParams _obj, _args
      "_obj hcGroupParams _args;" 
    end

    # Returns group's high command commander
    # 
    # ==== Syntax
    #
    #      hcLeader group
    #
    # ==== Parameters
    # 
    # *    +group+ - Group -  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # High Command, #hcAllGroups, #hcGroupParams, #hcRemoveAllGroups, #hcRemoveGroup, #hcSelected, #hcSelectGroup, #hcSetGroup, #hcShowBar, #hcShownBar, #onHCGroupSelectionChanged
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hcLeader
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _leader = hcLeader groupName;
    # 
    def hcLeader _args
      "hcLeader _args;" 
    end

    # Remove all groups from unit's high command bar
    # 
    # ==== Syntax
    #
    #      hcRemoveAllGroups unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # High Command, #hcAllGroups, #hcGroupParams, #hcLeader, #hcRemoveGroup, #hcSelected, #hcSelectGroup, #hcSetGroup, #hcShowBar, #hcShownBar, #onHCGroupSelectionChanged
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hcRemoveAllGroups
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def hcRemoveAllGroups _args
      "hcRemoveAllGroups _args;" 
    end

    # Removes group from unit's high command bar
    # 
    # ==== Syntax
    #
    #      unit hcRemoveGroup group
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    # *    +group+ - Group -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # High Command, #hcAllGroups, #hcGroupParams, #hcLeader, #hcRemoveAllGroups, #hcSelected, #hcSelectGroup, #hcSetGroup, #hcShowBar, #hcShownBar, #onHCGroupSelectionChanged
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hcRemoveGroup
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def hcRemoveGroup _obj, _args
      "_obj hcRemoveGroup _args;" 
    end

    # Select given group in high command bar
    # 
    # ==== Syntax
    #
    #      unit hcSelectGroup array
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    # *    +array+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # High Command, #hcAllGroups, #hcGroupParams, #hcLeader, #hcRemoveAllGroups, #hcRemoveGroup, #hcSelected, #hcSetGroup, #hcShowBar, #hcShownBar, #onHCGroupSelectionChanged
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hcSelectGroup
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def hcSelectGroup _obj, _args
      "_obj hcSelectGroup _args;" 
    end

    # Returns selected groups in high command
    # 
    # ==== Syntax
    #
    #      hcSelected unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # High Command, #hcAllGroups, #hcGroupParams, #hcLeader, #hcRemoveAllGroups, #hcRemoveGroup, #hcSelectGroup, #hcSetGroup, #hcShowBar, #hcShownBar, #onHCGroupSelectionChanged
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hcSelected
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    array = hcSelected unit;
    # 
    def hcSelected _args
      "hcSelected _args;" 
    end

    # Add group to unit's high command bar.
    # 
    # ==== Description
    # 
    # Array parameters are group, group-name and team (teammain, teamred, teamgreen, teamblue, teamyellow).
    # 
    # Group is the only necessary parameter
    #  
    # ==== Syntax
    #
    #      unit hcSetGroup array
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    # *    +array+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # High Command, #hcAllGroups, #hcGroupParams, #hcLeader, #hcRemoveAllGroups, #hcRemoveGroup, #hcSelected, #hcSelectGroup, #hcShowBar, #hcShownBar, #onHCGroupSelectionChanged
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hcSetGroup
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    unit hcSetGroup [group, "HQ", teamred];
    # 
    # ====== Example 2:
    # 
    #    player hcSetGroup [group];
    # 
    def hcSetGroup _obj, _args
      "_obj hcSetGroup _args;" 
    end

    # Shows or hides high command bar.
    # 
    # ==== Description
    # 
    # There must be some groups under HC command to show HC bar
    #  
    # ==== Syntax
    #
    #      hcShowBar bool
    #
    # ==== Parameters
    # 
    # *    +bool+ - Boolean -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # High Command, #hcAllGroups, #hcGroupParams, #hcLeader, #hcRemoveAllGroups, #hcRemoveGroup, #hcSelected, #hcSelectGroup, #hcSetGroup, #hcShownBar, #onHCGroupSelectionChanged
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hcShowBar
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hcShowBar true;
    # 
    # ====== Example 2:
    # 
    #    hcShowBar false;
    # 
    def hcShowBar _args
      "hcShowBar _args;" 
    end

    # Return true if the high command bar is shown/active
    # 
    # ==== Syntax
    #
    #      hcShownBar
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # High Command, #hcAllGroups, #hcGroupParams, #hcLeader, #hcRemoveAllGroups, #hcRemoveGroup, #hcSelected, #hcSelectGroup, #hcSetGroup, #hcShowBar, #onHCGroupSelectionChanged
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hcShownBar
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (hcShownBar) then {hint "HC bar is active";};
    # 
    def hcShownBar 
      "hcShownBar" 
    end

    # Returns headgear of unit
    # 
    # ==== Syntax
    #
    #      headgear unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addHeadgear, #removeHeadgear
    # 
    # Official Wiki: https://community.bistudio.com/wiki/headgear
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint headgear player; //H_HelmetB
    # 
    def headgear _args
      "headgear _args;" 
    end

    # Hides the body of the given person
    # 
    # ==== Syntax
    #
    #      hideBody person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hideBody
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hideBody player
    # 
    def hideBody _args
      "hideBody _args;" 
    end

    # Hide entity.
    # 
    # ==== Description
    # 
    # Can be used on soldiers and vehicles, also on static objects
    #  
    # ==== Syntax
    #
    #      object hideObject hidden
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +object+ - Object.  
    # *    +hidden+ - Boolean hidden/visible.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Command has local effect, needs to be run on each client.
    # 
    # ==== See Also
    # 
    # #hideObjectGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hideObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hideObject unitName; 
    # 
    # ====== Example 2:
    # 
    #    objectName hideObject true; 
    # 
    def hideObject _obj, _args
      "_obj hideObject _args;" 
    end

    # Hides object on all connected clients as well as JIP.
    # 
    # ==== Description
    # 
    # Has effect only when executed on server.
    # 
    # Can be used on all objects with class names, i.
    # 
    # e.
    # 
    # (typeOf object != "")
    #  
    # ==== Syntax
    #
    #      hideObjectGlobal object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object - object to hide  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #hideObject
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hideObjectGlobal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hideObjectGlobal nearestBuilding [2500,2500,0];
    # 
    def hideObjectGlobal _args
      "hideObjectGlobal _args;" 
    end

    # Outputs a multi-line hint message in the left upper corner of the screen (in the right upper corner in Arma).
    # 
    # ==== Description
    # 
    # This version of hint is supposed to play a sound when hint is shown, but this varies between games and versions.
    # 
    # Use hintSilent for soundless hint.
    # 
    # The effect of this command is local, i.
    # 
    # e.
    # 
    # the hint will only show on the computer command was executed
    #  
    # ==== Syntax
    #
    #      hint text
    #
    # ==== Parameters
    # 
    # *    +text+ - String or Structured Text - the message to write on the screen may consist of any characters. \n indicates a line break.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #hintC, #hintCadet, #hintC array, #hintC structuredText, #hintC text, #hintSilent
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hint
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint "Press W to move forward. \nPress S to move backwards."
    #    outputs the following message:
    #    Press W to move forward.
    #    Press S to move backwards.
    #    Known Problems: Avoid hint messages that exceed the screen, as this may lead to crashes.
    # 
    def hint _args
      "hint _args;" 
    end

    # Works the same way as hint, except the text is also displayed in the middle of the screen.
    # 
    # ==== Description
    # 
    # The game is paused until the player presses "Continue"
    #  
    # ==== Syntax
    #
    #      hintC text
    #
    # ==== Parameters
    # 
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #hint, #hintCadet, #hintC array, #hintC structuredText, #hintC text, #hintSilent
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hintC
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hintC "Press W to move forward"; 
    # 
    # ====== Example 2:
    # 
    #    Same as the above in Arma3 but without second hint displayed:hintC "Press W to move forward";
    #    hintC_EH = findDisplay 57 displayAddEventHandler ["unload", {
    #    	0 = _this spawn {
    #    		_this select 0 displayRemoveEventHandler ["unload", hintC_EH];
    #    		hintSilent "";
    #    	};
    #    }];
    #     
    # 
    def hintC _args
      "hintC _args;" 
    end

    # Creates a hint dialog with the given title and text.
    # 
    # ==== Description
    # 
    # Texts can be plain or structured
    #  
    # ==== Syntax
    #
    #      title hintC [text1, text2, ...]
    #
    # ==== Parameters
    # 
    # *    +title+ - String:  
    # *    +[text1, text2, ...]+ - Array of plain or structured texts. A single text String also works.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #hint, #hintC, #hintCadet, #hintC structuredText, #hintC text, #hintSilent
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hintC
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "Instructions" hintC [
    #    	"Press W to move forward.",
    #    	"Press S to move backwards.",
    #    	"Use the mouse to turn right or left.",
    #    	"Press V for weapon sights."
    #    ];
    # 
    # ====== Example 2:
    # 
    #    Same as the above in Arma3 but without second hint displayed: "Instructions" hintC [
    #    	"Press W to move forward.",
    #    	"Press S to move backwards.",
    #    	"Use the mouse to turn right or left.",
    #    	"Press V for weapon sights."
    #    ];
    #    hintC_arr_EH = findDisplay 72 displayAddEventHandler ["unload", {
    #    	0 = _this spawn {
    #    		_this select 0 displayRemoveEventHandler ["unload", hintC_arr_EH];
    #    		hintSilent "";
    #    	};
    #    }]; 
    #     
    # 
    def hintC _obj, _args
      "_obj hintC _args;" 
    end

    # Creates a hint dialog with the given title and text.
    # 
    # ==== Description
    # 
    # Note: Not working properly
    #  
    # ==== Syntax
    #
    #      title hintC structuredText
    #
    # ==== Parameters
    # 
    # *    +title+ - String  
    # *    +structuredText+ - Structured Text  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #hint, #hintC, #hintCadet, #hintC array, #hintC text, #hintSilent, Structured Text
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hintC
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _separator1 = parseText "<br />------------------------<br />"; 
    #    _image = "\ca\ui\textures\aus_flag.paa"; 
    #    _txt = composeText [ image _image,"Heading Text",_separator1,"Content"]; 
    #    hintC _txt; 
    # 
    def hintC _obj, _args
      "_obj hintC _args;" 
    end

    # Shows a text hint only when in cadetMode.
    # 
    # ==== Description
    # 
    # The text can contain several lines.
    # 
    # \n is used to indicate the end of a line
    #  
    # ==== Syntax
    #
    #      hintCadet text
    #
    # ==== Parameters
    # 
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #hint, #hintC, #hintC array, #hintC structuredText, #hintC text, #hintSilent cadetMode
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hintCadet
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hintCadet "Press W to move forward"
    # 
    def hintCadet _args
      "hintCadet _args;" 
    end

    # Same as hint, but without a sound
    # 
    # ==== Syntax
    #
    #      hintSilent text
    #
    # ==== Parameters
    # 
    # *    +text+ - String or Structured Text  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #hint, #hintC, #hintCadet, #hintC array, #hintC structuredText, #hintC text
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hintSilent
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hintSilent "You texte comes here !"
    # 
    def hintSilent _args
      "hintSilent _args;" 
    end

    # Returns class name of currently used Head Mounted Display
    # 
    # ==== Syntax
    #
    #      hmd unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #headgear, #goggles, #binocular
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hmd
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _nvgs = hmd player; //NVGoggles
    # 
    def hmd _args
      "hmd _args;" 
    end

    # Host the mp mission described by config class.
    # 
    # ==== Description
    # 
    # Should be called as reaction to some UI action in some dialog.
    # 
    # For example you can start a MP scenario from a button.
    # 
    # It creates a host and takes you to the lobby with the scenario loaded.
    # 
    # You need to provide the display which is active when the hostMission command is called
    #  
    # ==== Syntax
    #
    #      hostMission [Config, Display]
    #
    # ==== Parameters
    # 
    # *    +Config+ - Config  
    # *    +Config+ - Display  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #playScriptedMission, #playMission
    # 
    # Official Wiki: https://community.bistudio.com/wiki/hostMission
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hostMission [configMissionName, display];
    # 
    # ====== Example 2:
    # 
    #    hostMission [configFile/"CfgMissions"/"MPMissions"/_scenarioClassName, _currentlyActiveDisplay];
    # 
    # ====== Example 3:
    # 
    #    Launch host mission dialog in Arma 3 from a client on dedicated serverhostMission [
    #    	configFile >> "CfgMissions" >> "MPmissions" >> "MP_COOP_m01",
    #    	findDisplay 46
    #    ];
    # 
    def hostMission _args
      "hostMission _args;" 
    end

    # Load HTML from file to given control.
    # 
    # ==== Description
    # 
    # File path is relative to current mission dir or an absolute path (with drive letter etc.
    # 
    # )
    #  
    # ==== Syntax
    #
    #      control htmlLoad filename
    #
    # ==== Parameters
    # 
    # *    +control+ - Control  
    # *    +filename+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/htmlLoad
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control htmlLoad "briefing.html"
    # 
    def htmlLoad _obj, _args
      "_obj htmlLoad _args;" 
    end

    # Returns the current humidity value.
    # 
    # ==== Description
    # 
    # 0 is no humidity and 1 is 100% humidity.
    # 
    # Humidity value quickly changes from 0 to 1 when rain starts, then slowly changes from 1 to 0 when rain stops
    #  
    # ==== Syntax
    #
    #      humidity
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #simulSetHumidity, #setOvercast, #setRain, #rain, #overcast, #fog, #wind, #waves
    # 
    # Official Wiki: https://community.bistudio.com/wiki/humidity
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    currentHumidity = humidity;
    # 
    # ====== Example 2:
    # 
    #    skipTime -24;
    #    86400 setOvercast 1;
    #    skipTime 24;
    #    [] spawn {
    #    	10 setRain 1;
    #    	sleep 10;
    #    	10 setRain 0;
    #    };
    #    onEachFrame {
    #    	hintSilent str [round (rain * 10) / 10, round (humidity * 10) / 10];
    #    };
    # 
    def humidity 
      "humidity" 
    end

    # Creates a structured text containing the given image
    # 
    # ==== Syntax
    #
    #      Structured Text = image filename
    #
    # ==== Parameters
    # 
    # *    +filename+ - String  
    #
    # ==== Returns
    #
    #      Structured Text
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #parseText, #text, #composeText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/image
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _txt1 = image "data\isniper.paa";
    # 
    def image _args
      "image _args;" 
    end

    # Imports all groups into the RTE
    # 
    # ==== Syntax
    #
    #      importAllGroups map
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/importAllGroups
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def importAllGroups _args
      "importAllGroups _args;" 
    end

    # Returns a location's importance value
    # 
    # ==== Syntax
    #
    #      importance location
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setImportance
    # 
    # Official Wiki: https://community.bistudio.com/wiki/importance
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _locationImportance = importance myLocation
    # 
    def importance _args
      "importance _args;" 
    end

    # Sets given event handler of in-game UI
    # 
    # ==== Syntax
    #
    #      inGameUISetEventHandler [handler name, function]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/inGameUISetEventHandler
    #
    # ==== Examples
    # 
    def inGameUISetEventHandler _args
      "inGameUISetEventHandler _args;" 
    end

    # Returns true if all given units are able to fire at given position with given magazineType
    # 
    # ==== Syntax
    #
    #      pos inRangeOfArtillery [[unit], magazineType]
    #
    # ==== Parameters
    # 
    # *    +pos+ - Position  
    # *    +[[unit], magazineType]+ - Array  
    # *    +[unit]+ - Array - Array of units.  
    # *    +unit+ - Object  
    # *    +magazineType+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/inRangeOfArtillery
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _isInRange = getMarkerPos "myTarget" inRangeOfArtillery [[myArty], "32Rnd_155mm_Mo_shells"]
    # 
    def inRangeOfArtillery _obj, _args
      "_obj inRangeOfArtillery _args;" 
    end

    # Returns the incapacitated state of the given unit
    # 
    # ==== Syntax
    #
    #      incapacitatedState person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/incapacitatedState
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _result = incapacitatedState player;
    # 
    def incapacitatedState _args
      "incapacitatedState _args;" 
    end

    # Pre-defined variable for the independent side
    # 
    # ==== Syntax
    #
    #      independent
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/independent
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def independent 
      "independent" 
    end

    # Control fireplace burning.
    # 
    # ==== Description
    # 
    # Set inflame to true (on) or false (off)
    #  
    # ==== Syntax
    #
    #      fireplace inflame burn
    #
    # ==== Parameters
    # 
    # *    +fireplace+ - Object  
    # *    +burn+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #inflamed
    # 
    # Official Wiki: https://community.bistudio.com/wiki/inflame
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _fireplaceOne inflame true
    # 
    def inflame _obj, _args
      "_obj inflame _args;" 
    end

    # Check if fireplace is inflamed (burning) or not
    # 
    # ==== Syntax
    #
    #      Boolean = inflamed fireplace
    #
    # ==== Parameters
    # 
    # *    +fireplace+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #inflame
    # 
    # Official Wiki: https://community.bistudio.com/wiki/inflamed
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _IsAlight = inflamed _fireplaceOne
    # 
    def inflamed _args
      "inflamed _args;" 
    end

    # Returns base entry of config entry
    # 
    # ==== Syntax
    #
    #      Config = inheritsFrom config
    #
    # ==== Parameters
    # 
    # *    +config+ - Config  
    #
    # ==== Returns
    #
    #      Config
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #configFile, #config/name, #configName, #count, #getArray, #getText, #getNumber, #isArray, #isClass, #isNumber, #isText, #select
    # 
    # Official Wiki: https://community.bistudio.com/wiki/inheritsFrom
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _base = inheritsFrom (configFile >> "CfgVehicles" >> "Car")
    #    Result is LandVehicle
    # 
    def inheritsFrom _args
      "inheritsFrom _args;" 
    end

    # Initialize the ambient life
    # 
    # ==== Syntax
    #
    #      initAmbientLife
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/initAmbientLife
    #
    # ==== Examples
    # 
    def initAmbientLife 
      "initAmbientLife" 
    end

    # Return the state of input devices mapped to given input action (see Category:Key Actions for action names)
    # 
    # ==== Syntax
    #
    #      inputAction name
    #
    # ==== Parameters
    # 
    # *    +name+ - String - name of the action  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #actionKeys, #actionKeysImages, #actionKeysNames
    # 
    # Official Wiki: https://community.bistudio.com/wiki/inputAction
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    inputAction "leanLeft" Returns 1 if the button mapped to "leanLeft" is pressed currently else 0.
    # 
    # ====== Example 2:
    # 
    #    [] spawn {
    #    	waitUntil {inputAction "reloadMagazine" > 0};  
    #    	hint "Reload Key Pressed";
    #    };
    # 
    def inputAction _args
      "inputAction _args;" 
    end

    # Insert an object to the editor and assign arguments.
    # 
    # ==== Description
    # 
    # Create script is,not called.
    # 
    # Returns the ID of the new EditorObject.
    # 
    # Subtype class is,optional
    #  
    # ==== Syntax
    #
    #      map insertEditorObject [type,value,[name1,value1,...],subtype class]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[name1,value1,...],subtype class]+ - Array -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/insertEditorObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def insertEditorObject _obj, _args
      "_obj insertEditorObject _args;" 
    end

    # Find named selections in object which is in specified lod intersected by given section of a line.
    # 
    # ==== Description
    # 
    # 
    # 
    # Return value is in the form of [selection, number].
    # 
    # Multiple returned arrays are nested within a single array, and no intersection will return an empty array.
    # 
    # "LodName" is one of: "FIRE", "VIEW", "GEOM", "IFIRE"
    #  
    # ==== Syntax
    #
    #      Array = [object, lodName] intersect [begin, end]
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +lodName+ - String  
    # *    +[begin, end]+ - Array  
    # *    +begin+ - Array - format Position3D  
    # *    +end+ - Array - format Position3D  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #terrainIntersect, #terrainIntersectASL, #lineIntersects, #lineIntersectsWith, #lineIntersectsObjs
    # 
    # Official Wiki: https://community.bistudio.com/wiki/intersect
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_tank, "VIEW"] intersect [[1500, 1500, 2], [1550, 1500, 2]]
    # 
    def intersect _obj, _args
      "_obj intersect _args;" 
    end

    # Returns whether the unit is diving
    # 
    # ==== Syntax
    #
    #      isAbleToBreathe unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isAbleToBreathe
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def isAbleToBreathe _args
      "isAbleToBreathe _args;" 
    end

    # Check if team member is an agent
    # 
    # ==== Syntax
    #
    #      isAgent teamMember
    #
    # ==== Parameters
    # 
    # *    +teamMember+ - Team Member  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #agent, #agents, #createAgent, #forEachMemberAgent
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isAgent
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def isAgent _args
      "isAgent _args;" 
    end

    # Check if config entry represents array
    # 
    # ==== Syntax
    #
    #      Boolean =  isArray config
    #
    # ==== Parameters
    # 
    # *    +config+ - Config  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #configFile, #config/name, #configName, #count, #getArray, #getText, #getNumber, #inheritsFrom, #isClass, #isNumber, #isText, #select
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isArray
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _ok = isArray (configFile >> "CfgVehicles")
    #    Result is false
    # 
    def isArray _args
      "isArray _args;" 
    end

    # Return true if vehicle has enabled auto hover.
    # 
    # ==== Description
    # 
    # (always returns false if the vehicle can't set auto hover)
    #  
    # ==== Syntax
    #
    #      isAutoHoverOn vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isAutoHoverOn
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     status = isAutoHoverOn vehicle player;
    # 
    def isAutoHoverOn _args
      "isAutoHoverOn _args;" 
    end

    # Returns whether the unit is bleeding
    # 
    # ==== Syntax
    #
    #      isBleeding unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isBleeding
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def isBleeding _args
      "isBleeding _args;" 
    end

    # Returns whether the unit is burning
    # 
    # ==== Syntax
    #
    #      isBurning unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isBurning
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def isBurning _args
      "isBurning _args;" 
    end

    # Check if config entry represents config class
    # 
    # ==== Syntax
    #
    #      Boolean = isClass config
    #
    # ==== Parameters
    # 
    # *    +config+ - Config  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #configFile, #config/name, #configName, #count, #getArray, #getText, #getNumber, #inheritsFrom, #isArray, #isNumber, #isText, #select
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isClass
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _ok = isClass (configFile >> "CfgVehicles")
    #    Result is true
    # 
    def isClass _args
      "isClass _args;" 
    end

    # Returns true if copilots actions are enabled
    # 
    # ==== Syntax
    #
    #      isCopilotEnabled vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #enableCopilot
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isCopilotEnabled
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if ( ! isCopilotEnabled myHeli ) then { myHeli enableCopilot true; };
    # 
    def isCopilotEnabled _args
      "isCopilotEnabled _args;" 
    end

    # Return true if the machine (executing the command) is a dedicated server
    # 
    # ==== Syntax
    #
    #      isDedicated
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #isServer
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isDedicated
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (isDedicated) then {hint "Dedicated Server on the run !"}
    # 
    def isDedicated 
      "isDedicated" 
    end

    # Returns true if engine is on, false if it is off
    # 
    # ==== Syntax
    #
    #      Boolean = isEngineOn vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isEngineOn
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _OnOff = isEngineOn _carOne
    # 
    def isEngineOn _args
      "isEngineOn _args;" 
    end

    # Performs strict comparison between var1 and var2 and returns true if equal otherwise false
    # 
    # ==== Syntax
    #
    #      var1 isEqualTo var2
    #
    # ==== Parameters
    # 
    # *    +var1+ - Anything  
    # *    +var2+ - Anything  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Operators, #in, #find, #set, #resize, #switch
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isEqualTo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _arr1 = [1,[2,[3]]];
    #    _arr2 = [1,[2,[3]]];
    #    if (_arr1 isEqualTo _arr2) then {hint "Arrays match!"}
    # 
    def isEqualTo _obj, _args
      "_obj isEqualTo _args;" 
    end

    # Returns true if there is a linked and enabled flashlight on a given weapon
    # 
    # ==== Syntax
    #
    #      unit isFlashlightOn weapon
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +weapon+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isFlashlightOn
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def isFlashlightOn _obj, _args
      "_obj isFlashlightOn _args;" 
    end

    # Check if given area is flat and empty
    # 
    # ==== Syntax
    #
    #      position isFlatEmpty [float minDistance,float precizePos,float maxGradient,float gradientRadius,float onWater,bool onShore,object skipobj]
    #
    # ==== Parameters
    # 
    # *    +position+ - Array -  
    # *    +[float minDistance,float precizePos,float maxGradient,float gradientRadius,float onWater,bool onShore,object skipobj]+ - Array -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #selectBestPlaces, #findEmptyPosition
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isFlatEmpty
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _isFlat = (position _preview) isflatempty [
    #    		(sizeof typeof _preview) / 2,	//--- Minimal distance from another object
    #    		0,				//--- If 0, just check position. If >0, select new one
    #    		0.7,				//--- Max gradient
    #    		(sizeof typeof _preview),	//--- Gradient area
    #    		0,				//--- 0 for restricted water, 2 for required water,
    #    		false,				//--- True if some water can be in 25m radius
    #    		_preview			//--- Ignored object
    #    	];
    # 
    def isFlatEmpty _obj, _args
      "_obj isFlatEmpty _args;" 
    end

    # Returns true if player is forced to walk
    # 
    # ==== Syntax
    #
    #      isForcedWalk unitName
    #
    # ==== Parameters
    # 
    # *    +unitName + - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isForcedWalk
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _bool = isForcedWalk player; 
    # 
    def isForcedWalk _args
      "isForcedWalk _args;" 
    end

    # Returns true if the specified unit is subgroup leader
    # 
    # ==== Syntax
    #
    #      isLeader = isFormationLeader unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - Unit being checked.  
    #
    # ==== Returns
    #
    #      isLeader: Boolean - True if subgroup leader.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #formationLeader, #formLeader, #leader, #selectLeader
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isFormationLeader
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _isLeader = isFormationLeader player
    # 
    def isFormationLeader _args
      "isFormationLeader _args;" 
    end

    # Return whether the person is hidden (reached the hiding position)
    # 
    # ==== Syntax
    #
    #      Boolean = isHidden person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getHideFrom, #setHideBehind, #findCover
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isHidden
    #
    # ==== Examples
    # 
    def isHidden _args
      "isHidden _args;" 
    end

    # Returns true if there is a linked and enabled IR on a given weapon
    # 
    # ==== Syntax
    #
    #      unit isIRLaserOn weapon
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +weapon+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isIRLaserOn
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player isIRLaserOn (currentWeapon player);
    # 
    def isIRLaserOn _obj, _args
      "_obj isIRLaserOn _args;" 
    end

    # True if instructor figure is enabled in Game Options
    # 
    # ==== Syntax
    #
    #      isInstructorFigureEnabled
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isInstructorFigureEnabled
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def isInstructorFigureEnabled 
      "isInstructorFigureEnabled" 
    end

    # Checks whether the given key is active in the current user profile.
    # 
    # ==== Description
    # 
    # See keys, keysLimit and doneKeys in the description.
    # 
    # ext file of the missions
    #  
    # ==== Syntax
    #
    #      isKeyActive keyName
    #
    # ==== Parameters
    # 
    # *    +keyName+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #activateKey, #deActivateKey
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isKeyActive
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ok = isKeyActive "Mission04Key"
    # 
    def isKeyActive _args
      "isKeyActive _args;" 
    end

    # Checks whether the object is (a subtype) of the given type
    # 
    # ==== Syntax
    #
    #      Boolean = typeName1 isKindOf typeName2
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +typeName+ - String  
    # *    +typeName1+ - String  
    # *    +typeName2+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #countType, #typeOf, #inheritsFrom, Arma 2 CfgVehicles
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isKindOf
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    vehicle player isKindOf "Tank"
    # 
    # ====== Example 2:
    # 
    #    "BMP2" isKindOf "Tank"
    # 
    def isKindOf _obj, _args
      "_obj isKindOf _args;" 
    end

    # Checks whether given string name is localized
    # 
    # ==== Syntax
    #
    #      isLocalized stringName
    #
    # ==== Parameters
    # 
    # *    +stringName+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isLocalized
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    isLocalized "STR_DN_SNAKE"
    # 
    def isLocalized _args
      "isLocalized _args;" 
    end

    # Returns true if manual fire is on.
    # 
    # ==== Description
    # 
    # Always returns false for a soldier
    #  
    # ==== Syntax
    #
    #      isManualFire vehicleName
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isManualFire
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _bool = isManualFire vehicle player; 
    # 
    def isManualFire _args
      "isManualFire _args;" 
    end

    # Checks whether the object is marked for weapons collection
    # 
    # ==== Syntax
    #
    #      Boolean = isMarkedForCollection object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isMarkedForCollection
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _marked = isMarkedForCollection _truck
    # 
    def isMarkedForCollection _args
      "isMarkedForCollection _args;" 
    end

    # Return true if multiPlayer
    # 
    # ==== Syntax
    #
    #      isMultiplayer
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isMultiplayer
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (isMultiplayer) then {
    #    	//...block
    #    }
    # 
    def isMultiplayer 
      "isMultiplayer" 
    end

    # Tests whether the variable defined by the String argument is undefined, or whether an expression result passed as Code is undefined.
    # 
    # ==== Description
    # 
    # The function returns true if the variable is undefined or the expression result undefined (i.
    # 
    # e.
    # 
    # the expression result is Void), and false in all other cases
    #  
    # ==== Syntax
    #
    #      Boolean = isnil variable
    #
    # ==== Parameters
    # 
    # *    +variable+ - String or Code  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isnil
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     if (isnil ("_pokus")) then {_pokus=0;} 
    # 
    def isnil _args
      "isnil _args;" 
    end

    # Checks whether the tested item is Null.
    # 
    # ==== Description
    # 
    # Which null type the item has to be equal to depends on the type of object tested: Objects -> objNull
    # 
    # Controls -> controlNull
    # 
    # Displays -> displayNull
    # 
    # Groups -> grpNull
    # 
    # Locations -> locationNull (since ARMA 2)
    # 
    # Tasks -> taskNull (since ARMA 2)
    # 
    # Note: A test via == does not work, because, for example, objNull is not equal to anything, not even to itself
    #  
    # ==== Syntax
    #
    #      isNull obj
    #
    # ==== Parameters
    # 
    # *    +obj+ - Object, Control, Display, Group (or Location, Task since ARMA 2)  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #controlNull, #displayNull, #grpNull, #locationNull, #objNull, #taskNull, #teamMemberNull
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isNull
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (isNull obj) then {hint "doesn't exist"} 
    # 
    def isNull _args
      "isNull _args;" 
    end

    # Check if config entry represents number
    # 
    # ==== Syntax
    #
    #      Boolean = isNumber config
    #
    # ==== Parameters
    # 
    # *    +config+ - Config  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #configFile, #config/name, #configName, #count, #getArray, #getText, #getNumber, #inheritsFrom, #isArray, #isClass, #isText, #select
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isNumber
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _ok = isNumber (configFile >> "CfgVehicles")
    #    Result is false
    # 
    def isNumber _args
      "isNumber _args;" 
    end

    # Check whether given position is on road
    # 
    # ==== Syntax
    #
    #      isOnRoad position or object
    #
    # ==== Parameters
    # 
    # *    +position or object+ - Object or Array -  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isOnRoad
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ConeRoad = isOnRoad getPos cone1;
    # 
    def isOnRoad _args
      "isOnRoad _args;" 
    end

    # Returns true if PiP is enabled
    # 
    # ==== Syntax
    #
    #      isPipEnabled
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isPipEnabled
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def isPipEnabled 
      "isPipEnabled" 
    end

    # Check if given person is a human player
    # 
    # ==== Syntax
    #
    #      isPlayer person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isPlayer
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (isPlayer _Soldier1) then {_Soldier1 setDamage 1;};
    # 
    def isPlayer _args
      "isPlayer _args;" 
    end

    # Returns true if the mission editor is operating in real time mode
    # 
    # ==== Syntax
    #
    #      isRealTime map
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isRealTime
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _isRealTime = isRealTime _map
    # 
    def isRealTime _args
      "isRealTime _args;" 
    end

    # Returns true if the machine is either a server in a multiplayer game or if it is running a singleplayer game
    # 
    # ==== Syntax
    #
    #      Boolean = isServer
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #isDedicated
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isServer
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (!isServer) exitWith {}
    # 
    def isServer 
      "isServer" 
    end

    # Returns true if the editor is set to draw 3D icons
    # 
    # ==== Syntax
    #
    #      isShowing3DIcons map
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isShowing3DIcons
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def isShowing3DIcons _args
      "isShowing3DIcons _args;" 
    end

    # Returns true if mission is started from the steam
    # 
    # ==== Syntax
    #
    #      isSteamMission
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isSteamMission
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def isSteamMission 
      "isSteamMission" 
    end

    # True if stream friendly UI is enabled in Game Options
    # 
    # ==== Syntax
    #
    #      isStreamFriendlyUIEnabled
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isStreamFriendlyUIEnabled
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def isStreamFriendlyUIEnabled 
      "isStreamFriendlyUIEnabled" 
    end

    # Check if config entry represents text
    # 
    # ==== Syntax
    #
    #      Boolean = isText config
    #
    # ==== Parameters
    # 
    # *    +config+ - Config  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #configFile, #config/name, #configName, #count, #getArray, #getText, #getNumber, #inheritsFrom, #isArray, #isClass, #isNumber, #select
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _ok = isText (configFile >> "CfgVehicles") 
    #    Result is false
    # 
    def isText _args
      "isText _args;" 
    end

    # Returns true if object is touching the ground
    # 
    # ==== Syntax
    #
    #      isTouchingGround object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isTouchingGround
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (isTouchingGround player) then {hint "Terraferma!";};
    # 
    def isTouchingGround _args
      "isTouchingGround _args;" 
    end

    # True if tutorial hints are enabled in Game Options
    # 
    # ==== Syntax
    #
    #      isTutHintsEnabled
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isTutHintsEnabled
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def isTutHintsEnabled 
      "isTutHintsEnabled" 
    end

    # Returns true if UAV is connected to some terminal
    # 
    # ==== Syntax
    #
    #      isUavConnected uav
    #
    # ==== Parameters
    # 
    # *    +uav+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #showUavFeed, #shownUavFeed, #allUnitsUav, #getConnectedUav, #uavControl
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isUavConnected
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    bool = isUavConnected cursorTarget
    # 
    def isUavConnected _args
      "isUavConnected _args;" 
    end

    # Returns true if walk is toggled
    # 
    # ==== Syntax
    #
    #      isWalking unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/isWalking
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _bool = isWalking player; 
    # 
    def isWalking _args
      "isWalking _args;" 
    end

    # Get array with items from ammo box (or any general weapon holder container)
    # 
    # ==== Syntax
    #
    #      itemCargo box
    #
    # ==== Parameters
    # 
    # *    +box+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/itemCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def itemCargo _args
      "itemCargo _args;" 
    end

    # Returns an array of names of all special items of a vehicle or a soldier
    # 
    # ==== Syntax
    #
    #      items unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/items
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _itemsplayer = items player; 
    # 
    # ====== Example 2:
    # 
    #    player sideChat format["%1", items player];
    # 
    def items _args
      "items _args;" 
    end

    # Returns combined array including all unit's items and all unit's magazines.
    # 
    # ==== Description
    # 
    # Loaded magazines such as currentMagazine, primaryWeaponMagazine, secondaryWeaponMagazine, handgunMagazine as well as assignedItems are excluded
    #  
    # ==== Syntax
    #
    #      itemsWithMagazines unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeAllItemsWithMagazines
    # 
    # Official Wiki: https://community.bistudio.com/wiki/itemsWithMagazines
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    itemsWithMagazines player
    #    //is essentially the same as
    #    items player + magazines player
    #    [
    #    	"FirstAidKit",			//item
    #    	"30Rnd_65x39_caseless_mag",	//magazine
    #    	"16Rnd_9x21_Mag",		//magazine
    #    	"Chemlight_green",		//magazine
    #    	"HandGrenade",			//magazine
    #    	"ToolKit",			//item
    #    	"MineDetector"			//item
    #    ]
    # 
    def itemsWithMagazines _args
      "itemsWithMagazines _args;" 
    end

    # Join all units in the array to given group.
    # 
    # ==== Description
    # 
    # 
    # 
    # Maximum number of group members is:
    # 
    # OFP: 12
    # 
    # Arma: ?
    # 
    # Arma 2: ?
    # 
    # Arma 3: "unlimited" (3000+)
    # 
    # VBS 2: "unlimited" (260+)
    # 
    # To have a group member leave a group, join him with the grpNull group (e.
    # 
    # g.
    # 
    # [guy1] join grpNull)
    #  
    # ==== Syntax
    #
    #      unitArray join group
    #
    # ==== Parameters
    # 
    # *    +unitArray+ - Array  
    # *    +group+ - Group or Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # This function is unsupported in MP in version 1.33 and before.
    # 
    # ==== See Also
    # 
    # #joinAs, #joinAsSilent, #joinSilent, #group, #leader
    # 
    # Official Wiki: https://community.bistudio.com/wiki/join
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_unitOne, _unitTwo] join player
    # 
    # ====== Example 2:
    # 
    #    [_unitOne, _unitTwo] join (group player)
    # 
    def join _obj, _args
      "_obj join _args;" 
    end

    # Joins the unit to the given group, if position id is available, this one is used
    # 
    # ==== Syntax
    #
    #      unit joinAs [group, id]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +[group, id]+ - Array  
    # *    +group+ - Group  
    # *    +id+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #join, #joinAsSilent, #joinSilent, #group
    # 
    # Official Wiki: https://community.bistudio.com/wiki/joinAs
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player joinAs [_group, 4]
    # 
    def joinAs _obj, _args
      "_obj joinAs _args;" 
    end

    # Joins the unit to the given group, if position id is available, this one is used.
    # 
    # ==== Description
    # 
    # Avoid any radio communication related to joining
    #  
    # ==== Syntax
    #
    #      unit joinAsSilent [group, id]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +[group, id]+ - Array  
    # *    +group+ - Group  
    # *    +id+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #join, #joinAs, #joinSilent
    # 
    # Official Wiki: https://community.bistudio.com/wiki/joinAsSilent
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player joinAsSilent [_group, 4]
    # 
    def joinAsSilent _obj, _args
      "_obj joinAsSilent _args;" 
    end

    # Join all units in the array to given group silently (without radio message)
    # 
    # ==== Syntax
    #
    #      unitArray joinSilent group
    #
    # ==== Parameters
    # 
    # *    +unitArray+ - Array  
    # *    +group+ - Object or Group  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #join, #joinAs, #joinAsSilent, #group, #leader
    # 
    # Official Wiki: https://community.bistudio.com/wiki/joinSilent
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_unitOne, _unitTwo] joinSilent (group player)
    # 
    # ====== Example 2:
    # 
    #    [_unitOne, _unitTwo] joinSilent player
    # 
    def joinSilent _obj, _args
      "_obj joinSilent _args;" 
    end

    # Register knowledge base database to given person
    # 
    # ==== Syntax
    #
    #      Boolean = person kbAddDatabase filename
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +filename+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/kbAddDatabase
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _unit kbAddDatabase "chat.txt"
    # 
    def kbAddDatabase _obj, _args
      "_obj kbAddDatabase _args;" 
    end

    # Register target list knowledge base database to given person
    # 
    # ==== Syntax
    #
    #      Boolean = person kbAddDatabaseTargets filename
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +filename+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/kbAddDatabaseTargets
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _unit kbAddDatabase "chat.txt"
    # 
    def kbAddDatabaseTargets _obj, _args
      "_obj kbAddDatabaseTargets _args;" 
    end

    # Check if conversation topic was registered to given person
    # 
    # ==== Syntax
    #
    #      Boolean = person kbHasTopic TopicName
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +TopicName+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/kbHasTopic
    #
    # ==== Examples
    # 
    def kbHasTopic _obj, _args
      "_obj kbHasTopic _args;" 
    end

    # Pass a non-verbal communication to the receiver
    # 
    # ==== Syntax
    #
    #      person kbReact [receiver,topic,sentence id,[argument name,argument value,argument text,argument speech],...]
    #
    # ==== Parameters
    # 
    # *    +person+ - -  
    # *    +[receiver,topic,sentence id,[argument name,argument value,argument text,argument speech],...]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/kbReact
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def kbReact _obj, _args
      "_obj kbReact _args;" 
    end

    # Unregister conversation topic from given person
    # 
    # ==== Syntax
    #
    #      person kbRemoveTopic TopicName
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +TopicName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/kbRemoveTopic
    #
    # ==== Examples
    # 
    def kbRemoveTopic _obj, _args
      "_obj kbRemoveTopic _args;" 
    end

    # Make the person tell to the receiver the sentence
    # 
    # ==== Syntax
    #
    #      person kbTell [receiver, TopicName, SentenceClass, [argument name, argument value, argument text, argument speech], ...{,forceRadio}]
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +[receiver, TopicName, SentenceClass, [argument name, argument value, argument text, argument speech], ...{,forceRadio}]+ - Array  
    # *    +receiver+ - Object  
    # *    +TopicName, SentenceClass, argument name+ - Strings  
    # *    +argument value+ - Code  
    # *    +argument text+ - String  
    # *    +forceRadio optional+ - Boolean true/false to force use of radio, Number 1-10 to force use of custom radio channel, or String name of radio channel to use 'GLOBAL', 'SIDE', 'GROUP', 'VEHICLE', 'DIRECT', 'COMMAND'  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #kbAddTopic, #kbHasTopic, #kbRemoveTopic
    # 
    # Official Wiki: https://community.bistudio.com/wiki/kbTell
    #
    # ==== Examples
    # 
    def kbTell _obj, _args
      "_obj kbTell _args;" 
    end

    # Returns a structured text, containing an image or name (if no image is found) of the button, on the keyboard, mouse or joystick, with the given code
    # 
    # ==== Syntax
    #
    #      Structured Text =  keyImage dikcode
    #
    # ==== Parameters
    # 
    # *    +dikCode+ - Number  
    #
    # ==== Returns
    #
    #      Structured Text
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # DIK KeyCodes
    # 
    # Official Wiki: https://community.bistudio.com/wiki/keyImage
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _name = keyImage 28 .... result is "Enter"
    # 
    def keyImage _args
      "keyImage _args;" 
    end

    # Returns the name of a button (on the keyboard, mouse or joystick) with the given code
    # 
    # ==== Syntax
    #
    #      String = keyName dikCode
    #
    # ==== Parameters
    # 
    # *    +dikCode+ - Number  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # DIK KeyCodes
    # 
    # Official Wiki: https://community.bistudio.com/wiki/keyName
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _name = keyName 28 .... result is "Enter"
    # 
    def keyName _args
      "keyName _args;" 
    end

    # Check if (and by how much) unit knows about target.
    # 
    # ==== Description
    # 
    # If unit is vehicle, vehicle commander is considered
    #  
    # ==== Syntax
    #
    #      Number = unit knowsAbout target
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object or Group  
    # *    +target+ - Object  
    #
    # ==== Returns
    #
    #      Number (from 0 to 4)
    #
    # ==== Multiplayer
    # 
    # Although the command works only properly if unit is local, target can be located on any computer of the network.
    # 
    # ==== See Also
    # 
    # #nearTargets, #reveal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/knowsAbout
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _kv = _soldierOne knowsAbout _jeepOne
    # 
    def knowsAbout _obj, _args
      "_obj knowsAbout _args;" 
    end

    # Force helicopter landing.
    # 
    # ==== Description
    # 
    # Landing mode may be:
    # 
    # "LAND" (complete stop)
    # 
    # "GET IN" (hovering very low, for another unit to get in)
    # 
    # "GET OUT" (hovering low,for another unit to get out)
    # 
    # "NONE" (cancel a landing) Available since ArmA 2 57463 build
    #  
    # ==== Syntax
    #
    #      helicopter land mode
    #
    # ==== Parameters
    # 
    # *    +helicopter+ - Object  
    # *    +mode+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #landAt
    # 
    # Official Wiki: https://community.bistudio.com/wiki/land
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _cobraOne land "LAND"
    # 
    def land _obj, _args
      "_obj land _args;" 
    end

    # Order an AI airplane to land at a given airport.
    # 
    # ==== Description
    # 
    # ID is the number to identify which airport on the island you want
    #  
    # ==== Syntax
    #
    #      plane landAt id
    #
    # ==== Parameters
    # 
    # *    +plane+ - Object  
    # *    +id+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #land
    # 
    # Official Wiki: https://community.bistudio.com/wiki/landAt
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _plane1 landAt 1
    # 
    def landAt _obj, _args
      "_obj landAt _args;" 
    end

    # Return the result of helicopter landing position searching (performed, after land command).
    # 
    # ==== Description
    # 
    # The value can be "Found" (position found),"NotFound" (position not found), "NotReady" (position searching is,still in progress) or empty string when wrong argument given
    #  
    # ==== Syntax
    #
    #      landResult helicopter
    #
    # ==== Parameters
    # 
    # *    +helicopter+ - Object -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #land
    # 
    # Official Wiki: https://community.bistudio.com/wiki/landResult
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def landResult _args
      "landResult _args;" 
    end

    # Returns current game language
    # 
    # ==== Syntax
    #
    #      language
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/language
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def language 
      "language" 
    end

    # Returns target created by given unit (gunner in vehicle or on foot)
    # 
    # ==== Syntax
    #
    #      laserTarget unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #cursorTarget
    # 
    # Official Wiki: https://community.bistudio.com/wiki/laserTarget
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _target = laserTarget gunner heli; 
    # 
    # ====== Example 2:
    # 
    #    _designatedPos = position laserTarget player; 
    # 
    def laserTarget _args
      "laserTarget _args;" 
    end

    # Adds an item with the given text to the listbox or combobox with id idc of the topmost user dialog.
    # 
    # ==== Description
    # 
    # It returns the index of the newly added item
    #  
    # ==== Syntax
    #
    #      control lbAdd text
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +text+ - String  
    # *    +control+ - Control  
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbAdd
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _index = lbAdd [101, "First item"]
    # 
    # ====== Example 2:
    # 
    #    _index = _control lbAdd "First item"
    # 
    def lbAdd _obj, _args
      "_obj lbAdd _args;" 
    end

    # Clear all items in listbox or combobox with id idc of topmost user dialog
    # 
    # ==== Syntax
    #
    #      lbClear control
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +control+ - Control  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbClear
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    lbClear 101
    # 
    def lbClear _args
      "lbClear _args;" 
    end

    # Returns the text color of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.
    # 
    # ==== Description
    # 
    # The color is returned in format Color
    #  
    # ==== Syntax
    #
    #      control lbColor index
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +index+ - Number  
    # *    +control+ - Control  
    # *    +index+ - Number  
    #
    # ==== Returns
    #
    #      Array - format Color
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lbSetColor
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbColor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _colour = lbColor [101, 0]
    # 
    # ====== Example 2:
    # 
    #    _color = _control lbColor 0
    # 
    def lbColor _obj, _args
      "_obj lbColor _args;" 
    end

    # Returns the index of the selected item of the listbox or combobox with id idc of the topmost user dialog
    # 
    # ==== Syntax
    #
    #      Number = lbCurSel control
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +control+ - Control  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lbSetCurSel
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbCurSel
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _index = lbCurSel 101
    # 
    def lbCurSel _args
      "lbCurSel _args;" 
    end

    # Returns the additional text (invisible) in an item with the given index of the listbox or combobox with id idc of the topmost user dialog
    # 
    # ==== Syntax
    #
    #      String = control lbData index
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +index+ - Number  
    # *    +control+ - Control  
    # *    +index+ - Number  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lbSetData
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbData
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _data = lbData [101, 0]
    # 
    # ====== Example 2:
    # 
    #    _data = _control lbData 0
    # 
    def lbData _obj, _args
      "_obj lbData _args;" 
    end

    # Removes the item with the given index from the listbox or combobox with id idc of the topmost user dialog
    # 
    # ==== Syntax
    #
    #      control lbDelete index
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +index+ - Number  
    # *    +control+ - Control  
    # *    +index+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbDelete
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    lbDelete [101, 0]
    # 
    # ====== Example 2:
    # 
    #    _control lbDelete 0
    # 
    def lbDelete _obj, _args
      "_obj lbDelete _args;" 
    end

    # Check whether given row of the given listbox is selected
    # 
    # ==== Syntax
    #
    #      Boolean = control lbIsSelected index
    #
    # ==== Parameters
    # 
    # *    +control+ - Control  
    # *    +index+ - Number  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lbSelection, #lbSetSelected
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbIsSelected
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _selected = _control lbIsSelected 0
    # 
    def lbIsSelected _obj, _args
      "_obj lbIsSelected _args;" 
    end

    # Returns the picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog
    # 
    # ==== Syntax
    #
    #      control lbSetPicture index
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +index+ - Number  
    # *    +control+ - Control  
    # *    +index+ - Number  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lbSetPicture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbSetPicture
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _picture = lbPicture [101, 0]
    # 
    # ====== Example 2:
    # 
    #    _picture = _control lbPicture 0
    # 
    def lbSetPicture _obj, _args
      "_obj lbSetPicture _args;" 
    end

    # Returns the array of selected rows indices in the given listbox
    # 
    # ==== Syntax
    #
    #      Array = lbSelection control
    #
    # ==== Parameters
    # 
    # *    +control+ - Control  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lbSetSelected
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbSelection
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _indices = lbSelection _control
    # 
    def lbSelection _args
      "lbSelection _args;" 
    end

    # Sets the color of the item with the given index of the listbox or combobox with id idc of the topmost user dialog to color.
    # 
    # ==== Description
    # 
    # Colour is in format Color
    #  
    # ==== Syntax
    #
    #      control lbSetColor [index, color]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +index+ - Number  
    # *    +color+ - Color  
    # *    +control+ - Control  
    # *    +[index, color]+ - Array  
    # *    +index+ - Number  
    # *    +color+ - Color  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lbColor
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbSetColor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    lbSetColor [101, 0, [0, 1, 0, 0.5]]
    # 
    # ====== Example 2:
    # 
    #    _control lbSetColor [0, [0, 1, 0, 0.5]]
    # 
    def lbSetColor _obj, _args
      "_obj lbSetColor _args;" 
    end

    # Selects the item with the given index of the listbox or combobox with id idc of the topmost user dialog
    # 
    # ==== Syntax
    #
    #      control lbSetCurSel index
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +index+ - Number  
    # *    +control+ - Control  
    # *    +index+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lbCurSel
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbSetCurSel
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    lbSetCurSel [101, 0]
    # 
    # ====== Example 2:
    # 
    #    _control lbSetCurSel 0
    # 
    def lbSetCurSel _obj, _args
      "_obj lbSetCurSel _args;" 
    end

    # Sets the additional text (invisible) in the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given data
    # 
    # ==== Syntax
    #
    #      control lbSetData [index, data]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +index+ - Number  
    # *    +data+ - String  
    # *    +control+ - Control  
    # *    +[index, data]+ - Array  
    # *    +index+ - Number  
    # *    +data+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lbData
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbSetData
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    lbSetData [101, 1, "#1"]
    # 
    # ====== Example 2:
    # 
    #    _control lbSetData [1, "#1"]
    # 
    def lbSetData _obj, _args
      "_obj lbSetData _args;" 
    end

    # Sets the picture in the item with the given index of the listbox or combobox with id idc of the topmost user dialog.
    # 
    # ==== Description
    # 
    # Name is the picture name.
    # 
    # The picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory)
    #  
    # ==== Syntax
    #
    #      control lbSetPicture [index, name]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +index+ - Number  
    # *    +name+ - String  
    # *    +control+ - Control  
    # *    +[index, name]+ - Array  
    # *    +index+ - Number  
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lbPicture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbSetPicture
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    lbSetPicture [101, 0, "iskoda"]
    # 
    # ====== Example 2:
    # 
    #    _control lbSetPicture [0, "iskoda"]
    # 
    def lbSetPicture _obj, _args
      "_obj lbSetPicture _args;" 
    end

    # Set the selection state of the given row of the given listbox.
    # 
    # ==== Description
    # 
    # Listbox must support multiple selection
    #  
    # ==== Syntax
    #
    #      control lbSetSelected [index, selected]
    #
    # ==== Parameters
    # 
    # *    +control+ - Control  
    # *    +[index, selected]+ - Array  
    # *    +index+ - Number  
    # *    +selected+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lbSelection
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbSetSelected
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control lbSetSelected [0, true]
    # 
    def lbSetSelected _obj, _args
      "_obj lbSetSelected _args;" 
    end

    # Sets tooltip for item with given index of the listbox or combobox with id idc of the topmost user dialog to the given data
    # 
    # ==== Syntax
    #
    #      lbSetTooltip [idc, index, tooltip]
    #
    # ==== Parameters
    # 
    # *    +tooltip+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbSetTooltip
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    lbSetTooltip [101, 1, "tooltip"]
    # 
    def lbSetTooltip _args
      "lbSetTooltip _args;" 
    end

    # Sets the additional integer value in the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given value
    # 
    # ==== Syntax
    #
    #      control lbSetValue [index, value]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +index+ - Number  
    # *    +value+ - Number  
    # *    +control+ - Control  
    # *    +[index, value]+ - Array  
    # *    +idc+ - Number of control  
    # *    +value+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lbSortByValue, #lbValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbSetValue
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    lbSetValue [101, 0, 1]
    # 
    # ====== Example 2:
    # 
    #    _control lbSetValue [0, 1]
    # 
    def lbSetValue _obj, _args
      "_obj lbSetValue _args;" 
    end

    # Return number of items of listbox or combobox with id idc of topmost user dialog
    # 
    # ==== Syntax
    #
    #      lbSize control
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +control+ - Control  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbSize
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _size = lbSize 101
    # 
    # ====== Example 2:
    # 
    #    _size = lbSize _control
    # 
    def lbSize _args
      "lbSize _args;" 
    end

    # Sorts listbox entries alphabetical by their text
    # 
    # ==== Syntax
    #
    #      lbSort control
    #
    # ==== Parameters
    # 
    # *    +control+ - Control  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lbSortByValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbSort
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    lbSort _myControl
    # 
    def lbSort _args
      "lbSort _args;" 
    end

    # Sorts the Listbox Entries by their assigned Values.
    # 
    # ==== Description
    # 
    # The Entries getting listed by their Negativity (most negative Value on Top).
    # 
    # Also note that this Command will mix up the Entries randomly if multiple Entries have the same Value
    #  
    # ==== Syntax
    #
    #      lbSortByValue control
    #
    # ==== Parameters
    # 
    # *    +control+ - Given Control  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lbSetValue, #lbValue, #lbSort
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbSortByValue
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    lbSortByValue _control
    # 
    def lbSortByValue _args
      "lbSortByValue _args;" 
    end

    # Returns the shown text in the item with the given index of the listbox or combobox with id idc of the topmost user dialog
    # 
    # ==== Syntax
    #
    #      control lbText index
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +index+ - Number  
    # *    +control+ - Control  
    # *    +index+ - Number  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _text = lbText [101, 0]
    # 
    # ====== Example 2:
    # 
    #    _text = _control lbText 0
    # 
    def lbText _obj, _args
      "_obj lbText _args;" 
    end

    # Returns the additional integer value in the item with the given index of the listbox or combobox with id idc of the topmost user dialog
    # 
    # ==== Syntax
    #
    #      control lbValue index
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +index+ - Number  
    # *    +control+ - Control  
    # *    +index+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lbSetValue, #lbSortByValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lbValue
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _value = lbValue [101, 0]
    # 
    # ====== Example 2:
    # 
    #    _value = _control lbValue 0 
    # 
    def lbValue _obj, _args
      "_obj lbValue _args;" 
    end

    # Returns the group leader for the given unit or group.
    # 
    # ==== Description
    # 
    # For dead units, objNull is returned
    #  
    # ==== Syntax
    #
    #      Object = leader unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object or Group  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #formationLeader, #formLeader, #isFormationLeader, #selectLeader
    # 
    # Official Wiki: https://community.bistudio.com/wiki/leader
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    leader group player == leader player 
    # 
    # ====== Example 2:
    # 
    #    _GroupLeader = leader (group (vehicle player)) 
    # 
    # ====== Example 3:
    # 
    #    _UnitLeader = leader player 
    # 
    def leader _args
      "leader _args;" 
    end

    # Ceases the using of the vehicle by either a unit or a group.
    # 
    # ==== Description
    # 
    # It unassigns them from the vehicle
    #  
    # ==== Syntax
    #
    #      group leaveVehicle vehicle
    #
    # ==== Parameters
    # 
    # *    +group+ - Object or Group  
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addVehicle, #assignAsCargo, #assignAsCommander, #assignAsDriver, #assignAsGunner, #assignedVehicle, #unassignVehicle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/leaveVehicle
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    soldierOne leaveVehicle jeepOne
    # 
    # ====== Example 2:
    # 
    #    groupOne leaveVehicle jeepOne
    # 
    def leaveVehicle _obj, _args
      "_obj leaveVehicle _args;" 
    end

    # Returns the credits for the libraries used by the game
    # 
    # ==== Syntax
    #
    #      libraryCredits
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array - [array1, array2, (..), arrayN] all under the form [libraryName, credits]
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #libraryDisclaimers
    # 
    # Official Wiki: https://community.bistudio.com/wiki/libraryCredits
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint str libraryCredits;   // as in Arma2 OA 1.62.95208
    #    /*
    #    [
    #    	[
    #    		"Botan",
    #    		"1999-2012 Jack Lloyd, 2001 Peter J Jones, 2004-2007 Justin Karneges, 2004 Vaclav Ovsik, 2005 Matthew Gregan, 2005-2006 Matt Johnston, 2006 Luca Piccarreta, 2007 Yves Jerschow, 2007-2008 FlexSecure GmbH, 2007-2008 Technische Universitat Darmstadt, 2007-2008 Falko Strenzke, 2007-2008 Martin Doering, 2007 Manuel Hartl, 2007 Christoph Ludwig, 2007 Patrick Sona, 2010 Olivier de Gaalon"
    #    	],
    #    	[
    #    		"rapidjson",
    #    		"2011 Milo Yip"
    #    	],
    #    	[
    #    		"libcurl",
    #    		"Copyright (c) 1996 - 2012, Daniel Stenberg"
    #    	],
    #    	[
    #    		"GameSpy",
    #    		"2009 GameSpy Industries, Inc."
    #    	],
    #    	[
    #    		"Theora",
    #    		"2002-2009 by the Xiph.Org Foundation http://www.xiph.org/"
    #    	],
    #    	[
    #    		"OggVorbis",
    #    		"1994-2002 by the Xiph.Org Foundation http://www.xiph.org/"
    #    	],
    #    	[
    #    		"Intel JPEG Library",
    #    		"1998 Intel Corporation"
    #    	],
    #    	[
    #    		"Matrix Template Library",
    #    		"2001-2005 The Trustees of Indiana University"
    #    	],
    #    	[
    #    		"Matrix Template Library",
    #    		"1998-2001 University of Notre Dame"
    #    	],
    #    	[
    #    		"Speex",
    #    		"2002-2006 Jean-Marc Valin"
    #    	],
    #    	[
    #    		"LZO Professional",
    #    		"1996-2011 Markus Franz Xaver Johannes Oberhumer"
    #    	],
    #    	[
    #    		"NVIDIA FXAA by TIMOTHY LOTTES",
    #    		"2010, 2011 NVIDIA CORPORATION"
    #    	],
    #    	[
    #    		"Jimenez's MLAA",
    #    		"2012 2011 by Jorge Jimenez, Belen Masia, Jose I. Echevarria, Fernando Navarro and Diego Gutierrez"
    #    	]
    #    ]
    #    */
    # 
    def libraryCredits 
      "libraryCredits" 
    end

    # Returns the library disclaimers
    # 
    # ==== Syntax
    #
    #      libraryDisclaimers
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array - [array1] - only has one element at the moment, but this number might grow
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #libraryCredits
    # 
    # Official Wiki: https://community.bistudio.com/wiki/libraryDisclaimers
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint str libraryDisclaimers;   // as in Arma2 OA 1.62.95208
    #    ["THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."]
    # 
    def libraryDisclaimers 
      "libraryDisclaimers" 
    end

    # Returns the life state of the given unit.
    # 
    # ==== Description
    # 
    # Can be one of:
    # 
    # "ALIVE"
    # 
    # "UNCONSCIOUS"
    # 
    # "DEAD"
    # 
    # Since Arma 3 Alpha it can be one of:
    # 
    # "HEALTHY"
    # 
    # "INJURED"
    # 
    # "DEAD"
    # 
    # When "INJURED", "Treat XXXX" action menu and icon appear for the player or a 3rd party who is close with medkit or FAK
    #  
    # ==== Syntax
    #
    #      lifeState unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setUnconscious
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lifeState
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ls = lifeState loon;
    # 
    def lifeState _args
      "lifeState _args;" 
    end

    # Attach light to given object at given position on object
    # 
    # ==== Syntax
    #
    #      light lightAttachObject [object, position]
    #
    # ==== Parameters
    # 
    # *    +light+ - Object  
    # *    +[object, position]+ - Array  
    # *    +object+ - Object  
    # *    +position+ - Array - format Position  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setLightAmbient, #setLightBrightness, #lightDetachObject, #setLightColor, #setLightIntensity, #setLightAttenuation, #setLightUseFlare, #setLightFlareSize, #setLightFlareMaxDistance, #setLightDayLight
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lightAttachObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myLight lightAttachObject [myVehicle, [-0.5,-0.25,1]];
    # 
    def lightAttachObject _obj, _args
      "_obj lightAttachObject _args;" 
    end

    # Detach light from object
    # 
    # ==== Syntax
    #
    #      lightDetachObject light
    #
    # ==== Parameters
    # 
    # *    +light+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setLightAmbient, #setLightBrightness, #lightAttachObject, #setLightColor, #setLightIntensity, #setLightAttenuation, #setLightUseFlare, #setLightFlareSize, #setLightFlareMaxDistance, #setLightDayLight
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lightDetachObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    LightDetachObject _light
    # 
    def lightDetachObject _args
      "lightDetachObject _args;" 
    end

    # Check if lampost is on (shining).
    # 
    # ==== Description
    # 
    # Possible values are:
    # 
    # "ON"
    # 
    # "OFF"
    # 
    # "AUTO" (auto is only on during the night).
    # 
    # "ERROR"
    #  
    # ==== Syntax
    #
    #      lightIsOn lamppost
    #
    # ==== Parameters
    # 
    # *    +lamppost+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lightIsOn
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ?lightIsOn nearestObject [player, "StreetLamp"] == "ON" :hint "nightime"
    # 
    # ====== Example 2:
    # 
    #    _it = lightIsOn object 159582
    # 
    def lightIsOn _args
      "lightIsOn _args;" 
    end

    # Return the current lightnings value
    # 
    # ==== Syntax
    #
    #      lightnings
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setLightnings
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lightnings
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def lightnings 
      "lightnings" 
    end

    # Limit speed of given vehicle or person to given value (in km/h)
    # 
    # ==== Syntax
    #
    #      objectName limitSpeed speed
    #
    # ==== Parameters
    # 
    # *    +objectName+ - Object  
    # *    +speed+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #speed
    # 
    # Official Wiki: https://community.bistudio.com/wiki/limitSpeed
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    // Adjust "speedLimit" variable to change limited speed
    #    this setVariable ["speedLimit", 200];
    #    nul = this spawn {
    #    	while {canMove _this) } do {
    #    		_this limitSpeed (_this getVariable "speedLimit");
    #    		sleep 0.1;
    #    	};
    #    };
    # 
    def limitSpeed _obj, _args
      "_obj limitSpeed _args;" 
    end

    # Creates a structured text containing a line break
    # 
    # ==== Syntax
    #
    #      lineBreak
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Structured Text
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #composeText, #parseText, Structured Text, #text
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lineBreak
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _txt = composeText ["First line", lineBreak, "Second line"];
    # 
    def lineBreak 
      "lineBreak" 
    end

    # Checks for object intersection with a virtual line between two positions.
    # 
    # ==== Description
    # 
    # Returns true if intersects with an object
    #  
    # ==== Syntax
    #
    #      lineIntersects [begPos, endPos, objIgnore1, objIgnore2]
    #
    # ==== Parameters
    # 
    # *    +begPos+ - PositionASL  
    # *    +endPos+ - PositionASL  
    # *    +objIgnore1+ - (optional) Object - object to ignore. When testing intersection from an object/unit/vehicle, pass that object here to prevent intersection inside of the object.  
    # *    +objIgnore2+ - (optional) Object - another object to ignore. When testing intersection of a line between two objects, pass the second object here to prevent interesection inside of it being reported  
    #
    # ==== Returns
    #
    #      Boolean - true if intersection
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #intersect, #terrainIntersect, #terrainIntersectASL, #lineIntersectsWith, #lineIntersectsObjs
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lineIntersects
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    lineIntersects [eyePos player, aimPos chopper, player, chopper]
    # 
    def lineIntersects _args
      "lineIntersects _args;" 
    end

    # Returns list of objects intersected by given line from begPos to endPos
    # 
    # ==== Syntax
    #
    #      lineIntersectsObjs [begPos, endPos, withObj, ignoreObj, sortByDistance, flags]
    #
    # ==== Parameters
    # 
    # *    +begPos+ - PositionASL - virtual line start  
    # *    +endPos+ - PositionASL - virtual line end  
    # *    +withObj+ - Object  
    # *    +ignoreObj+ - Object  
    # *    +sortByDistance+ - Boolean - true: furthest object first, closest object last; false: unsorted  
    # *    +flags+ - Number:  
    # *    +Flags can be combined+ - 2 + 4 = 6 - CF_NEAREST_OBJECT + CF_ONLY_STATIC  
    #
    # ==== Returns
    #
    #      Array of Objects - intersecting objects
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lineIntersectsWith, #terrainIntersect, #terrainIntersectASL, #lineIntersects, #intersect
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lineIntersectsObjs
    #
    # ==== Examples
    # 
    def lineIntersectsObjs _args
      "lineIntersectsObjs _args;" 
    end

    # Returns objects intersecting with the virtual line from begPos to endPos.
    # 
    # ==== Description
    # 
    # By default resulting array of intersecting objects is unsorted.
    # 
    # To sort by distance set sortByDistance param to true
    #  
    # ==== Syntax
    #
    #      lineIntersectsWith [begPos, endPos, objIgnore1, objIgnore2, sortByDistance]
    #
    # ==== Parameters
    # 
    # *    +begPos+ - PositionASL - virtual line start  
    # *    +endPos+ - PositionASL - virtual line end  
    # *    +objIgnore1+ - (optional) Object - object to ignore. When testing intersection from an object/unit/vehicle, pass that object here to prevent intersection inside of the object.  
    # *    +objIgnore2+ - (optional) Object - another object to ignore. When testing intersection of a line between two objects, pass the second object here to prevent intersection inside of it being reported  
    # *    +sortByDistance+ - (optional) Boolean - true: Sort by distance => furthermost object first, closest object last; false: unsorted  
    #
    # ==== Returns
    #
    #      Array - intersecting objects
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lineIntersectsObjs, #intersect, #terrainIntersect, #terrainIntersectASL, #lineIntersects
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lineIntersectsWith
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _objects = lineIntersectsWith [eyePos player, ATLtoASL screenToWorld [0.5,0.5]];
    # 
    # ====== Example 2:
    # 
    #    Sort by distance: _objects = lineIntersectsWith [eyePos player, ATLtoASL screenToWorld [0.5,0.5], objNull, objNull, true];
    # 
    # ====== Example 3:
    # 
    #    Ignore objects: _objects = lineIntersectsWith [eyePos player, aimPos chopper, player, chopper];
    # 
    def lineIntersectsWith _args
      "lineIntersectsWith _args;" 
    end

    # Converts value in interval [min, max] to newMin + a*(max-min)/(newMax - newMin), potentially clamps the final value
    # 
    # ==== Syntax
    #
    #      linearConversion [min, max, value, newMin, newMax, clamp]
    #
    # ==== Parameters
    # 
    # *    +min+ - Number  
    # *    +max+ - Number  
    # *    +value+ - Number  
    # *    +newMin+ - Number  
    # *    +newMax+ - Number  
    # *    +clamp+ - Boolean  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/linearConversion
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    linearConversion [4, 8, 5, 0, 1, false]
    # 
    def linearConversion _args
      "linearConversion _args;" 
    end

    # Create and assign item to the correct slot.
    # 
    # ==== Description
    # 
    # If there is an item in the targeted slot, it gets replaced
    #  
    # ==== Syntax
    #
    #      unit linkItem item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #unlinkItem, #addItem, #assignItem, #removeItem, #unassignItem, #assignedItems, #removeAllAssignedItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/linkItem
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    bluforUnit linkItem "NVGoggles";
    #    opforUnit linkItem "NVGoggles_OPFOR";
    #    independentUnit linkItem "NVGoggles_INDEP";
    # 
    def linkItem _obj, _args
      "_obj linkItem _args;" 
    end

    # List of units that would activate given Trigger.
    # 
    # ==== Description
    # 
    # It returns nothing before the simulation started, i.
    # 
    # e.
    # 
    # in (undelayed) init.
    # 
    # sqf files.
    # 
    # Returns a pointer to the trigger's list after the simulation started.
    # 
    # Since this is just a reference this means that the value in your local variable will change as the content of the trigger area changes.
    # 
    # To permanently copy the returned list to a different variable, use _mylist = +(list triggerOne).
    # 
    # The second example can be used inside the trigger (in that case, no need to name your trigger).
    # 
    # The list returned for trigger of type "Not present" is the same as that returned for type "present".
    # 
    # 
    # 
    # NOTE: While the command can query any trigger, local or remote, the result will be only for the trigger condition set on the local client.
    # 
    # See createTrigger for more info
    #  
    # ==== Syntax
    #
    #      Array =  list trigger
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    #
    # ==== Returns
    #
    #      Array or Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setTriggerActivation, #createTrigger
    # 
    # Official Wiki: https://community.bistudio.com/wiki/list
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _tlist = list _triggerOne; 
    # 
    # ====== Example 2:
    # 
    #    hint format ["%1", thislist]; 
    # 
    def list _args
      "list _args;" 
    end

    # Return the list of all objects of given type
    # 
    # ==== Syntax
    #
    #      map listObjects type
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +type+ - String -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/listObjects
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def listObjects _obj, _args
      "_obj listObjects _args;" 
    end

    # Natural logarithm of x
    # 
    # ==== Syntax
    #
    #      Number =  ln x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ln
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _nlog = ln 10 
    #    Result is 2.302
    # 
    def ln _args
      "ln _args;" 
    end

    # Adds list of rows of strings
    # 
    # ==== Syntax
    #
    #      lnbAddArray [IDC,[[[text,text],[value,..],[data,..]],[[text,text],[value,..],[data,..]],]]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lnbAddColumn, #lnbAddRow
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbAddArray
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbAddArray _args
      "lnbAddArray _args;" 
    end

    # Adds an item with the given text to the given listbox or combobox.
    # 
    # ==== Description
    # 
    # It returns the index of the newly added item
    #  
    # ==== Syntax
    #
    #      control lnbAddColumn position
    #
    # ==== Parameters
    # 
    # *    +control+ - Control -  
    # *    +position+ - Number -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lnbDeleteColumn, #lnbAddArray, #lnbAddRow
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbAddColumn
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ((findDisplay 1) displayCtrl 10) lnbAddColumn 0.16;
    # 
    def lnbAddColumn _obj, _args
      "_obj lnbAddColumn _args;" 
    end

    # Adds an row of strings
    # 
    # ==== Syntax
    #
    #      lnbAddRow [idc,[text,text,...]]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbAddRow
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbAddRow _args
      "lnbAddRow _args;" 
    end

    # Clears all items in the 2D listbox
    # 
    # ==== Syntax
    #
    #      lnbClear idc
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lnbDeleteColumn, #lnbDeleteRow
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbClear
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbClear _args
      "lnbClear _args;" 
    end

    # Returns the text color of the item with the given position of the 2D listbox.
    # 
    # ==== Description
    # 
    # The color is returned in format Color
    #  
    # ==== Syntax
    #
    #      lnbColor [idc,[row,column]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbColor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbColor _args
      "lnbColor _args;" 
    end

    # Returns the index of the selected row id 2D listbox
    # 
    # ==== Syntax
    #
    #      lnbCurSelRow idc
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbCurSelRow
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbCurSelRow _args
      "lnbCurSelRow _args;" 
    end

    # Returns the additional text (invisible) in an item with the given position of the 2D listbox
    # 
    # ==== Syntax
    #
    #      lnbData [idc,[row,column]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbData
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbData _args
      "lnbData _args;" 
    end

    # Removes column with given index
    # 
    # ==== Syntax
    #
    #      lnbDeleteColumn [idc,index]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lnbAddColumn, #lnbDeleteRow, #lnbClear
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbDeleteColumn
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbDeleteColumn _args
      "lnbDeleteColumn _args;" 
    end

    # Removes row with the given index from the given listbox or combobox
    # 
    # ==== Syntax
    #
    #      control lnbDeleteRow row
    #
    # ==== Parameters
    # 
    # *    +control+ - Control -  
    # *    +row+ - Number -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lnbAddRow, #lnbDeleteColumn, #lnbClear
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbDeleteRow
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbDeleteRow _obj, _args
      "_obj lnbDeleteRow _args;" 
    end

    # Returns the columns position in 2D listbox
    # 
    # ==== Syntax
    #
    #      lnbGetColumnsPosition idc
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbGetColumnsPosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbGetColumnsPosition _args
      "lnbGetColumnsPosition _args;" 
    end

    # Returns the picture name of the item with the given position of the 2D listbox
    # 
    # ==== Syntax
    #
    #      control lnbPicture [row, column]
    #
    # ==== Parameters
    # 
    # *    +IDC+ - Identifier Number of Control  
    # *    +Row+ - Index Number of Row  
    # *    +Column+ - Index Number of Column  
    # *    +Control+ - Given Control  
    # *    +[row, column]+ - Array  
    # *    +Row+ - Index Number of Row in given Control  
    # *    +Column+ - Index Number of Column in given Control  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lnbSetPicture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbPicture
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    lnbPicture [200, [1, 1]]
    # 
    # ====== Example 2:
    # 
    #    _control lnbPicture [1, 1]
    # 
    def lnbPicture _obj, _args
      "_obj lnbPicture _args;" 
    end

    # Sets the color of the item with the given position of the 2D listbox.
    # 
    # ==== Description
    # 
    # Color is in format Color
    #  
    # ==== Syntax
    #
    #      lnbSetColor [idc,[row,column],color]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbSetColor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbSetColor _args
      "lnbSetColor _args;" 
    end

    # Selects the row with the given index of the 2D listbox
    # 
    # ==== Syntax
    #
    #      lnbSetCurSelRow [idc,index]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbSetCurSelRow
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _lnb	=(findDisplay 300) displayCtrl 304;
    #    _lnb lnbSetCurSelRow 5;
    # 
    def lnbSetCurSelRow _args
      "lnbSetCurSelRow _args;" 
    end

    # Sets the additional text (invisible) in the item with the given position of the 2D listbox
    # 
    # ==== Syntax
    #
    #      lnbSetData [idc,[row,column],data]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbSetData
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbSetData _args
      "lnbSetData _args;" 
    end

    # Sets the picture in the item with the given position of the 2D listbox.
    # 
    # ==== Description
    # 
    # ,Name is the picture name.
    # 
    # The picture is searched in the mission,directory,the dtaExt subdirectory of the campaign directory and the,dtaExt directory and the data bank (or directory)
    #  
    # ==== Syntax
    #
    #      lnbSetPicture [idc, [row, column], name]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lnbPicture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbSetPicture
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    lnbSetPicture [101,[0,1],iskoda]
    # 
    def lnbSetPicture _args
      "lnbSetPicture _args;" 
    end

    # Sets the additional text (invisible) in the item with the given position of the 2D listbox
    # 
    # ==== Syntax
    #
    #      lnbSetText [idc,[row,column],data]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbSetText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbSetText _args
      "lnbSetText _args;" 
    end

    # Sets the additional integer value in the item with the position index of the 2D listbox
    # 
    # ==== Syntax
    #
    #      lnbSetValue [idc,[row,column],value]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbSetValue
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbSetValue _args
      "lnbSetValue _args;" 
    end

    # Returns size of 2D listbox as [rows, columns]
    # 
    # ==== Syntax
    #
    #      lnbSize idc
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number -  
    #
    # ==== Returns
    #
    #      [rows, columns]: Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbSize
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbSize _args
      "lnbSize _args;" 
    end

    # Returns the shown text in the item with the given position of the given 2D listbox
    # 
    # ==== Syntax
    #
    #      control lnbText [row,column]
    #
    # ==== Parameters
    # 
    # *    +control+ - Control -  
    # *    +[row,column]+ - Array -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbText _obj, _args
      "_obj lnbText _args;" 
    end

    # Returns the additional integer value in the item with the given position of the 2D listbox
    # 
    # ==== Syntax
    #
    #      lnbValue [idc,[row,column]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbValue
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbValue _args
      "lnbValue _args;" 
    end

    # Sets the additional text (invisible) in the item with the given position of the 2D listbox
    # 
    # ==== Syntax
    #
    #      lnbsetColumnsPos [idc,[row,column],data]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lnbsetColumnsPos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lnbsetColumnsPos _args
      "lnbsetColumnsPos _args;" 
    end

    # Returns current sum of mass from items stored in all unit's containers
    # 
    # ==== Syntax
    #
    #      load unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/load
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def load _args
      "load _args;" 
    end

    # Returns current sum of mass from items stored in all unit's containers, linked items and weapons
    # 
    # ==== Syntax
    #
    #      loadAbs unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/loadAbs
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def loadAbs _args
      "loadAbs _args;" 
    end

    # Returns current sum of mass from items stored in a backpack
    # 
    # ==== Syntax
    #
    #      loadBackpack unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/loadBackpack
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def loadBackpack _args
      "loadBackpack _args;" 
    end

    # Return content of given filename
    # 
    # ==== Syntax
    #
    #      String = loadFile filename
    #
    # ==== Parameters
    # 
    # *    +filename+ - String  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #preprocessFileLineNumbers, #preprocessFile
    # 
    # Official Wiki: https://community.bistudio.com/wiki/loadFile
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _contents = loadFile "myFunction.sqf"
    # 
    def loadFile _args
      "loadFile _args;" 
    end

    # Load a game from the autosave.
    # 
    # ==== Description
    # 
    # If failed, restart the mission
    #  
    # ==== Syntax
    #
    #      loadGame
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #enableSaving, #saveGame, #savingEnabled
    # 
    # Official Wiki: https://community.bistudio.com/wiki/loadGame
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    loadGame;
    # 
    def loadGame 
      "loadGame" 
    end

    # Loads person's identity from Objects.
    # 
    # ==== Description
    # 
    # sav file in campaign directory (from entry name)
    #  
    # ==== Syntax
    #
    #      person loadIdentity name
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # This command doesn't work in Multiplayer
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/loadIdentity
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ok = player loadIdentity "playerIdentity"
    # 
    def loadIdentity _obj, _args
      "_obj loadIdentity _args;" 
    end

    # Initiates the loading action on given weapon of the turret.
    # 
    # ==== Description
    # 
    # So the new magazine is not available instantly, yet according to the reloadTime.
    # 
    # The turret has to be manned.
    # 
    # One can also change the magazine if its respective weapon is not selected
    #  
    # ==== Syntax
    #
    #      vehicle loadMagazine [turretPath, weaponName, magazineName]
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +turretPath+ - Array  
    # *    +weaponName+ - String  
    # *    +magazineName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #weaponState, #setWeaponReloadingTime, SwitchMagazine, #weapons, #magazines
    # 
    # Official Wiki: https://community.bistudio.com/wiki/loadMagazine
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    vehicle player loadMagazine [[0],"m256","20Rnd_120mmHE_M1A2"];
    # 
    def loadMagazine _obj, _args
      "_obj loadMagazine _args;" 
    end

    # Creates the load overlay dialog for the specified type of overlay
    # 
    # ==== Syntax
    #
    #      map loadOverlay config
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +config+ - Config -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/loadOverlay
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def loadOverlay _obj, _args
      "_obj loadOverlay _args;" 
    end

    # Loads object's properties from Objects.
    # 
    # ==== Description
    # 
    # sav file in campaign directory (from entry name)
    #  
    # ==== Syntax
    #
    #      Boolean = Object loadStatus "EntryName"
    #
    # ==== Parameters
    # 
    # *    +EntryName+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # This command doesn't work in Multiplayer
    # 
    # ==== See Also
    # 
    # #saveStatus
    # 
    # Official Wiki: https://community.bistudio.com/wiki/loadStatus
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ok= [[player]] '''loadStatus''' "playerState"
    # 
    def loadStatus _obj, _args
      "_obj loadStatus _args;" 
    end

    # Returns current sum of mass from items stored in a uniform
    # 
    # ==== Syntax
    #
    #      loadUniform unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/loadUniform
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def loadUniform _args
      "loadUniform _args;" 
    end

    # Returns current sum of mass from items stored in a vest
    # 
    # ==== Syntax
    #
    #      loadVest unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/loadVest
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def loadVest _args
      "loadVest _args;" 
    end

    # Check if given unit is local on the computer in Multiplayer games (see Locality in Multiplayer for general concepts).
    # 
    # ==== Description
    # 
    # This can be used when some activation fields or scripts need to be performed only on one computer.
    # 
    # In Singleplayer all objects are local.
    # 
    # 
    # 
    # Note: Map created objects (those placed in Visitor) are local everywhere
    #  
    # ==== Syntax
    #
    #      Boolean = local object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -Problems:In MP remote objects are not initialised in functions called by initline or init eventhandlers.
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/local
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    SQS  ?!local _unitName : goto "multi"
    # 
    # ====== Example 2:
    # 
    #    SQF  If (local _unitName) then {     hint "multi";  }; 
    # 
    def local _args
      "local _args;" 
    end

    # Used to internationalise text messages.
    # 
    # ==== Description
    # 
    # A string is returned from Stringtable.
    # 
    # csv which corresponds to the stringName
    #  
    # ==== Syntax
    #
    #      localize stringName
    #
    # ==== Parameters
    # 
    # *    +stringName+ - String  
    #
    # ==== Returns
    #
    #      String found in corresponding entry in stringtable.csv
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Stringtable.csv File Format
    # 
    # Official Wiki: https://community.bistudio.com/wiki/localize
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint localize "STR_WEST"; // -> "BLUFOR" (in Arma2)
    # 
    # ====== Example 2:
    # 
    #    hint format ["Go %1",localize "STR_Q_NORTH"]; // -> "Go North"
    # 
    # ====== Example 3:
    # 
    #    hint format [localize "STR_ACTION_DROP_WEAPON",localize "STR_SN_RIFLE"]; // -> "Drop Rifle"
    #    (STR_ACTION_DROP_WEAPON contains "Drop %1", STR_SN_RIFLE contains "Rifle"
    # 
    def localize _args
      "localize _args;" 
    end

    # A non-existing location.
    # 
    # ==== Description
    # 
    # This value is not equal to anything, including itself
    #  
    # ==== Syntax
    #
    #      locationNull
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Location
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/locationNull
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def locationNull 
      "locationNull" 
    end

    # Returns the position of a location.
    # 
    # ==== Description
    # 
    # If the location is attached to an object, that object's position is returned
    #  
    # ==== Syntax
    #
    #      locationPosition Location
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Position
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setPosition, #position
    # 
    # Official Wiki: https://community.bistudio.com/wiki/locationPosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _locationPos = locationPosition myLocation
    # 
    def locationPosition _args
      "locationPosition _args;" 
    end

    # Lock vehicle (disable mounting / dismounting) for player
    # 
    # ==== Syntax
    #
    #      vehicleName lock lock
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    # *    +lock+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #locked
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lock
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _jeepOne lock true
    # 
    def lock _obj, _args
      "_obj lock _args;" 
    end

    # Lock the driver position of the vehicle.
    # 
    # ==== Description
    # 
    # This command must be executed where vehicle is local
    #  
    # ==== Syntax
    #
    #      vehicle lockDriver lock
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object -  
    # *    +lock+ - Boolean -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lockedDriver, #lockCargo, #lockTurret
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lockDriver
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    vehicleName lockDriver true;
    # 
    def lockDriver _obj, _args
      "_obj lockDriver _args;" 
    end

    # Lock the gunner position of the vehicle turret.
    # 
    # ==== Description
    # 
    # This command must be executed where vehicle is local
    #  
    # ==== Syntax
    #
    #      vehicle lockTurret [turret path,lock]
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object -  
    # *    +[turret path,lock]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lockedTurret, #lockCargo, #lockDriver, #assignedVehicleRole, #turretUnit, #moveInTurret
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lockTurret
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    vehicleName lockTurret [[0,0], true];
    # 
    # ====== Example 2:
    # 
    #    vehicle player lockTurret [[0],true];
    # 
    def lockTurret _obj, _args
      "_obj lockTurret _args;" 
    end

    # Disables switching to the next waypoint (the current waypoint will never complete while lockWp is used).
    # 
    # ==== Description
    # 
    # This is sometimes used during cut-scenes
    #  
    # ==== Syntax
    #
    #      groupName lockWp lockWP
    #
    # ==== Parameters
    # 
    # *    +groupName+ - Object or Group  
    # *    +lockWP+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lockWp
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    groupOne lockWP true; 
    # 
    def lockWp _obj, _args
      "_obj lockWp _args;" 
    end

    # Check if vehicle is locked for Persons.
    # 
    # ==== Description
    # 
    # If it is locked, Persons cannot mount / dismount without order
    #  
    # ==== Syntax
    #
    #      Boolean = locked vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lock
    # 
    # Official Wiki: https://community.bistudio.com/wiki/locked
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _it = locked _jeepOne
    # 
    def locked _args
      "locked _args;" 
    end

    # Check whether cargo position of the vehicle is locked
    # 
    # ==== Syntax
    #
    #      vehicle lockedCargo cargo index
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object -  
    # *    +cargo index+ - Number -  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lockCargo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lockedCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _result = vehicleName lockedCargo 0;
    # 
    def lockedCargo _obj, _args
      "_obj lockedCargo _args;" 
    end

    # Check whether driver position of the vehicle turret is locked
    # 
    # ==== Syntax
    #
    #      lockedDriver vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object -  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lockedDriver
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lockedDriver _args
      "lockedDriver _args;" 
    end

    # Check whether gunner position of the vehicle turret is locked
    # 
    # ==== Syntax
    #
    #      vehicle lockedTurret turret path
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object -  
    # *    +turret path+ - Array -  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lockTurret, #moveInTurret, #turretUnit
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lockedTurret
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lockedTurret _obj, _args
      "_obj lockedTurret _args;" 
    end

    # Base-10 logarithm of x
    # 
    # ==== Syntax
    #
    #      Number = log x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/log
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _log = log 10 ..........Result is 1
    # 
    def log _args
      "log _args;" 
    end

    # Control what the unit(s) is/are looking at (target or position)
    # 
    # ==== Syntax
    #
    #      unit(s) lookAt position
    #
    # ==== Parameters
    # 
    # *    +units+ - Object or Array  
    # *    +position+ - Object or Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lookAt
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _someSoldier lookAt _otherSoldier 
    # 
    # ====== Example 2:
    # 
    #     [_someSoldier, _otherSoldier] lookAt markerPos "markerOne" 
    # 
    def lookAt _obj, _args
      "_obj lookAt _args;" 
    end

    # Center the map on,and point the camera at,the position
    # 
    # ==== Syntax
    #
    #      map lookAtPos position
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +position+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/lookAtPos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def lookAtPos _obj, _args
      "_obj lookAtPos _args;" 
    end

    # Get array with magazines from ammo box (or any general weapon holder container)
    # 
    # ==== Syntax
    #
    #      magazineCargo box
    #
    # ==== Parameters
    # 
    # *    +box+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/magazineCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def magazineCargo _args
      "magazineCargo _args;" 
    end

    # Returns array of type names of all vehicle's magazines.
    # 
    # ==== Description
    # 
    # When applied to a unit (soldier), the command behaves differently and will omit magazines already loaded into unit's weapons.
    # 
    # Use currentMagazine to get this information for a currently loaded magazine
    #  
    # ==== Syntax
    #
    #      magazines vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object - unit or vehicle  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #currentMagazine, #magazinesTurret, #magazinesDetail, #magazinesAmmo, #magazinesAmmoFull, #ammo, #weapons
    # 
    # Official Wiki: https://community.bistudio.com/wiki/magazines
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _mags = magazines player
    # 
    def magazines _args
      "magazines _args;" 
    end

    # Returns an array of strings with description of all vehicle's magazines, their ammo count (current/default) and their ids.
    # 
    # ==== Description
    # 
    # 
    # 
    # When applied to a unit (soldier), the command behaves differently and will omit magazines already loaded into unit's weapons.
    # 
    # Use currentMagazineDetail to get this information for a currently loaded magazine
    #  
    # ==== Syntax
    #
    #      magazinesDetail vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object - unit or vehicle  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #currentMagazineDetail, #magazines, #magazinesTurret, #magazinesAmmo, #magazinesAmmoFull
    # 
    # Official Wiki: https://community.bistudio.com/wiki/magazinesDetail
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _magazinesDetail = magazinesDetail player;
    #    /*
    #    [
    #    	"6.5mm 30Rnd STANAG Mag(30/30)[id:3]",
    #    	"6.5mm 30Rnd STANAG Mag(30/30)[id:9]",
    #    	"9mm 16Rnd Mag(16/16)[id:12]",
    #    	"Smoke Grenade (Green)(1/1)[id:14]",
    #    	"Chemlight (Green)(1/1)[id:16]",
    #    	"RGO Frag Grenade(1/1)[id:18]"
    #    ]
    #    */
    # 
    # ====== Example 2:
    # 
    #    _magazinesDetail = magazinesDetail Mi_48;
    #    /*
    #    [
    #    	"30mm APDS shells(250/250)[id:20]",
    #    	"30mm HE Shells(250/250)[id:21]",
    #    	"Scalpel E2(8/8)[id:22]",
    #    	"Skyfire(38/38)[id:23]"
    #    ]
    #    */
    # 
    def magazinesDetail _args
      "magazinesDetail _args;" 
    end

    # Returns an array with the type names of all the unit's backpack magazines
    # 
    # ==== Syntax
    #
    #      magazinesDetailBackpack unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/magazinesDetailBackpack
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    magazinesDetailBackpack player
    # 
    def magazinesDetailBackpack _args
      "magazinesDetailBackpack _args;" 
    end

    # Returns an array with the type names of all the unit's uniform magazines
    # 
    # ==== Syntax
    #
    #      magazinesDetailUniform unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/magazinesDetailUniform
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    magazinesDetailUniform player
    # 
    def magazinesDetailUniform _args
      "magazinesDetailUniform _args;" 
    end

    # Returns an array with the type names of all the unit's vest magazines
    # 
    # ==== Syntax
    #
    #      magazinesDetailVest unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/magazinesDetailVest
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    magazinesDetailVest player
    # 
    def magazinesDetailVest _args
      "magazinesDetailVest _args;" 
    end

    # Returns all magazines of given turret.
    # 
    # ==== Description
    # 
    # Use turret path [-1] for driver's turret
    #  
    # ==== Syntax
    #
    #      vehicle magazinesTurret turretPath
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +turretPath+ - Array  
    #
    # ==== Returns
    #
    #      Array of Strings
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazineTurret, #removeMagazinesTurret, #removeMagazineTurret, #weaponsTurret, #magazines, #magazinesDetail, #magazinesAmmo, #magazinesAmmoFull
    # 
    # Official Wiki: https://community.bistudio.com/wiki/magazinesTurret
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _mags = vehicle player magazinesTurret [0, 0];
    # 
    # ====== Example 2:
    # 
    #    _mags = _tank magazinesTurret [0];
    # 
    def magazinesTurret _obj, _args
      "_obj magazinesTurret _args;" 
    end

    # Add next frame to map animation.
    # 
    # ==== Description
    # 
    # Format of frame is [time, zoom, position], format of position is Position2D
    #  
    # ==== Syntax
    #
    #      mapAnimAdd [time, zoom, position]
    #
    # ==== Parameters
    # 
    # *    +time+ - Number  
    # *    +zoom+ - Number  
    # *    +position+ - Array - format Position2D  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #mapAnimClear, #mapAnimCommit, #mapAnimDone, #ctrlMapAnimAdd, #ctrlMapAnimClear, #ctrlMapAnimCommit, #ctrlMapAnimDone
    # 
    # Official Wiki: https://community.bistudio.com/wiki/mapAnimAdd
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    mapAnimAdd [1, 0.1, markerPos "anim1"]
    # 
    def mapAnimAdd _args
      "mapAnimAdd _args;" 
    end

    # Clear map animation
    # 
    # ==== Syntax
    #
    #      mapAnimClear
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #mapAnimAdd, #mapAnimCommit, #mapAnimDone, #ctrlMapAnimAdd, #ctrlMapAnimClear, #ctrlMapAnimCommit, #ctrlMapAnimDone
    # 
    # Official Wiki: https://community.bistudio.com/wiki/mapAnimClear
    #
    # ==== Examples
    # 
    def mapAnimClear 
      "mapAnimClear" 
    end

    # Play map animation
    # 
    # ==== Syntax
    #
    #      mapAnimCommit
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #mapAnimAdd, #mapAnimClear, #mapAnimDone, #ctrlMapAnimAdd, #ctrlMapAnimClear, #ctrlMapAnimCommit, #ctrlMapAnimDone
    # 
    # Official Wiki: https://community.bistudio.com/wiki/mapAnimCommit
    #
    # ==== Examples
    # 
    def mapAnimCommit 
      "mapAnimCommit" 
    end

    # Check if map animation is finished
    # 
    # ==== Syntax
    #
    #      Boolean = mapAnimDone
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #mapAnimAdd, #mapAnimClear, #mapAnimCommit, #ctrlMapAnimAdd, #ctrlMapAnimClear, #ctrlMapAnimCommit, #ctrlMapAnimDone
    # 
    # Official Wiki: https://community.bistudio.com/wiki/mapAnimDone
    #
    # ==== Examples
    # 
    def mapAnimDone 
      "mapAnimDone" 
    end

    # Enable/disable continuous centering the map on the camera position
    # 
    # ==== Syntax
    #
    #      control mapCenterOnCamera enable
    #
    # ==== Parameters
    # 
    # *    +control+ - Control -  
    # *    +enable+ - Boolean -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/mapCenterOnCamera
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    //--- Minimap update
    #    ((uiNamespace getVariable "BIS_UAV_DISPLAY") displayCtrl 112410) mapCenterOnCamera true;
    # 
    def mapCenterOnCamera _obj, _args
      "_obj mapCenterOnCamera _args;" 
    end

    # Returns the map grid position of an object or position.
    # 
    # ==== Description
    # 
    # The format is determined by the Grid format specified in the CfgWorlds for the current world.
    # 
    # Eg: "024577" or "De82" or similar
    #  
    # ==== Syntax
    #
    #      mapGridPosition param
    #
    # ==== Parameters
    # 
    # *    +param+ - Object or Position - determines reference position  
    #
    # ==== Returns
    #
    #      String - grid position
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/mapGridPosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _gridPos = mapGridPosition player
    # 
    # ====== Example 2:
    # 
    #    _gridPos = mapGridPosition getPos player
    # 
    def mapGridPosition _args
      "mapGridPosition _args;" 
    end

    # Marks current mission as finished on steam.
    # 
    # ==== Description
    # 
    # Returns true if Steam query is successfully started or false otherwise
    #  
    # ==== Syntax
    #
    #      markAsFinishedOnSteam
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/markAsFinishedOnSteam
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def markAsFinishedOnSteam 
      "markAsFinishedOnSteam" 
    end

    # Gets the marker alpha.
    # 
    # ==== Description
    # 
    # See setMarkerAlpha
    #  
    # ==== Syntax
    #
    #      markerAlpha markerName
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/markerAlpha
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def markerAlpha _args
      "markerAlpha _args;" 
    end

    # Gets the marker brush.
    # 
    # ==== Description
    # 
    # See setMarkerBrush
    #  
    # ==== Syntax
    #
    #      markerBrush name
    #
    # ==== Parameters
    # 
    # *    +name+ - String -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/markerBrush
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def markerBrush _args
      "markerBrush _args;" 
    end

    # Get marker colour.
    # 
    # ==== Description
    # 
    # See setMarkerColor.
    # 
    # Note: This function is identical to getMarkerColor
    #  
    # ==== Syntax
    #
    #      String = markerColor markerName
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/markerColor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? markerColor "MarkerOne" == "ColorRed" : player setFace "Marilyn"
    # 
    def markerColor _args
      "markerColor _args;" 
    end

    # Get marker direction
    # 
    # ==== Syntax
    #
    #      Number = markerDir markerName
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setMarkerDir
    # 
    # Official Wiki: https://community.bistudio.com/wiki/markerDir
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _mPos = markerDir "markerOne"
    # 
    def markerDir _args
      "markerDir _args;" 
    end

    # Get marker Position.
    # 
    # ==== Description
    # 
    # Note: This function is identical to getMarkerPos
    #  
    # ==== Syntax
    #
    #      Array = markerPos markerName
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    #
    # ==== Returns
    #
    #      Array - format Position
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/markerPos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _mPos = markerPos "markerOne"
    # 
    def markerPos _args
      "markerPos _args;" 
    end

    # Gets the marker shape.
    # 
    # ==== Description
    # 
    # See setMarkerShape for a list of strings that can be returned
    #  
    # ==== Syntax
    #
    #      markerShape name
    #
    # ==== Parameters
    # 
    # *    +name+ - String -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/markerShape
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def markerShape _args
      "markerShape _args;" 
    end

    # Get marker size.
    # 
    # ==== Description
    # 
    # Note: This function is identical to getMarkerSize
    #  
    # ==== Syntax
    #
    #      Array = markerSize markerName
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/markerSize
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _mSize = markerSize "MarkerOne"
    # 
    def markerSize _args
      "markerSize _args;" 
    end

    # Get marker text
    # 
    # ==== Syntax
    #
    #      String = markerText markerName
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/markerText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _mDesc = markerText "markerOne"
    # 
    def markerText _args
      "markerText _args;" 
    end

    # Get type of marker.
    # 
    # ==== Description
    # 
    # Note: This function is identical to getMarkerType.
    # 
    # See cfgMarkers for a list of standard markers
    #  
    # ==== Syntax
    #
    #      String = markerType markerName
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    #
    # ==== Returns
    #
    #      String. See cfgMarkers.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #cfgMarkers, #getMarkerType, #setMarkerType, #setMarkerTypeLocal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/markerType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? markerType "MarkerOne" == "Dot" : "MarkerOne" setMarkerType "Arrow"
    # 
    def markerType _args
      "markerType _args;" 
    end

    # The greater of a,b
    # 
    # ==== Syntax
    #
    #      Number = a max b
    #
    # ==== Parameters
    # 
    # *    +a+ - Number  
    # *    +b+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands: min, #ceil, #floor
    # 
    # Official Wiki: https://community.bistudio.com/wiki/max
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    3 max 2
    #    Result is 3
    # 
    def max _obj, _args
      "_obj max _args;" 
    end

    # Return a list of members in given team
    # 
    # ==== Syntax
    #
    #      members team
    #
    # ==== Parameters
    # 
    # *    +team+ - Team Member  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/members
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _members = members _team
    # 
    def members _args
      "members _args;" 
    end

    # The smaller of a,b
    # 
    # ==== Syntax
    #
    #      a min b
    #
    # ==== Parameters
    # 
    # *    +a+ - Number  
    # *    +b+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands: max
    # 
    # Official Wiki: https://community.bistudio.com/wiki/min
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    3 min 2
    #    Result is 2
    # 
    def min _obj, _args
      "_obj min _args;" 
    end

    # Checks if the given mine is active
    # 
    # ==== Syntax
    #
    #      mineActive obj
    #
    # ==== Parameters
    # 
    # *    +obj+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/mineActive
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def mineActive _args
      "mineActive _args;" 
    end

    # Return root of mission description.
    # 
    # ==== Description
    # 
    # ext entries hierarchy
    #  
    # ==== Syntax
    #
    #      Config = missionConfigFile
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Config
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #configFile, #campaignConfigFile, #config/name, #config >> name, #configName, #count, #getArray, #getText, #getNumber, #inheritsFrom, #isArray, #isClass, #isNumber, #isText, #select
    # 
    # Official Wiki: https://community.bistudio.com/wiki/missionConfigFile
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    for "_i" from (0) to ((count paramsArray) - 1) do
    #    {
    #    	missionNamespace setVariable [configName ((missionConfigFile/"Params") select _i),paramsArray select _i];
    #    };
    # 
    # ====== Example 2:
    # 
    #    To define custom values in description.ext:
    #    class myMissionConfig
    #    {
    #    	class mySetup
    #    	{
    #    		myNumber = 3;
    #    		myArray[] = {1,2,3};
    #    		myText = "LOL";
    #    	};
    #    };
    #    To read defined custom values from a script:
    #    _myNumber = getNumber (missionConfigFile >> "myMissionConfig" >> "mySetup" >> "myNumber");
    #    _myArray = getArray (missionConfigFile >> "myMissionConfig" >> "mySetup" >> "myArray");
    #    _myText = getText (missionConfigFile >> "myMissionConfig" >> "mySetup" >> "myText");
    # 
    def missionConfigFile 
      "missionConfigFile" 
    end

    # Return currently loaded mission file (path to mission.
    # 
    # ==== Description
    # 
    # pbo, relative to game exe)
    #  
    # ==== Syntax
    #
    #      String = missionName
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/missionName
    #
    # ==== Examples
    # 
    def missionName 
      "missionName" 
    end

    # Return the global namespace attached to mission
    # 
    # ==== Syntax
    #
    #      missionNamespace
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Namespace
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Forward Compatibility, #uiNamespace, #parsingNamespace, #with
    # 
    # Official Wiki: https://community.bistudio.com/wiki/missionNamespace
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    missionNamespace setVariable ["YourString",3];//Same as: YourString = 3;
    #    _yourString = missionNamespace getVariable "YourString";
    # 
    def missionNamespace 
      "missionNamespace" 
    end

    # Return when mission started in format [year, month, day, hour, minute, second].
    # 
    # ==== Description
    # 
    # Works only in multiplayer, in singleplayer all values are equal to zero → [0,0,0,0,0,0]
    #  
    # ==== Syntax
    #
    #      Array = missionStart
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/missionStart
    #
    # ==== Examples
    # 
    def missionStart 
      "missionStart" 
    end

    # Remainder of a divided by b
    # 
    # ==== Syntax
    #
    #      Number = a mod b
    #
    # ==== Parameters
    # 
    # *    +a+ - Number  
    # *    +b+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands, Operators
    # 
    # Official Wiki: https://community.bistudio.com/wiki/mod
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _rem = 3 mod 2 
    #    Result is 1
    # 
    def mod _obj, _args
      "_obj mod _args;" 
    end

    # Converts position from object model space to world space
    # 
    # ==== Syntax
    #
    #      Array = object modelToWorld modelPos
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +modelPos+ - Array - [x,y,z] offset relative to the model centre  
    #
    # ==== Returns
    #
    #      Array - world position in format Position
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #worldToModel, #selectionPosition
    # 
    # Official Wiki: https://community.bistudio.com/wiki/modelToWorld
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _aboveAndBehindPlayer = player modelToWorld [0,-1,3];
    # 
    def modelToWorld _obj, _args
      "_obj modelToWorld _args;" 
    end

    # Returns the intensity of the moon's brightness
    # 
    # ==== Syntax
    #
    #      Number = moonIntensity
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #sunOrMoon
    # 
    # Official Wiki: https://community.bistudio.com/wiki/moonIntensity
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _intensity = moonIntensity;
    # 
    def moonIntensity 
      "moonIntensity" 
    end

    # Checks a current morale level of the unit (-1.
    # 
    # ==== Description
    # 
    # .
    # 
    # +1)
    #  
    # ==== Syntax
    #
    #      morale unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/morale
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    morale leader player,,result is 0.5
    # 
    def morale _args
      "morale _args;" 
    end

    # Creates a move waypoint on given position (format Position or Position2D) and makes it an actual group waypoint
    # 
    # ==== Syntax
    #
    #      group move position
    #
    # ==== Parameters
    # 
    # *    +group+ - Object or Group  
    # *    +position+ - Array - format Position  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Group or unit must be local to have global effect for this command.
    # 
    # ==== See Also
    # 
    # #doMove, #addWaypoint
    # 
    # Official Wiki: https://community.bistudio.com/wiki/move
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    groupOne move position player
    # 
    def move _obj, _args
      "_obj move _args;" 
    end

    # Move soldier into vehicle cargo position (Immediate, no animation)
    # 
    # ==== Syntax
    #
    #      unitName moveInCargo [vehicle, CargoIndex]
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +vehicle+ - Object  
    # *    +unitName+ - Object  
    # *    +vehicle+ - Object  
    # *    +CargoIndex+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #moveInCommander, #moveInDriver, #moveInGunner, #moveInTurret, #assignAsCargo, #assignAsCommander, #assignAsDriver, #assignAsGunner
    # 
    # Official Wiki: https://community.bistudio.com/wiki/moveInCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne moveInCargo _jeepOne
    # 
    # ====== Example 2:
    # 
    #    _soldierOne moveInCargo [_jeepOne, 1]
    # 
    def moveInCargo _obj, _args
      "_obj moveInCargo _args;" 
    end

    # Move soldier into vehicle commander position (Immediate, no animation)
    # 
    # ==== Syntax
    #
    #      unitName moveInCommander vehicle
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #moveInCargo, #moveInDriver, #moveInGunner, #moveInTurret, #assignAsCargo, #assignAsCommander, #assignAsDriver, #assignAsGunner
    # 
    # Official Wiki: https://community.bistudio.com/wiki/moveInCommander
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne moveInCommander _tankOne 
    # 
    def moveInCommander _obj, _args
      "_obj moveInCommander _args;" 
    end

    # Move soldier into vehicle driver position (Immediate, no animation)
    # 
    # ==== Syntax
    #
    #      unitName moveInDriver vehicle
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #moveInCargo, #moveInCommander, #moveInGunner, #moveInTurret, #assignAsCargo, #assignAsCommander, #assignAsDriver, #assignAsGunner
    # 
    # Official Wiki: https://community.bistudio.com/wiki/moveInDriver
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne moveInDriver _tankOne 
    # 
    def moveInDriver _obj, _args
      "_obj moveInDriver _args;" 
    end

    # Move soldier into vehicle gunner position (Immediate, no animation)
    # 
    # ==== Syntax
    #
    #      unitName moveInGunner vehicle
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #moveInCargo, #moveInCommander, #moveInDriver, #moveInTurret, #assignAsCargo, #assignAsCommander, #assignAsDriver, #assignAsGunner
    # 
    # Official Wiki: https://community.bistudio.com/wiki/moveInGunner
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    soldierOne moveInGunner tankOne 
    # 
    def moveInGunner _obj, _args
      "_obj moveInGunner _args;" 
    end

    # Moves the soldier into the vehicle's turret.
    # 
    # ==== Description
    # 
    # (Immediately, without animation).
    # 
    # turret path is an array of positions inside a turret, or positions inside a turret of a turret.
    # 
    # [0] means first turret.
    # 
    # [0,0] means first turret of first turret.
    # 
    # [0,1] means second turret of first turret.
    # 
    # [1] means second turret.
    # 
    # [1,0] means first turret of the second turret.
    # 
    # [2,0] means first turret of third turret.
    # 
    # And so on
    #  
    # ==== Syntax
    #
    #      unitName moveInTurret [vehicle, turret path]
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +[vehicle, turret path]+ - Array  
    # *    +vehicle+ - Object  
    # *    +turret path+ - Array - see Description.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # GetInTurret, #assignAsTurret, #moveInCargo, #moveInCommander, #moveInDriver, #moveInGunner, #assignAsCargo, #assignAsCommander, #assignAsDriver, #assignAsGunner
    # 
    # Official Wiki: https://community.bistudio.com/wiki/moveInTurret
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne moveInTurret [_tank, [0, 0]] 
    # 
    def moveInTurret _obj, _args
      "_obj moveInTurret _args;" 
    end

    # Shifts an editor object to the end of the objects array.
    # 
    # ==== Description
    # 
    # This means,that the object will be drawn last (after all other objects)
    #  
    # ==== Syntax
    #
    #      map moveObjectToEnd object
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +object+ - String -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/moveObjectToEnd
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def moveObjectToEnd _obj, _args
      "_obj moveObjectToEnd _args;" 
    end

    # Moves the soldier out of vehicle.
    # 
    # ==== Description
    # 
    # (Immediately,without animation)
    #  
    # ==== Syntax
    #
    #      moveOut soldier
    #
    # ==== Parameters
    # 
    # *    +soldier+ - Object -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #action, #setPos, #setPosATL, #setPosASL
    # 
    # Official Wiki: https://community.bistudio.com/wiki/moveOut
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if ((lifeState _x) == "UNCONSCIOUS") then {moveOut _x;};} forEach (crew cursorTarget);
    # 
    def moveOut _args
      "moveOut _args;" 
    end

    # Returns the current time of the most important RTM animation currently being played on the soldier
    # 
    # ==== Syntax
    #
    #      moveTime soldier
    #
    # ==== Parameters
    # 
    # *    +soldier+ - -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/moveTime
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    moveTime player
    # 
    def moveTime _args
      "moveTime _args;" 
    end

    # Low level command to person to move to given position
    # 
    # ==== Syntax
    #
    #      person moveTo position
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +position+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #doMove, #commandMove, #setDestination, #move, #moveToCompleted, #moveToFailed, #addWaypoint, #fn_vbs_doMoveEx
    # 
    # Official Wiki: https://community.bistudio.com/wiki/moveTo
    #
    # ==== Examples
    # 
    def moveTo _obj, _args
      "_obj moveTo _args;" 
    end

    # Check if latest low level moveTo command is finished
    # 
    # ==== Syntax
    #
    #      Boolean = moveToCompleted person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #moveTo, #moveToFailed
    # 
    # Official Wiki: https://community.bistudio.com/wiki/moveToCompleted
    #
    # ==== Examples
    # 
    def moveToCompleted _args
      "moveToCompleted _args;" 
    end

    # Check if latest low level moveTo command failed
    # 
    # ==== Syntax
    #
    #      Boolean = moveToFailed person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #moveTo, #moveToCompleted
    # 
    # Official Wiki: https://community.bistudio.com/wiki/moveToFailed
    #
    # ==== Examples
    # 
    def moveToFailed _args
      "moveToFailed _args;" 
    end

    # Checks the current music volume (set by fadeMusic)
    # 
    # ==== Syntax
    #
    #      Number = musicVolume
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/musicVolume
    #
    # ==== Examples
    # 
    def musicVolume 
      "musicVolume" 
    end

    # Returns the total number of user-added menu items belonging to the given menu
    # 
    # ==== Syntax
    #
    #      map nMenuItems menu index
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +menu index+ - -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nMenuItems
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def nMenuItems _obj, _args
      "_obj nMenuItems _args;" 
    end

    # The name given to a unit using the setIdentity instruction or selected randomly by the game engine if setIdentity has not been used on the unit.
    # 
    # ==== Description
    # 
    # If used on vehicle, name of first crew member (in order commander, driver, gunner).
    # 
    # If used on an object, "Error: No unit" is being returned.
    # 
    # 
    # 
    # NOTE: In Arma 3 setName can be used on a person to set name.
    # 
    # However in multiplayer name always returns profileName
    #  
    # ==== Syntax
    #
    #      String = name object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object or Location  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #profileName, #setName
    # 
    # Official Wiki: https://community.bistudio.com/wiki/name
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _name = name vehicle player
    # 
    def name _args
      "name _args;" 
    end

    # Returns the nameSound of a person
    # 
    # ==== Syntax
    #
    #      nameSound person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nameSound
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    nameSound player
    # 
    def nameSound _args
      "nameSound _args;" 
    end

    # Returns the location's name
    # 
    # ==== Syntax
    #
    #      name location
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setName
    # 
    # Official Wiki: https://community.bistudio.com/wiki/name
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _locationName = name myLocation
    # 
    def name _args
      "name _args;" 
    end

    # Find entities in the circle with given radius.
    # 
    # ==== Description
    # 
    # If typeName(s) is (are) given, only entities of given type (or its subtype) are listed.
    # 
    # This command returns only alive entities.
    # 
    # If you need to return dead entities as well use entities command
    #  
    # ==== Syntax
    #
    #      position nearEntities [typeName, radius]
    #
    # ==== Parameters
    # 
    # *    +position+ - Object or Array (format Position) - center of the circle  
    # *    +radius+ - Number - radius of the circle  
    # *    +position+ - Object or Array (format Position) - center of the circle  
    # *    +[typeName, radius]+ - Array  
    # *    +typeName+ - String or Array of Strings - typeName(s) to search for  
    # *    +radius+ - Number - radius of the circle  
    #
    # ==== Returns
    #
    #      Array of Objects
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #entities, #nearestObject, #nearestObjects, #nearObjects
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nearEntities
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _list = player nearEntities 20;
    #    _list = (position player) nearEntities 50;
    #    _list = (position player) nearEntities ["Land", 1000];
    #    _list = (position player) nearEntities ["LaserTarget", 3000];
    #    _list = (position player) nearEntities [["All"], 50];
    #    _list = (position player) nearEntities [["Man", "Air", "Car", "Motorcycle", "Tank"], 200];
    # 
    def nearEntities _obj, _args
      "_obj nearEntities _args;" 
    end

    # Find objects in the circle with given radius.
    # 
    # ==== Description
    # 
    # If typeName is given, only objects of given type (or its subtype) are listed.
    # 
    # The first object in the returned array is not necessarily the closest one (like it is in nearestObjects for example)
    #  
    # ==== Syntax
    #
    #      position nearObjects radius or [typeName, radius]
    #
    # ==== Parameters
    # 
    # *    +position+ - Array - format Position  
    # *    +[typeName, radius]+ - Array  
    # *    +typeName+ - String  
    # *    +radius+ - Number  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #nearestObject, #nearestObjects, #nearObjectsReady, #nearEntities
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nearObjects
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _list = position player nearObjects 50
    # 
    # ====== Example 2:
    # 
    #    _list= [_xpos,_ypos] nearObjects ["House",20]
    # 
    def nearObjects _obj, _args
      "_obj nearObjects _args;" 
    end

    # Check whether all data are loaded to nearObjects will return in reasonable time
    # 
    # ==== Syntax
    #
    #      position nearObjectsReady radius
    #
    # ==== Parameters
    # 
    # *    +position+ - Object or Array -  
    # *    +radius+ - Number -  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #nearObjects
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nearObjectsReady
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _twnpos nearObjectsReady 500;//from ALICE
    # 
    def nearObjectsReady _obj, _args
      "_obj nearObjectsReady _args;" 
    end

    # Find the road segments within the circle of given radius
    # 
    # ==== Syntax
    #
    #      pos nearRoads radius
    #
    # ==== Parameters
    # 
    # *    +pos+ - Array or Object - Position or object  
    # *    +radius+ - Number -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #nearRoads (VBS2), #roadsConnectedTo (VBS2), #roadsConnectedTo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nearRoads
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _list = player nearRoads 50
    # 
    def nearRoads _obj, _args
      "_obj nearRoads _args;" 
    end

    # Find supplies in the circle with given radius.
    # 
    # ==== Description
    # 
    # If typeName is given, only supplies of given type (or its subtype) are listed
    #  
    # ==== Syntax
    #
    #      pos nearSupplies radius or [typeName, radius]
    #
    # ==== Parameters
    # 
    # *    +pos+ - Position  
    # *    +[typeName, radius]+ - Array  
    # *    +typeName+ - String  
    # *    +radius+ - Number  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nearSupplies
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _list = (position player) nearSupplies 50
    # 
    def nearSupplies _obj, _args
      "_obj nearSupplies _args;" 
    end

    # Finds the nearest building to a given object or position.
    # 
    # ==== Description
    # 
    # A "building" is defined as an object that is of class "House" and contains a path LOD
    #  
    # ==== Syntax
    #
    #      nearestBuilding position
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +position+ - Position  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #buildingPos, #nearestObject, #nearestObjects, #nearObjects
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nearestBuilding
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _nBuilding = nearestBuilding player;
    # 
    # ====== Example 2:
    # 
    #    _nBuilding = nearestBuilding position player;
    # 
    def nearestBuilding _args
      "nearestBuilding _args;" 
    end

    # Return the closest location of specified class to a given position.
    # 
    # ==== Description
    # 
    # Checked range is unlimited (i.
    # 
    # e.
    # 
    # covers the whole map)
    #  
    # ==== Syntax
    #
    #      Location = nearestLocation [position, locationClass]
    #
    # ==== Parameters
    # 
    # *    +position+ - Array  
    # *    +locationClass+ - String of a location class name.  
    #
    # ==== Returns
    #
    #      Location
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #nearestLocations, ArmA_2:_CfgLocationTypes
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nearestLocation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _nearestCity = nearestLocation [getPos player, "nameCity"]
    # 
    def nearestLocation _args
      "nearestLocation _args;" 
    end

    # Find the nearest location (to the given position) having it speech non-empty
    # 
    # ==== Syntax
    #
    #      nearestLocationWithDubbing position
    #
    # ==== Parameters
    # 
    # *    +position+ - Array -  
    #
    # ==== Returns
    #
    #      Location
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nearestLocationWithDubbing
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def nearestLocationWithDubbing _args
      "nearestLocationWithDubbing _args;" 
    end

    # Returns an array of locations of chosen type(s) within the given radius of the given position, sorted from nearest to farthest
    # 
    # ==== Syntax
    #
    #      Array = nearestLocations [position, [locationType,...], radius]
    #
    # ==== Parameters
    # 
    # *    +position+ - Array - format Position  
    # *    +[locationType,...]+ - Array An array of location type name strings  
    # *    +radius+ - Number The maximum distance from the given position that returned locations may be, in meters.  
    #
    # ==== Returns
    #
    #      Array of locations
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #nearestLocation
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nearestLocations
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _nearbyLocations = nearestLocations [getPos player, ["RockArea","VegetationFir"], 100]
    # 
    def nearestLocations _args
      "nearestLocations _args;" 
    end

    # Nearest object of given type to given position within a range of 50 meters.
    # 
    # ==== Description
    # 
    # If object ID passed as an argument (as in example 2) the search range is unlimited.
    # 
    # If class types are used in the filter, then in Arma any object derived from the type is found as well.
    # 
    # In OFP, only objects with exactly the type given are found
    #  
    # ==== Syntax
    #
    #      position nearestObject filter
    #
    # ==== Parameters
    # 
    # *    +filter+ - Array - Can be one of the following:  
    # *    +[x,y,z]+ - Any objects near position  
    # *    +[[x,y,z], "type"]+ - Objects of class "type" near position [x,y,z]  
    # *    +[object, "type"]+ - Objects of class "type" near position of "object"Return Value:  
    # *    +position+ - Array - Position2D or Position3D.  
    # *    +filter+ - Number or String - Either ID of object, or class type.  
    #
    # ==== Returns
    #
    #      Object - Found object, or objNull if nothing in range.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #nearestObjects, #nearObjectsReady, #nearObjects, #objectFromNetId, #nearEntities, #entities
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nearestObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _nObject = nearestObject [2345,6789];
    #    _nObject = nearestObject [player, "StreetLamp"];
    # 
    # ====== Example 2:
    # 
    #    Return the object with ID 123456:_nObject = [0,0,0] nearestObject 123456; 
    # 
    # ====== Example 3:
    # 
    #    _nObject = getPos player nearestObject "StreetLamp"; 
    # 
    # ====== Example 4:
    # 
    #    Return the nearest object with (typeOf _nObject == "#XXXX") -> #mark, #slop, etc. Unlimited search range:_nObject = _position nearestObject -1; 
    #    Return the nearest object with (typeOf _nObject != ""). Search range is 50m:
    #    _nObject = nearestObject _position; 
    # 
    def nearestObject _obj, _args
      "_obj nearestObject _args;" 
    end

    # Returns a list of nearest objects of the given types to the given position or object, within the specified distance.
    # 
    # ==== Description
    # 
    # position can use the format:
    # 
    # [[x,y,z], ["ClassName",.
    # 
    # .
    # 
    # .
    # 
    # ], radius]
    # 
    # or
    # 
    # [object, ["ClassName",.
    # 
    # .
    # 
    # .
    # 
    # ], radius]
    # 
    # To use it without any ClassName filter:
    # 
    # [object or position, [], radius].
    # 
    # A list of ClassName types (Tanks eg) can be found in CfgVehicles
    # 
    # If more than one object is found they will be ordered according to their distance (i.
    # 
    # e.
    # 
    # the closest one will be first in the array)
    #  
    # ==== Syntax
    #
    #      objects = nearestObjects [position, types, radius];
    #
    # ==== Parameters
    # 
    # *    +position+ - Array or Object - Where to find objects, center position.  
    # *    +types+ - Array - List of class name of the objects to search for.  
    # *    +radius+ - Number - Range from center position to search for objects.  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #nearestObject, #nearObjects, #nearEntities
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nearestObjects
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    nearestObjects [player, ["Car","Tank"], 200];
    # 
    # ====== Example 2:
    # 
    #    nearestObjects [player, ["house"], 200];
    # 
    # ====== Example 3:
    # 
    #    nearestObjects [[2716,2949,0], ["Car","Truck"], 100];
    # 
    # ====== Example 4:
    # 
    #    Return every object in 50 metres radius around player:nearestObjects [player, [], 50]
    # 
    def nearestObjects _args
      "nearestObjects _args;" 
    end

    # Return how much vehicle wants to reload its weapons
    # 
    # ==== Syntax
    #
    #      Number =  needReload vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/needReload
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _seriousness=  needReload _vehicle
    # 
    def needReload _args
      "needReload _args;" 
    end

    # Unique ID of object or group
    # 
    # ==== Syntax
    #
    #      netId var
    #
    # ==== Parameters
    # 
    # *    +var+ - Object or Group  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #objectFromNetId
    # 
    # Official Wiki: https://community.bistudio.com/wiki/netId
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def netId _args
      "netId _args;" 
    end

    # A non existing object.
    # 
    # ==== Description
    # 
    # This value is not equal to anything, including itself
    #  
    # ==== Syntax
    #
    #      myNetObject = netObjNull
    #
    # ==== Parameters
    # 
    # *    +myNetObject+ - Object  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/netObjNull
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myNetObject == netObjNull // Returns false
    # 
    def netObjNull 
      "netObjNull" 
    end

    # Creates the new overlay dialog for the specified type of overlay
    # 
    # ==== Syntax
    #
    #      map newOverlay config
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +config+ - Config -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/newOverlay
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def newOverlay _obj, _args
      "_obj newOverlay _args;" 
    end

    # Returns the next available menu item index
    # 
    # ==== Syntax
    #
    #      nextMenuItemIndex map
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nextMenuItemIndex
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def nextMenuItemIndex _args
      "nextMenuItemIndex _args;" 
    end

    # Return the remaining time (in seconds) over which the current weather change will occur.
    # 
    # ==== Description
    # 
    # When a weather change finishes, the game engine will automatically generate a new random weather change over a realistic time period (minimum of 90 minutes)
    #  
    # ==== Syntax
    #
    #      Number = nextWeatherChange
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # Each client and the server can have differing weather.
    # 
    # ==== See Also
    # 
    # #fog, #fogForecast, #setFog
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nextWeatherChange
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _seconds=nextWeatherChange
    # 
    def nextWeatherChange 
      "nextWeatherChange" 
    end

    # Nil value.
    # 
    # ==== Description
    # 
    # This value can be used to undefine existing variables
    #  
    # ==== Syntax
    #
    #      nil
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Any Value
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/nil
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    variableToDestroy = nil
    # 
    def nil 
      "nil" 
    end

    # not a.
    # 
    # ==== Description
    # 
    # Exactly the same as ! a
    #  
    # ==== Syntax
    #
    #      Boolean = not a
    #
    # ==== Parameters
    # 
    # *    +a+ - Number  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Operators
    # 
    # Official Wiki: https://community.bistudio.com/wiki/not
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    not false 
    #    Result is true.
    # 
    def not _args
      "not _args;" 
    end

    # Convert float number to a date
    # 
    # ==== Syntax
    #
    #      numberToDate [year,time]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #dateToNumber, #getNumber, #isNumber, #parseNumber, #playersNumber
    # 
    # Official Wiki: https://community.bistudio.com/wiki/numberToDate
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _date = numberToDate [2008,0.5324]; //[2008,7,13,7,49]
    # 
    def numberToDate _args
      "numberToDate _args;" 
    end

    # A non-existing Object.
    # 
    # ==== Description
    # 
    # This value is not equal to anything, including itself
    #  
    # ==== Syntax
    #
    #      Object = objNull
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #grpNull, #locationNull, #taskNull, #controlNull, #displayNull, #isNull
    # 
    # Official Wiki: https://community.bistudio.com/wiki/objNull
    #
    # ==== Examples
    # 
    def objNull 
      "objNull" 
    end

    # Sets the status of an objective that was defined in briefing.
    # 
    # ==== Description
    # 
    # html.
    # 
    # Status may be one of:
    # 
    # "ACTIVE"
    # 
    # "FAILED"
    # 
    # "DONE"
    # 
    # "HIDDEN"
    # 
    # To refer to an objective that is named "OBJ_1", for example, use only the index number in this command (i.
    # 
    # e.
    # 
    # "1" objStatus "HIDDEN")
    #  
    # ==== Syntax
    #
    #      objectivenumber objStatus status
    #
    # ==== Parameters
    # 
    # *    +objectivenumber+ - String  
    # *    +status+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/objStatus
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "1" objStatus "DONE" 
    #    Marks the objective named "OBJ_1" as completed.
    # 
    def objStatus _obj, _args
      "_obj objStatus _args;" 
    end

    # Returns array with all curators which can edit given object
    # 
    # ==== Syntax
    #
    #      objectCurators obj
    #
    # ==== Parameters
    # 
    # *    +obj+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/objectCurators
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def objectCurators _args
      "objectCurators _args;" 
    end

    # Get object with given unique ID
    # 
    # ==== Syntax
    #
    #      objectFromNetId id
    #
    # ==== Parameters
    # 
    # *    +id+ - String  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #netId
    # 
    # Official Wiki: https://community.bistudio.com/wiki/objectFromNetId
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def objectFromNetId _args
      "objectFromNetId _args;" 
    end

    # Select a sound declared in the Description.
    # 
    # ==== Description
    # 
    # ext of the mission to be played the first time the Group tab is selected in the briefing
    #  
    # ==== Syntax
    #
    #      onBriefingGroup soundName
    #
    # ==== Parameters
    # 
    # *    +soundName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # CfgSounds
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onBriefingGroup
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    onBriefingGroup "GroupVoiceOver"
    # 
    def onBriefingGroup _args
      "onBriefingGroup _args;" 
    end

    # Select a sound declared in the Description.
    # 
    # ==== Description
    # 
    # ext of the mission to be played the first time the Notes tab is selected in the briefing
    #  
    # ==== Syntax
    #
    #      onBriefingNotes soundName
    #
    # ==== Parameters
    # 
    # *    +soundName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # CfgSounds
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onBriefingNotes
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    onBriefingNotes "NotesVoiceOver"
    # 
    def onBriefingNotes _args
      "onBriefingNotes _args;" 
    end

    # Select a sound declared in the Description.
    # 
    # ==== Description
    # 
    # ext of the mission to be played the first time the Plan tab is selected in the briefing
    #  
    # ==== Syntax
    #
    #      onBriefingPlan soundName
    #
    # ==== Parameters
    # 
    # *    +soundName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # CfgSounds
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onBriefingPlan
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    onBriefingPlan "PlanVoiceOver"
    # 
    def onBriefingPlan _args
      "onBriefingPlan _args;" 
    end

    # Select a sound declared in the Description.
    # 
    # ==== Description
    # 
    # ext of the mission to be played the first time the TeamSwitch tab is selected in the briefing
    #  
    # ==== Syntax
    #
    #      onBriefingTeamSwitch soundName
    #
    # ==== Parameters
    # 
    # *    +soundName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Team_Switch, #enableTeamSwitch, #onTeamSwitch, #teamSwitch, #teamSwitchEnabled, CfgSounds
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onBriefingTeamSwitch
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    onBriefingTeamSwitch "TeamSwitchVoiceOver"
    # 
    def onBriefingTeamSwitch _args
      "onBriefingTeamSwitch _args;" 
    end

    # Defines an action performed when command mode change.
    # 
    # ==== Description
    # 
    # Command receives,_isHighCommand bool
    #  
    # ==== Syntax
    #
    #      onCommandModeChanged command
    #
    # ==== Parameters
    # 
    # *    +command+ - -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onCommandModeChanged
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    //ca\modules\HC\data\scripts\HC_GUI.sqf
    #    http://pastebin.jonasscholz.de/1641
    # 
    def onCommandModeChanged _args
      "onCommandModeChanged _args;" 
    end

    # Defines an action performed when the user double clicks on the map.
    # 
    # ==== Description
    # 
    # Command receives:,_pos array position,_units array selected units,_shift,_alt bool key state,
    #  
    # ==== Syntax
    #
    #      map onDoubleClick command
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +command+ - String -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onDoubleClick
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def onDoubleClick _obj, _args
      "_obj onDoubleClick _args;" 
    end

    # Statement is run every frame.
    # 
    # ==== Description
    # 
    # 
    # 
    # 
    # 
    # In order to keep compatability between official and community content the functions BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler should be used instead
    #  
    # ==== Syntax
    #
    #      onEachFrame statement
    #
    # ==== Parameters
    # 
    # *    +statement+ - Code  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onEachFrame
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    onEachFrame { hintSilent str position player; }; //Hints position every frame
    # 
    # ====== Example 2:
    # 
    #    Private variables defined outside of onEachFrame scope are not inherited:
    #    _myvar = "bob";
    #    myvar = "bill";
    #    onEachFrame {
    #    	hintSilent str [_myvar, myvar] 
    #    };
    #    //Result: [any,"bill"]
    # 
    # ====== Example 3:
    # 
    #    Only one onEachFrame loop can exist at any time:
    #    onEachFrame {
    #    	player sideChat "first";
    #    };
    #    onEachFrame {
    #    	player sideChat "second";
    #    };
    #    //Result: "second","second","second"..."second"
    #    Note how "first" never gets shown even though it precedes "second". This is because script thread is executing within the same frame and first onEachFrame is overwritten before it has a chance to execute its statement.
    # 
    # ====== Example 4:
    # 
    #    Script suspension is not permitted within onEachFrame scope:
    #    onEachFrame {
    #    	sleep 1
    #    };
    #    //ERROR!!!
    # 
    def onEachFrame _args
      "onEachFrame _args;" 
    end

    # Defines an action performed when palyer clicked on group marker (3D or in a map)
    # 
    # ==== Syntax
    #
    #      onGroupIconClick command
    #
    # ==== Parameters
    # 
    # *    +command+ - String or Code - script  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addGroupIcon, #clearGroupIcons, #getGroupIcon, #getGroupIconParams, #groupIconSelectable, #groupIconsVisible, #removeGroupIcon, #setGroupIcon, #setGroupIconParams, #setGroupIconsSelectable, #setGroupIconsVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onGroupIconClick
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    onGroupIconClick
    #    {
    #        scriptname "HC: onGroupIconClick";
    #        //--- HC mod inactive - EXIT
    #        if !(hcshownbar) exitWith {};
    #        _is3D = _this select 0;
    #        _group = _this select 1;
    #        _wpID = _this select 2;
    #        _button = _this select 3;
    #        _posx = _this select 4;
    #        _posy = _this select 5;
    #        _shift = _this select 6;
    #        _ctrl = _this select 7;
    #        _alt = _this select 8;
    #        _logic = player getvariable "BIS_HC_scope";
    #    }
    # 
    def onGroupIconClick _args
      "onGroupIconClick _args;" 
    end

    # Defines an action performed when player clicked on group marker (3D or in a map)
    # 
    # ==== Syntax
    #
    #      onGroupIconOverEnter command
    #
    # ==== Parameters
    # 
    # *    +command+ - -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onGroupIconOverEnter
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def onGroupIconOverEnter _args
      "onGroupIconOverEnter _args;" 
    end

    # Defines an action performed when palyer clicked on group marker (3D or in a map)
    # 
    # ==== Syntax
    #
    #      onGroupIconOverLeave command
    #
    # ==== Parameters
    # 
    # *    +command+ - -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onGroupIconOverLeave
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def onGroupIconOverLeave _args
      "onGroupIconOverLeave _args;" 
    end

    # Defines an action performed when high command group selection has been changed.
    # 
    # ==== Description
    # 
    # Command receives 2 variables:
    # 
    # _group: Group - last selected/deselected group
    # 
    # _isSelected: Boolean - new selection state of the specific group
    # 
    # The code is executed on every hc group selection change until it is
    # 
    # removed via onHCGroupSelectionChanged ""; or onHCGroupSelectionChanged {};
    # 
    # or replaced by onHCGroupSelectionChanged "SomeOtherCommand(s)"; or onHCGroupSelectionChanged {SomeOtherCommand(s)};
    #  
    # ==== Syntax
    #
    #      onHCGroupSelectionChanged command
    #
    # ==== Parameters
    # 
    # *    +command+ - String or Code  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # High Command, #hcAllGroups, #hcGroupParams, #hcLeader, #hcRemoveAllGroups, #hcRemoveGroup, #hcSelected, #hcSelectGroup, #hcSetGroup, #hcShowBar, #hcShownBar
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onHCGroupSelectionChanged
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    onHCGroupSelectionChanged {
    #      if (_isSelected) then {
    #        hint format ["Group %1 has been selected.", _group];
    #      } else {
    #        hint format ["Group %1 has been deselected.", _group];
    #      };
    #    };
    # 
    # ====== Example 2:
    # 
    #    onHCGroupSelectionChanged "player globalChat 'HC group selection has been changed.';";
    # 
    def onHCGroupSelectionChanged _args
      "onHCGroupSelectionChanged _args;" 
    end

    # Define action performed when user clicks in map by executing command string.
    # 
    # ==== Description
    # 
    # the string receives 3 (localised in scope) variables:
    # 
    # _pos: Array - Clicked position
    # 
    # _units: Array - Units which were selected (via function keys) before opening the map (may be non-functional in Arma)
    # 
    # _shift, _alt Boolean - Whether <Shift> or <Alt> were pressed when clicking on the map
    # 
    # When click is processed, code should ultimately return true back to the engine.
    # 
    # If false is returned, default processing by the game engine is done.
    # 
    # Return value of any other type (including Nothing) is an error.
    # 
    # In such case default processing by the game engine is done, and error message may be displayed.
    # 
    # The code is executed on every click, until the Command is
    # 
    # removed via onMapSingleClick "", or
    # 
    # replaced by onMapSingleClick "SomeOtherCommand(s)"
    # 
    # 
    # 
    # In order to keep compatability between official and community content the functions BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler should be used instead
    #  
    # ==== Syntax
    #
    #      onMapSingleClick command
    #
    # ==== Parameters
    # 
    # *    +command+ - String or Code  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #onGroupIconClick, #onDoubleClick
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onMapSingleClick
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    onMapSingleClick "'SoldierWB' createUnit [_pos, group player]; true;"
    #    ArmA: Creates a soldier unit at the position clicked.
    # 
    # ====== Example 2:
    # 
    #    onMapSingleClick "_grp1 move _pos; onMapSingleClick ''; true;"
    #    ArmA: Orders "_grp1" to move to position clicked. Disables further map-click actions.
    # 
    # ====== Example 3:
    # 
    #    onMapSingleClick """SoldierWB"" createUnit [_pos, group player]; true;"
    #    OFP: In OFP single quotes cannot be used for string definition, so two double-quotes have to be used instead.
    # 
    # ====== Example 4:
    # 
    #    //The following code will disable Shift+click waypoint marker creation
    #    onMapSingleClick {_shift};
    # 
    def onMapSingleClick _args
      "onMapSingleClick _args;" 
    end

    # This statement is launched whenever a player is connected to a MP session.
    # 
    # ==== Description
    # 
    # 
    # 
    # Variables _id and _name are set, in theory _id being the session id number as seen in #userlist.
    # 
    # 
    # 
    # Note that as of 1.
    # 
    # 08, this command only accepts a code-string rather than code delimited by braces.
    # 
    # Note as of ArmA 2 version 1.
    # 
    # 02 this function returns also variable _uid with uniqueID of player.
    # 
    # As of version Arma2 1.
    # 
    # 04, _id will return a number in float format, something like 1.
    # 
    # 4253e+10.
    # 
    # 
    # 
    # _id is the Unique DirectPlay ID of player, and there are some conversions between DirectPlay floats and Arma Engine numbers.
    # 
    # 
    # 
    # In order to keep compatability between official and community content the functions BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler should be used instead
    #  
    # ==== Syntax
    #
    #      onPlayerConnected statement
    #
    # ==== Parameters
    # 
    # *    +statement+ - String or Code  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # The statement is executed only on the server, not on the joining player's computer, nor on any other client.
    # 
    # This happens even if onPlayerConnected was issued on all machines.
    # 
    # Note that there is a player with the _name called __SERVER__ which will also connect to a multiplayer game, executing statement.
    # 
    # ==== See Also
    # 
    # #onPlayerDisconnected
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onPlayerConnected
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    onPlayerConnected "[_id, _name] execVM ""PlayerConnected.sqf""";
    # 
    # ====== Example 2:
    # 
    #    onPlayerConnected {diag_log [_id, _uid, _name]};
    # 
    def onPlayerConnected _args
      "onPlayerConnected _args;" 
    end

    # This statement is launched whenever a player is disconnected from a MP session.
    # 
    # ==== Description
    # 
    # 
    # 
    # Variables _id and _name are set.
    # 
    # 
    # 
    # Note that as of 1.
    # 
    # 08, this command only accepts a code-string rather than code delimited by braces.
    # 
    # 
    # 
    # Note as of ArmA 2 version 1.
    # 
    # 02 this function returns also variable _uid with uniqueID of player.
    # 
    # 
    # 
    # In order to keep compatability between official and community content the functions BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler should be used instead
    #  
    # ==== Syntax
    #
    #      onPlayerDisconnected statement
    #
    # ==== Parameters
    # 
    # *    +statement+ - String or Code  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #onPlayerConnected
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onPlayerDisconnected
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    onPlayerDisconnected "endMission ""END1"";";
    # 
    # ====== Example 2:
    # 
    #    onPlayerDisconnected {diag_log [_id, _uid, _name]};
    # 
    def onPlayerDisconnected _args
      "onPlayerDisconnected _args;" 
    end

    # Defines an action performed after the preload screen finished.
    # 
    # ==== Description
    # 
    # 
    # 
    # 
    # 
    # In order to keep compatability between official and community content the functions BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler should be used instead
    #  
    # ==== Syntax
    #
    #      onPreloadFinished command
    #
    # ==== Parameters
    # 
    # *    +command+ - String or Code  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #onPreloadStarted
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onPreloadFinished
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    onPreloadFinished 'TAG_ReceivingScreenDone = true;';
    # 
    # ====== Example 2:
    # 
    #    //removes the event immediately after the first run again
    #    onPreloadFinished {TAG_ReceivingScreenDone = true; onPreloadFinished {};};
    # 
    def onPreloadFinished _args
      "onPreloadFinished _args;" 
    end

    # Defines an action performed just before the preload screen started.
    # 
    # ==== Description
    # 
    # 
    # 
    # 
    # 
    # In order to keep compatability between official and community content the functions BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler should be used instead
    #  
    # ==== Syntax
    #
    #      onPreloadStarted command
    #
    # ==== Parameters
    # 
    # *    +command+ - String or Code  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #onPreloadFinished
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onPreloadStarted
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    onPreloadStarted {diag_log "preload started";};
    # 
    def onPreloadStarted _args
      "onPreloadStarted _args;" 
    end

    # Defines an action performed when the user right clicks on the map and,selects New Object.
    # 
    # ==== Description
    # 
    # Set to empty for default behavior.
    # 
    # Command receives:,_pos array position,
    #  
    # ==== Syntax
    #
    #      map onShowNewObject command
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +command+ - String -  
    #
    # ==== Returns
    #
    #      Any
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onShowNewObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def onShowNewObject _obj, _args
      "_obj onShowNewObject _args;" 
    end

    # Defines an action performed when the team switch is finished.
    # 
    # ==== Description
    # 
    # Command receives: _from object previous unit, _to object current unit
    #  
    # ==== Syntax
    #
    #      onTeamSwitch command
    #
    # ==== Parameters
    # 
    # *    +command+ - -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Team_Switch, #enableTeamSwitch, #onBriefingTeamSwitch, #teamSwitch, #teamSwitchEnabled
    # 
    # Official Wiki: https://community.bistudio.com/wiki/onTeamSwitch
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    onTeamSwitch {[_from, _to] execVM "myTeamSwitchScript.sqf";}
    # 
    def onTeamSwitch _args
      "onTeamSwitch _args;" 
    end

    # Force opens curator interface
    # 
    # ==== Syntax
    #
    #      openCuratorInterface
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Client side execution
    # 
    # ==== See Also
    # 
    # Curator
    # 
    # Official Wiki: https://community.bistudio.com/wiki/openCuratorInterface
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    Open interface: openCuratorInterface;
    # 
    # ====== Example 2:
    # 
    #    Close interface: findDisplay 312 closeDisplay 2;
    # 
    def openCuratorInterface 
      "openCuratorInterface" 
    end

    # Show player's map.
    # 
    # ==== Description
    # 
    # If forced, cannot be closed
    #  
    # ==== Syntax
    #
    #      openMap [show, forced]
    #
    # ==== Parameters
    # 
    # *    +show+ - Boolean  
    # *    +show+ - Boolean  
    # *    +forced+ - Boolean  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # Unavailable in multiplayer - NOT true for A2/OA
    # 
    # ==== See Also
    # 
    # #forceMap, #visibleMap
    # 
    # Official Wiki: https://community.bistudio.com/wiki/openMap
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     openMap true 
    # 
    # ====== Example 2:
    # 
    #     openMap [true, true] 
    # 
    def openMap _args
      "openMap _args;" 
    end

    # Pre-defined variable for the opfor side
    # 
    # ==== Syntax
    #
    #      opfor
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/opfor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     if (side player == opfor) Then {hint "OPFOR"};
    # 
    def opfor 
      "opfor" 
    end

    # Force all units in the array to get in or out of their assigned vehicles.
    # 
    # ==== Description
    # 
    # Units must be assigned to a vehicle before this command will do anything
    #  
    # ==== Syntax
    #
    #      unitArray orderGetIn order
    #
    # ==== Parameters
    # 
    # *    +unitArray+ - Array  
    # *    +order+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #allowGetIn, #assignAsCargo, #assignAsCommander, #assignAsDriver, #assignAsGunner
    # 
    # Official Wiki: https://community.bistudio.com/wiki/orderGetIn
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_unitOne, _unitTwo] orderGetIn true 
    # 
    # ====== Example 2:
    # 
    #    [_unitOne, _unitTwo] orderGetIn false 
    # 
    def orderGetIn _obj, _args
      "_obj orderGetIn _args;" 
    end

    # Return the current overcast level.
    # 
    # ==== Description
    # 
    # Zero is clear skies, one is maximum cloud cover
    #  
    # ==== Syntax
    #
    #      Number = overcast
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # Each client and the server can have differing overcast values.
    # 
    # ==== See Also
    # 
    # #overcastForecast, #setOvercast, #nextWeatherChange
    # 
    # Official Wiki: https://community.bistudio.com/wiki/overcast
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _cloudLevel = overcast 
    # 
    def overcast 
      "overcast" 
    end

    # Return the overcast forecast
    # 
    # ==== Syntax
    #
    #      Number = overcastForecast
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/overcastForecast
    #
    # ==== Examples
    # 
    def overcastForecast 
      "overcastForecast" 
    end

    # On server machine,return the ID of the client where the object is local.
    # 
    # ==== Description
    # 
    # Otherwise return 0
    #  
    # ==== Syntax
    #
    #      owner object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #publicVariableClient, #setOwner
    # 
    # Official Wiki: https://community.bistudio.com/wiki/owner
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _clientID = owner _someobject;
    # 
    def owner _args
      "owner _args;" 
    end

    # Parse string containing real number
    # 
    # ==== Syntax
    #
    #      Number = parseNumber string
    #
    # ==== Parameters
    # 
    # *    +string+ - String  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/parseNumber
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _number = parseNumber "0.125"
    # 
    def parseNumber _args
      "parseNumber _args;" 
    end

    # Creates a structured text by parsing the given XML description
    # 
    # ==== Syntax
    #
    #      Structured Text = parseText text
    #
    # ==== Parameters
    # 
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Structured Text
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #composeText, #text, #ctrlSetStructuredText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/parseText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _Stxt = parseText "First line<img image='data\isniper.paa'/><br/>Second line";
    # 
    # ====== Example 2:
    # 
    #    hintSilent parseText format["<t size='1.25' font='Zeppelin33' color='#ff0000'>%1 lives remaining.</t>", 12];
    # 
    def parseText _args
      "parseText _args;" 
    end

    # Return the global namespace attached to config parser
    # 
    # ==== Syntax
    #
    #      parsingNamespace
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Namespace
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Forward Compatibility, #uiNamespace, #missionNamespace, #with
    # 
    # Official Wiki: https://community.bistudio.com/wiki/parsingNamespace
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def parsingNamespace 
      "parsingNamespace" 
    end

    # Return current settings for particles quality
    # 
    # ==== Syntax
    #
    #      particlesQuality
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/particlesQuality
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def particlesQuality 
      "particlesQuality" 
    end

    # pi (180 degrees converted to Radians)
    # 
    # ==== Syntax
    #
    #      Number = pi
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/pi
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _radians = 2*pi
    #    Result is 6.2830
    # 
    def pi 
      "pi" 
    end

    # Transfer weapons and magazines from cargo of object into weapon pool (used in campaign to transfer weapons into next mission)
    # 
    # ==== Syntax
    #
    #      pickWeaponPool object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/pickWeaponPool
    #
    # ==== Examples
    # 
    def pickWeaponPool _args
      "pickWeaponPool _args;" 
    end

    # Returns the pitch of a persons voice
    # 
    # ==== Syntax
    #
    #      pitch person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setPitch
    # 
    # Official Wiki: https://community.bistudio.com/wiki/pitch
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    pitch player
    # 
    def pitch _args
      "pitch _args;" 
    end

    # When used on a person, a smooth transition to the given action will be initiated
    # 
    # ==== Syntax
    #
    #      soldier playAction action
    #
    # ==== Parameters
    # 
    # *    +soldier+ - Object -  
    # *    +action+ - String -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #playActionNow, #playMove, #playMoveNow, #switchMove, #playGesture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/playAction
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    soldierOne playAction "SitDown"
    # 
    def playAction _obj, _args
      "_obj playAction _args;" 
    end

    # When used on a person, a smooth transition to the given action will be initiated, but all previous playAction are discarded.
    # 
    # ==== Description
    # 
    # 
    # 
    # ArmA: ActionsArmA_2:_ActionsOperation_Flashpoint:_Actions_List
    #  
    # ==== Syntax
    #
    #      soldier playActionNow action
    #
    # ==== Parameters
    # 
    # *    +soldier+ - Object -  
    # *    +action+ - String -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #playAction, #playMove, #playMoveNow, #switchMove, #playGesture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/playActionNow
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    soldierOne playActionNow "SitDown"
    # 
    def playActionNow _obj, _args
      "_obj playActionNow _args;" 
    end

    # When used on a person,a smooth transition to the given move will be initiated.
    # 
    # ==== Description
    # 
    # Command doesn't seem to be functional
    #  
    # ==== Syntax
    #
    #      soldier playGesture moveName
    #
    # ==== Parameters
    # 
    # *    +soldier+ - Object  
    # *    +moveName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #playMove, #playMoveNow, #playAction, #playActionNow, #switchMove
    # 
    # Official Wiki: https://community.bistudio.com/wiki/playGesture
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    soldierOne playGesture "Wave"
    # 
    def playGesture _obj, _args
      "_obj playGesture _args;" 
    end

    # The mission is launched (from the main menu).
    # 
    # ==== Description
    # 
    # Both campaign and mission are given as their directory name.
    # 
    # If the campaign is empty, a single mission is launched.
    # 
    # If skipBriefing is true, the intro and briefing are skipped
    #  
    # ==== Syntax
    #
    #      playMission [campaign, mission] or [campaign, mission, skipBriefing]
    #
    # ==== Parameters
    # 
    # *    +campaign+ - String  
    # *    +mission+ - String  
    # *    +skipBriefing+ - Boolean - Optional  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #hostMission, #playScriptedMission
    # 
    # Official Wiki: https://community.bistudio.com/wiki/playMission
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    playMission ["XOutrage","x05Negotiator.Noe"]
    # 
    def playMission _args
      "playMission _args;" 
    end

    # When used on person, smooth transition to given move will be done.
    # 
    # ==== Description
    # 
    # List of moves in ArmA 2List of moves in Armed AssaultList of moves in Operation Flashpoint: Resistance
    #  
    # ==== Syntax
    #
    #      unitName playMove moveName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +moveName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #playMoveNow, #switchMove, #playAction, #playActionNow, #playGesture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/playMove
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    soldierOne playMove "Stand" 
    # 
    def playMove _obj, _args
      "_obj playMove _args;" 
    end

    # When used on a person,a smooth transition to the given move will be initiated, but all previous playMove are discarded.
    # 
    # ==== Description
    # 
    # 
    # 
    # List of moves in ArmA 2List of moves in Armed AssaultList of moves in Operation Flashpoint: Resistance
    #  
    # ==== Syntax
    #
    #      soldier playMoveNow moveName
    #
    # ==== Parameters
    # 
    # *    +soldier+ - Object -  
    # *    +moveName+ - String -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #playMove, #switchMove, #playAction, #playActionNow, #playGesture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/playMoveNow
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player playMoveNow "AmovPercMevaSlowWrflDf"
    # 
    def playMoveNow _obj, _args
      "_obj playMoveNow _args;" 
    end

    # Plays music defined in CfgMusic.
    # 
    # ==== Description
    # 
    # To stop the music execute playMusic "" or give the start time which is beyond the music duration playMusic ["SomeMusic", 1000];
    #  
    # ==== Syntax
    #
    #      playMusic [name, start]
    #
    # ==== Parameters
    # 
    # *    +name + - String - music class  
    # *    +name+ - String - music class  
    # *    +start+ - Number - start from (seconds). Could be negative.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #playSound, #say, #createSoundSource, #addMusicEventHandler
    # 
    # Official Wiki: https://community.bistudio.com/wiki/playMusic
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    playMusic "RadioAmbient1";
    # 
    # ====== Example 2:
    # 
    #    playMusic ["RadioAmbient3", 3]; //start from 00:00:03
    # 
    # ====== Example 3:
    # 
    #    Play from 00:00:01 to 00:00:050 = [] spawn {
    #    	playMusic ["RadioAmbient5", 1];
    #    	sleep 4;
    #    	playMusic "";
    #    };
    # 
    def playMusic _args
      "playMusic _args;" 
    end

    # Load the given world,launch an empty mission and execute the given,expression.
    # 
    # ==== Description
    # 
    # Config (optional) can reference to the config entry,replacing description.
    # 
    # ext for this mission
    #  
    # ==== Syntax
    #
    #      playScriptedMission [world,expression,config]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #hostMission, #playMission
    # 
    # Official Wiki: https://community.bistudio.com/wiki/playScriptedMission
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    playScriptedMission
    #    [
    #    	"desert_e",
    #    	{
    #    		private["_handle"];
    #    		_handle = execVM "\ca\missions_e\data\scenes\credits1\init.sqf";
    #    	},
    #    	configFile/"CfgMissions"/"Cutscenes"/"Credits"
    #    ];
    # 
    def playScriptedMission _args
      "playScriptedMission _args;" 
    end

    # selects Sound from CfgSounds declared in the Description.
    # 
    # ==== Description
    # 
    # ext file
    #  
    # ==== Syntax
    #
    #      playSound [soundName,forcePlay]
    #
    # ==== Parameters
    # 
    # *    +soundName+ - String  
    # *    +soundName+ - String  
    # *    +forcePlay+ - Boolean - true to ignore fadeSound volume settings.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #playSound3D, #sideRadio, #say, #playMusic, #say2D, #say3D, #createSoundSource
    # 
    # Official Wiki: https://community.bistudio.com/wiki/playSound
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    playSound "soundname"
    # 
    def playSound _args
      "playSound _args;" 
    end

    # Plays a sound with given filename.
    # 
    # ==== Description
    # 
    # At least 2 parameters must be added
    #  
    # ==== Syntax
    #
    #      playSound3D [filename, source, isInside, position, volume, frequency, distance]
    #
    # ==== Parameters
    # 
    # *    +filename+ - String  
    # *    +source+ - Object  
    # *    +isInside+ - Boolean  
    # *    +position+ - Position  
    # *    +volume+ - Number  
    # *    +frequency+ - Number  
    # *    +distance+ - Number - How far is sound audible (0 = no max distance).  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/playSound3D
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    playSound3D ["A3\Sounds_F\sfx\blip1.wav", player]
    # 
    # ====== Example 2:
    # 
    #    playSound3D ["A3\Sounds_F\sfx\blip1.wav", player, false, getPos player, 1, 1, 0]
    # 
    # ====== Example 3:
    # 
    #    Sound file extension must be specified even if a config entry has none:
    #    playSound3D ["A3\Sounds_F\sfx\alarm_independent", player]; //no sound
    #    playSound3D ["A3\Sounds_F\sfx\alarm_independent.wss", player]; //alarm
    # 
    def playSound3D _args
      "playSound3D _args;" 
    end

    # Returns the number of available slots in mission per side (both empty and taken).
    # 
    # ==== Description
    # 
    # In singleplayer mission, it returns number of playable units per side
    #  
    # ==== Syntax
    #
    #      playableSlotsNumber side
    #
    # ==== Parameters
    # 
    # *    +side+ - Side  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #playableUnits, #switchableUnits
    # 
    # Official Wiki: https://community.bistudio.com/wiki/playableSlotsNumber
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _maxBluforPlayers = playableSlotsNumber blufor;
    # 
    def playableSlotsNumber _args
      "playableSlotsNumber _args;" 
    end

    # Return a list of playable units (occupied by both AI or players) in a multiplayer game
    # 
    # ==== Syntax
    #
    #      playableUnits
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #units, #allUnits, #switchableUnits, #allGroups, #vehicles
    # 
    # Official Wiki: https://community.bistudio.com/wiki/playableUnits
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def playableUnits 
      "playableUnits" 
    end

    # Person controlled by player.
    # 
    # ==== Description
    # 
    # In MP this value is different on each computer.
    # 
    # In Intros and Outros this isn't set by default and must be assigned
    #  
    # ==== Syntax
    #
    #      Object = player
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -Problems:In MP the command is not initialised in functions called by initline or init eventhandlers.
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/player
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player addRating 500
    # 
    def player 
      "player" 
    end

    # Returns the player's side.
    # 
    # ==== Description
    # 
    # This is valid even when the player controlled person is dead (a difference from side player)
    #  
    # ==== Syntax
    #
    #      Side = playerSide
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Side, #side, #west, #east, #resistance, #civilian, #sideLogic, #sideFriendly, #sideEnemy, #sideUnknown, #side location, Side relations
    # 
    # Official Wiki: https://community.bistudio.com/wiki/playerSide
    #
    # ==== Examples
    # 
    def playerSide 
      "playerSide" 
    end

    # Return count of players playing on given side.
    # 
    # ==== Description
    # 
    # Works only in multiplayer, in singleplayer always returns 0.
    # 
    # Returns number of playable slots taken by a side, not actual number of players of the side present in the mission.
    # 
    # As a result, players who claimed a slot in the lobby but didn't start the mission yet are counted in as well
    #  
    # ==== Syntax
    #
    #      Number =  playersNumber side
    #
    # ==== Parameters
    # 
    # *    +side+ - Side  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/playersNumber
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _west = playersNumber west;
    #    _east = playersNumber east;
    #    _civ = playersNumber civilian;
    #    hint format [ "West:%1 East:%2, Civ:%3", _west, _east, _civ];
    # 
    def playersNumber _args
      "playersNumber _args;" 
    end

    # Convert screen coordinates in map to world coordinates
    # 
    # ==== Syntax
    #
    #      map posScreenToWorld [x, y]
    #
    # ==== Parameters
    # 
    # *    +map + - Control  
    # *    +[x, y]+ - Array - format Position2D  
    #
    # ==== Returns
    #
    #      Array (Position2D Format)
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ctrlMapScreenToWorld, #ctrlMapWorldToScreen, #posWorldToScreen
    # 
    # Official Wiki: https://community.bistudio.com/wiki/posScreenToWorld
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _WorldCoord = _Control posScreenToWorld _ScreenCoord
    # 
    # ====== Example 2:
    # 
    #    _WorldCoord = _Control posScreenToWorld [_x,_y]
    # 
    def posScreenToWorld _obj, _args
      "_obj posScreenToWorld _args;" 
    end

    # Convert world coordinates to screen coordinates in map
    # 
    # ==== Syntax
    #
    #      map posWorldToScreen position
    #
    # ==== Parameters
    # 
    # *    +map + - Control  
    # *    +position + - Array - format Position2D  
    #
    # ==== Returns
    #
    #      Array (Position2D Format)
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/posWorldToScreen
    #
    # ==== Examples
    # 
    def posWorldToScreen _obj, _args
      "_obj posWorldToScreen _args;" 
    end

    # Synonym for getPos
    # 
    # ==== Syntax
    #
    #      Array = position object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object; since VBS2 1.24: Location  
    #
    # ==== Returns
    #
    #      Array - format Position
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #position location, #getPos, #getPosATL, #getPosASL, #getPosASLW, #visiblePosition, #visiblePositionASL
    # 
    # Official Wiki: https://community.bistudio.com/wiki/position
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _Pos = position player
    # 
    def position _args
      "position _args;" 
    end

    # Set post process effect parameters
    # 
    # ==== Syntax
    #
    #      effect ppEffectAdjust settings
    #
    # ==== Parameters
    # 
    # *    +effect+ - String or Number - where string is effect name or number is ppEffect handle.  
    # *    +settings+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Post process effects, #ppEffectForceInNVG, #ppEffectEnable, #ppEffectDestroy, #ppEffectCreate, #ppEffectCommitted, #ppEffectCommit
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ppEffectAdjust
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "colorCorrections" ppEffectAdjust [1, 1, -0.01, [0.0, 0.0, 0.0, 0.0], [1.5, 1, 1.2, 0.6],  [0.199, 0.587, 0.114, 0.20]];
    # 
    def ppEffectAdjust _obj, _args
      "_obj ppEffectAdjust _args;" 
    end

    # Commit post process effect in given time
    # 
    # ==== Syntax
    #
    #      effect ppEffectCommit duration
    #
    # ==== Parameters
    # 
    # *    +effect+ - String or Number - where string is effect name or number is ppEffect handle.  
    # *    +duration+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Post process effects, #ppEffectForceInNVG, #ppEffectEnable, #ppEffectDestroy, #ppEffectCreate, #ppEffectCommitted, #ppEffectAdjust
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ppEffectCommit
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "colorCorrection" ppEffectCommit 3;
    # 
    def ppEffectCommit _obj, _args
      "_obj ppEffectCommit _args;" 
    end

    # Check whether given post process effect is committed
    # 
    # ==== Syntax
    #
    #      ppEffectCommitted effect
    #
    # ==== Parameters
    # 
    # *    +effect+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Post process effects, #ppEffectForceInNVG, #ppEffectEnable, #ppEffectDestroy, #ppEffectCreate, #ppEffectCommit, #ppEffectAdjust
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ppEffectCommitted
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (ppEffectCommitted "colorCorrection") then {hint "alteration done !";};
    # 
    def ppEffectCommitted _args
      "ppEffectCommitted _args;" 
    end

    # Create Post process effects specified by effect name and priority.
    # 
    # ==== Description
    # 
    # See class CfgOpticsEffect for examples using:
    # 
    # "radialBlur"
    # 
    # "chromAberration"
    # 
    # "wetDistortion"
    # 
    # "colorCorrections"
    # 
    # "dynamicBlur"
    # 
    # "filmGrain"
    # 
    # "colorInversion"
    #  
    # ==== Syntax
    #
    #      ppEffectCreate effect
    #
    # ==== Parameters
    # 
    # *    +effect+ - [name, priority]  
    # *    +name+ - String - name of effect type.  
    # *    +priority+ - Number - unique priority  
    #
    # ==== Returns
    #
    #      Number - handle
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Post process effects, #ppEffectForceInNVG, #ppEffectEnable, #ppEffectDestroy, #ppEffectCommit, #ppEffectCommitted, #ppEffectAdjust
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ppEffectCreate
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ppGrain = ppEffectCreate ["filmGrain", 2005];
    # 
    def ppEffectCreate _args
      "ppEffectCreate _args;" 
    end

    # Destroy Post process effects given by handle
    # 
    # ==== Syntax
    #
    #      ppEffectDestroy effect
    #
    # ==== Parameters
    # 
    # *    +effect+ - Array or Number -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Post process effects, #ppEffectForceInNVG, #ppEffectEnable, #ppEffectCreate, #ppEffectCommit, #ppEffectCommitted, #ppEffectAdjust
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ppEffectDestroy
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ppEffectDestroy _hndl;
    # 
    # ====== Example 2:
    # 
    #    ppEffectDestroy [_hndl0, _hndl1, _hndl2];
    # 
    def ppEffectDestroy _args
      "ppEffectDestroy _args;" 
    end

    # Enable / disable Post process effects
    # 
    # ==== Syntax
    #
    #      effect ppEffectEnable enable
    #
    # ==== Parameters
    # 
    # *    +effect+ - String or Number - where string is effect name or number is ppEffect handle.  
    # *    +enable+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Post process effects, #ppEffectForceInNVG, #ppEffectDestroy, #ppEffectCreate, #ppEffectCommit, #ppEffectCommitted, #ppEffectAdjust
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ppEffectEnable
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "colorCorrections" ppEffectEnable true;
    # 
    def ppEffectEnable _obj, _args
      "_obj ppEffectEnable _args;" 
    end

    # Forces use of Post process effects in NVG
    # 
    # ==== Syntax
    #
    #      number ppEffectForceInNVG bool
    #
    # ==== Parameters
    # 
    # *    +number+ - Number  
    # *    +bool+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Post process effects, #ppEffectEnable, #ppEffectDestroy, #ppEffectCreate, #ppEffectCommit, #ppEffectCommitted, #ppEffectAdjust
    # 
    # Official Wiki: https://community.bistudio.com/wiki/ppEffectForceInNVG
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def ppEffectForceInNVG _obj, _args
      "_obj ppEffectForceInNVG _args;" 
    end

    # Return the precision of the given entity
    # 
    # ==== Syntax
    #
    #      Number = precision entity
    #
    # ==== Parameters
    # 
    # *    +entity+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/precision
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (((position _this) distance _dangerPos) <= (precision _this)) then {...};//used in formationCDanger.fsm
    # 
    def precision _args
      "precision _args;" 
    end

    # Preload all textures and models around given Position to avoid visual artifacts after camera is moved.
    # 
    # ==== Description
    # 
    # Should be used before any abrupt camera change/cut.
    # 
    # Returns true once all data is ready
    #  
    # ==== Syntax
    #
    #      Boolean = preloadCamera positionposition: Array - format Position
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camPreload, #camPreloaded
    # 
    # Official Wiki: https://community.bistudio.com/wiki/preloadCamera
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waitUntil {preloadCamera markerPos "cam_location_2" }
    # 
    def preloadCamera _args
      "preloadCamera _args;" 
    end

    # Preload all textures, materials and proxies needed to render given object.
    # 
    # ==== Description
    # 
    # Object can be determined either by config class name (CfgVehicles), or by Unit.
    # 
    # 
    # 
    # Returns true once all data is loaded and ready
    #  
    # ==== Syntax
    #
    #      Boolean = distance preloadObject object
    #
    # ==== Parameters
    # 
    # *    +distance+ - Number  
    # *    +object+ - Object or String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/preloadObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    spawn {waitUntil {10 preloadObject "SoldierW"}}
    # 
    # ====== Example 2:
    # 
    #    spawn {waitUntil {10 preloadObject leader player}}
    # 
    def preloadObject _obj, _args
      "_obj preloadObject _args;" 
    end

    # Makes sure that a sound can start playing without any delay once it is needed.
    # 
    # ==== Description
    # 
    # Note:Not implemented yet - currently does nothing
    #  
    # ==== Syntax
    #
    #      Boolean = preloadSound soundName
    #
    # ==== Parameters
    # 
    # *    +soundName+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/preloadSound
    #
    # ==== Examples
    # 
    def preloadSound _args
      "preloadSound _args;" 
    end

    # Object title -  Preload data the object can be defined in the Description.
    # 
    # ==== Description
    # 
    # ext file
    #  
    # ==== Syntax
    #
    #      Boolean = preloadTitleObj [name, type, speed] or [name, type]
    #
    # ==== Parameters
    # 
    # *    +name+ - String defined in Description.ext for the mission  
    # *    +type+ - String "PLAIN" e.g.  
    # *    +speed+ - Optional, and ignored  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/preloadTitleObj
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ok=preloadTitleObj ["BISLogo","plain"]
    # 
    def preloadTitleObj _args
      "preloadTitleObj _args;" 
    end

    # Resource title - Preload data.
    # 
    # ==== Description
    # 
    # The resource can be defined in the Description.
    # 
    # ext file
    #  
    # ==== Syntax
    #
    #      Boolean = preloadTitleRsc [name, type, speed] or [name, type]
    #
    # ==== Parameters
    # 
    # *    +name+ - String defined in Description.ext for the mission  
    # *    +type+ - String "PLAIN" e.g.  
    # *    +speed+ - Optional and ignored  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/preloadTitleRsc
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ok=preloadTitleRsc ["BIS", "PLAIN"]
    # 
    def preloadTitleRsc _args
      "preloadTitleRsc _args;" 
    end

    # Reads and processes the content of the specified file.
    # 
    # ==== Description
    # 
    # Preprocessor is C-like, supports comments using // or /* and */ and macros defined with #define.
    # 
    # Due to the hard-drive access this command executes (and the lack of caching) this command should not be used in time-critical script loops
    #  
    # ==== Syntax
    #
    #      String = preprocessFile fileName
    #
    # ==== Parameters
    # 
    # *    +fileName+ - String  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #preprocessFileLineNumbers, #loadFile, Function, SQF syntax, #call, #spawn, #execVM, PreProcessor Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/preprocessFile
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _content=preprocessFile "myFunction.sqf"
    # 
    def preprocessFile _args
      "preprocessFile _args;" 
    end

    # Returns the preprocessed content of the given file.
    # 
    # ==== Description
    # 
    # The preprocessor is C-like, it supports comments using // or /* and */ and macros defined with #define
    #  
    # ==== Syntax
    #
    #      String = preprocessFileLineNumbers fileName
    #
    # ==== Parameters
    # 
    # *    +fileName+ - String  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #preprocessFile, #loadFile, Function, SQF syntax, #call, #spawn, #execVM, PreProcessor Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/preprocessFileLineNumbers
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _string = preprocessFileLineNumbers "myFunction.sqf" 
    #    Result is "if a>b then {a} else {b}"
    # 
    def preprocessFileLineNumbers _args
      "preprocessFileLineNumbers _args;" 
    end

    # Returns name of unit's primary weapon (empty string if none)
    # 
    # ==== Syntax
    #
    #      String = primaryWeapon unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #primaryWeaponMagazine, #primaryWeaponItems, #addPrimaryWeaponItem, #removePrimaryWeaponItem, #removeAllPrimaryWeaponItems, #secondaryWeapon, #handgunWeapon, #currentWeapon, #weapons
    # 
    # Official Wiki: https://community.bistudio.com/wiki/primaryWeapon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _pWeap = primaryWeapon player;
    # 
    # ====== Example 2:
    # 
    #    hint primaryWeapon player; //"arifle_MX_ACO_pointer_F"
    # 
    def primaryWeapon _args
      "primaryWeapon _args;" 
    end

    # Returns array with all items assigned to the primary weapon.
    # 
    # ==== Description
    # 
    # This command is used for infantry weapons only
    #  
    # ==== Syntax
    #
    #      primaryWeaponItems unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addPrimaryWeaponItem, #removePrimaryWeaponItem, #removeAllPrimaryWeaponItems, #weaponsItems, #handgunItems, #secondaryWeaponItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/primaryWeaponItems
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    primaryWeaponItems player; 
    #    /*
    #    [
    #    	"muzzle_snds_H",	//silencer
    #    	"acc_pointer_IR",	//laser
    #    	"optic_Aco"		//optics
    #    ]
    #    */
    # 
    def primaryWeaponItems _args
      "primaryWeaponItems _args;" 
    end

    # Returns either single element array, containing class name of currently loaded in the primary weapon magazine, or an empty array if unit has no primary weapon or primary weapon is not loaded.
    # 
    # ==== Description
    # 
    # This command is used for infantry weapons only
    #  
    # ==== Syntax
    #
    #      primaryWeaponMagazine unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #primaryWeapon, #primaryWeaponItems, #addPrimaryWeaponItem, #removePrimaryWeaponItem, #removeAllPrimaryWeaponItems, #handgunMagazine, #secondaryWeaponMagazine
    # 
    # Official Wiki: https://community.bistudio.com/wiki/primaryWeaponMagazine
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint primaryWeaponMagazine player; //["30Rnd_65x39_caseless_mag"]
    # 
    # ====== Example 2:
    # 
    #    _array = primaryWeaponMagazine player;
    #    if (count _array > 0) then {
    #    	hint ("Primary weapon is loaded with " + (_array select 0) + "!");
    #    } else {
    #    	if (primaryWeapon player != "") then {
    #    		hint "Primary weapon is not loaded!";
    #    	} else {
    #    		hint "Player doesn't have a primary weapon!";
    #    	};
    #    };
    # 
    def primaryWeaponMagazine _args
      "primaryWeaponMagazine _args;" 
    end

    # Return the priority of the task
    # 
    # ==== Syntax
    #
    #      priority task
    #
    # ==== Parameters
    # 
    # *    +task+ - Task  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createSimpleTask simpleTasks
    # 
    # Official Wiki: https://community.bistudio.com/wiki/priority
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _prioTsk01 = priority task01
    # 
    def priority _args
      "priority _args;" 
    end

    # Sets a variable to the innermost scope.
    # 
    # ==== Description
    # 
    # The variable has to be local
    #  
    # ==== Syntax
    #
    #      private variableNameList
    #
    # ==== Parameters
    # 
    # *    +variableName+ - String  
    # *    +variableNameList+ - Array of Strings  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Scope
    # 
    # Official Wiki: https://community.bistudio.com/wiki/private
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    private "_varname";
    # 
    # ====== Example 2:
    # 
    #    private ["_varname1", "_varname2"];
    # 
    def private _args
      "private _args;" 
    end

    # Open the diary screen on the record specified by link
    # 
    # ==== Syntax
    #
    #      processDiaryLink link
    #
    # ==== Parameters
    # 
    # *    +link+ - -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/processDiaryLink
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def processDiaryLink _args
      "processDiaryLink _args;" 
    end

    # Returns the product's friendly name, identifier and version
    # 
    # ==== Syntax
    #
    #      productVersion
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array - [friendlyName, productID, version, releaseNumber]String - friendlyNameString - productIDNumber - versionNumber - releaseNumber
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/productVersion
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint str productVersion;   // would return ["Arma 2 OA", "arma2oa", 162, 95208] on Arma 2 OA 1.62.95208
    # 
    def productVersion 
      "productVersion" 
    end

    # Returns profile name
    # 
    # ==== Syntax
    #
    #      profileName
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/profileName
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _myProfileName = profileName;
    # 
    def profileName 
      "profileName" 
    end

    # Return the global namespace attached to the active user profile.
    # 
    # ==== Description
    # 
    # Use setVariable and getVariable to save and load data to this Namespace.
    # 
    # A variable can be deleted by setting its value to nil.
    # 
    # 
    # 
    # The variables are stored next to the user profile in a file named myUsername.
    # 
    # vars.
    # 
    # TakeOnHProfile (e.
    # 
    # g.
    # 
    # in the My Documents\Take On Helicopters folder)
    #  
    # ==== Syntax
    #
    #      profileNamespace
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Namespace
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #saveProfileNamespace
    # 
    # Official Wiki: https://community.bistudio.com/wiki/profileNamespace
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _namespace = profileNamespace;
    # 
    def profileNamespace 
      "profileNamespace" 
    end

    # If loading screen is show,set progress bar to the given value (from interval [0,1])
    # 
    # ==== Syntax
    #
    #      progressLoadingScreen progress
    #
    # ==== Parameters
    # 
    # *    +progress+ - Number -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #startLoadingScreen, #endLoadingScreen
    # 
    # Official Wiki: https://community.bistudio.com/wiki/progressLoadingScreen
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    startLoadingScreen ["Loading My Mission"];//Batch of codeprogressLoadingScreen 0.5;//Batch of codeendLoadingScreen;
    # 
    def progressLoadingScreen _args
      "progressLoadingScreen _args;" 
    end

    # Returns the current position in the progress bar
    # 
    # ==== Syntax
    #
    #      progressPosition control
    #
    # ==== Parameters
    # 
    # *    +control+ - -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/progressPosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _pos = progressPosition _control
    # 
    def progressPosition _args
      "progressPosition _args;" 
    end

    # Sets progress position of the progress bar (DialogControls-ProgressBar)
    # 
    # ==== Syntax
    #
    #      control progressSetPosition pos
    #
    # ==== Parameters
    # 
    # *    +control+ - Control - progress bar control  
    # *    +pos+ - Number - 0: no progress; 1: full progress  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #sliderSetPosition
    # 
    # Official Wiki: https://community.bistudio.com/wiki/progressSetPosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _control progressSetPosition 0.5
    # 
    def progressSetPosition _obj, _args
      "_obj progressSetPosition _args;" 
    end

    # Broadcast missionNamespace variable and its value to all computers.
    # 
    # ==== Description
    # 
    # If the variable is undefined or nil no broadcast happens.
    # 
    # Only type Number is supported in version 1.
    # 
    # 33 and before.
    # 
    # Following Types are supported since version 1.
    # 
    # 34:
    # 
    # Number
    # 
    # Boolean
    # 
    # Object
    # 
    # Group
    # 
    # Following Types are supported since version ArmA v1.
    # 
    # 00:
    # 
    # String
    # 
    # Since version ArmA v1.
    # 
    # 09:
    # 
    # Any value can be transferred, including
    # 
    # Array
    # 
    # Code
    # 
    # The only limitation is you cannot transfer references to entities which are local, like scripts, displays, or local objects
    #  
    # ==== Syntax
    #
    #      publicVariable varName
    #
    # ==== Parameters
    # 
    # *    +varName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # The message is sent consequently and reliably to all clients. Using publicVariable too frequently in a given period of time can cause other parts of the game to experience bandwidth problems.
    # 
    # ==== See Also
    # 
    # MP editing guide, #addPublicVariableEventHandler, #publicVariableClient, #publicVariableServer
    # 
    # Official Wiki: https://community.bistudio.com/wiki/publicVariable
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    publicVariable "CTFscoreOne" 
    # 
    def publicVariable _args
      "publicVariable _args;" 
    end

    # Send the variable value to the client computer - same limitations regarding variable type as publicVariable.
    # 
    # ==== Description
    # 
    # The Client ID is the temporary ID given to a connected client for that session.
    # 
    # You can find out this ID with the owner command (using it on a player's character, for example, will give you that players client ID)
    #  
    # ==== Syntax
    #
    #      clientID publicVariableClient varName
    #
    # ==== Parameters
    # 
    # *    +clientID+ - Number  
    # *    +varName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #owner, #publicVariable, #publicVariableServer
    # 
    # Official Wiki: https://community.bistudio.com/wiki/publicVariableClient
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    3 publicVariableClient "CTFscoreOne";
    # 
    def publicVariableClient _obj, _args
      "_obj publicVariableClient _args;" 
    end

    # Send the variable value to the server - same limitations regarding variable type as publicVariable
    # 
    # ==== Syntax
    #
    #      publicVariableServer varName
    #
    # ==== Parameters
    # 
    # *    +varName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #publicVariable, #publicVariableClient
    # 
    # Official Wiki: https://community.bistudio.com/wiki/publicVariableServer
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    publicVariableServer "CTFscoreOne";
    # 
    def publicVariableServer _args
      "publicVariableServer _args;" 
    end

    # Transfer weapons and magazines from weapon pool into cargo of object obj.
    # 
    # ==== Description
    # 
    # Used in campaign to transfer weapons into next mission
    #  
    # ==== Syntax
    #
    #      putWeaponPool object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/putWeaponPool
    #
    # ==== Examples
    # 
    def putWeaponPool _args
      "putWeaponPool _args;" 
    end

    # Returns the number of items of type in the weapon pool (used in campaigns to transfer weapons to the next mission)
    # 
    # ==== Syntax
    #
    #      queryItemsPool name
    #
    # ==== Parameters
    # 
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/queryItemsPool
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def queryItemsPool _args
      "queryItemsPool _args;" 
    end

    # Return number of magazines of type name in magazine pool (used in campaign to transfer magazines into next mission)
    # 
    # ==== Syntax
    #
    #      Number = queryMagazinePool name
    #
    # ==== Parameters
    # 
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/queryMagazinePool
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _num=queryMagazinePool "M16"
    # 
    def queryMagazinePool _args
      "queryMagazinePool _args;" 
    end

    # Return number of weapons of type name in weapon pool (used in campaign to transfer weapons into next mission)
    # 
    # ==== Syntax
    #
    #      Number = queryWeaponPool name
    #
    # ==== Parameters
    # 
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/queryWeaponPool
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _num=queryWeaponPool "M16"
    # 
    def queryWeaponPool _args
      "queryWeaponPool _args;" 
    end

    # Convert x from Degrees to Radians.
    # 
    # ==== Description
    # 
    # 360 degrees is equal to 2 multiplied with pi
    #  
    # ==== Syntax
    #
    #      Number = rad x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/rad
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _radians = rad 180  
    #    Result is 3.1415 (eg pi
    # 
    def rad _args
      "rad _args;" 
    end

    # Add the units to the custom radio channel
    # 
    # ==== Syntax
    #
    #      index radioChannelAdd units
    #
    # ==== Parameters
    # 
    # *    +index+ - Number - custom radio channel index  
    # *    +index+ - Array - list of characters  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #radioChannelCreate, #radioChannelRemove, #radioChannelSetCallSign, #radioChannelSetLabel
    # 
    # Official Wiki: https://community.bistudio.com/wiki/radioChannelAdd
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    2 radioChannelAdd [player, myCharacter1];
    # 
    def radioChannelAdd _obj, _args
      "_obj radioChannelAdd _args;" 
    end

    # Create a custom radio channel with the given color, label, call sign and registered characters.
    # 
    # ==== Description
    # 
    # The index returned can be used to manipulate the created channel later.
    # 
    # 
    # 
    # There are 10 slots for custom radio channels.
    # 
    # The command will find an unused index in this range and create it when found
    #  
    # ==== Syntax
    #
    #      radioChannelCreate [color, label, callSign, characters]
    #
    # ==== Parameters
    # 
    # *    +color+ - Array - RGBA color values  
    # *    +label+ - String - label  
    # *    +callSign+ - String - call sign  
    # *    +characters+ - Array - list of registered characters  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #radioChannelAdd, #radioChannelRemove, #radioChannelSetCallSign, #radioChannelSetLabel
    # 
    # Official Wiki: https://community.bistudio.com/wiki/radioChannelCreate
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _index = radioChannelCreate [[0.96, 0.34, 0.13, 0.8], "Q-dance Radio", "%UNIT_NAME", [player]];
    # 
    def radioChannelCreate _args
      "radioChannelCreate _args;" 
    end

    # Remove the characters from the custom radio channel
    # 
    # ==== Syntax
    #
    #      index radioChannelRemove characters
    #
    # ==== Parameters
    # 
    # *    +index + - Number - custom radio channel index  
    # *    +characters + - Array - list of characters  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #radioChannelAdd, #radioChannelCreate, #radioChannelSetCallSign, #radioChannelSetLabel
    # 
    # Official Wiki: https://community.bistudio.com/wiki/radioChannelRemove
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    3 radioChannelRemove [myCharacter1, myCharacter2];
    # 
    def radioChannelRemove _obj, _args
      "_obj radioChannelRemove _args;" 
    end

    # Set the custom radio channel's call sign.
    # 
    # ==== Description
    # 
    # 
    # 
    # Available special parameters:
    # 
    # $KEY (reference to a localized text)
    # 
    #  %CHANNEL_LABEL
    # 
    #  %UNIT_SIDE
    # 
    #  %UNIT_NAME
    # 
    #  %UNIT_RANK
    # 
    #  %UNIT_ID
    # 
    #  %UNIT_REF
    # 
    #  %UNIT_GRP_NAME
    # 
    #  %UNIT_GRP_LEADER
    # 
    #  %UNIT_VEH_NAME
    # 
    #  %UNIT_VEH_POSITION
    #  
    # ==== Syntax
    #
    #      index radioChannelSetCallSign callSign
    #
    # ==== Parameters
    # 
    # *    +index + - Number - custom radio channel index  
    # *    +callSign + - String - custom call sign  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #radioChannelAdd, #radioChannelCreate, #radioChannelRemove, #radioChannelSetLabel
    # 
    # Official Wiki: https://community.bistudio.com/wiki/radioChannelSetCallSign
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    4 radioChannelSetCallSign "%UNIT_NAME";
    # 
    def radioChannelSetCallSign _obj, _args
      "_obj radioChannelSetCallSign _args;" 
    end

    # Set the custom radio channel's label
    # 
    # ==== Syntax
    #
    #      index radioChannelSetLabel label
    #
    # ==== Parameters
    # 
    # *    +index + - Number - custom radio channel index  
    # *    +label + - String - label  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #radioChannelAdd, #radioChannelCreate, #radioChannelRemove, #radioChannelSetCallSign
    # 
    # Official Wiki: https://community.bistudio.com/wiki/radioChannelSetLabel
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    5 radioChannelSetLabel "Q-dance Radio";
    # 
    def radioChannelSetLabel _obj, _args
      "_obj radioChannelSetLabel _args;" 
    end

    # Checks the current radio volume (set by fadeRadio)
    # 
    # ==== Syntax
    #
    #      Number = radioVolume
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/radioVolume
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _volume = radioVolume;
    # 
    def radioVolume 
      "radioVolume" 
    end

    # Return the current rain density
    # 
    # ==== Syntax
    #
    #      Number = rain
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # Each client and the server can have differing rain values.
    # 
    # ==== See Also
    # 
    # #setRain
    # 
    # Official Wiki: https://community.bistudio.com/wiki/rain
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _RainLevel=rain
    # 
    def rain 
      "rain" 
    end

    # Returns the current rainbow intensity
    # 
    # ==== Syntax
    #
    #      rainbow
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setRainbow
    # 
    # Official Wiki: https://community.bistudio.com/wiki/rainbow
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def rainbow 
      "rainbow" 
    end

    # Random real (floating point) value from 0 (inclusive) to x (not inclusive)
    # 
    # ==== Syntax
    #
    #      Number = random x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/random
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _rNumber = random 1
    # 
    # ====== Example 2:
    # 
    #    To select random value from an array:
    #    _array = ["apples", "pears", "bananas", "M16"];
    #    _random = _array select floor random count _array;
    # 
    def random _args
      "random _args;" 
    end

    # Return the rank of the given unit.
    # 
    # ==== Description
    # 
    # 
    # 
    # Rank can be one of the following:
    # 
    # "PRIVATE"
    # 
    # "CORPORAL"
    # 
    # "SERGEANT"
    # 
    # "LIEUTENANT"
    # 
    # "CAPTAIN"
    # 
    # "MAJOR"
    # 
    # "COLONEL"
    #  
    # ==== Syntax
    #
    #      String = rank unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Rating Values, #rating, #addRating, #setUnitRank
    # 
    # Official Wiki: https://community.bistudio.com/wiki/rank
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _rank=Rank _TankOne
    # 
    def rank _args
      "rank _args;" 
    end

    # Return the rank of the given unit for comparison.
    # 
    # ==== Description
    # 
    # Value may be :
    # 
    # 0 - Private
    # 
    # 1 - Corporal
    # 
    # 2 - Sergeant
    # 
    # 3 - Lieutenant
    # 
    # 4 - Captain
    # 
    # 5 - Major
    # 
    # 6 - Colonel
    #  
    # ==== Syntax
    #
    #      rankId unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #rank
    # 
    # Official Wiki: https://community.bistudio.com/wiki/rankId
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _myIdRank = rankId player;
    # 
    def rankId _args
      "rankId _args;" 
    end

    # Check unit rating.
    # 
    # ==== Description
    # 
    # Rating is increased for killing enemies, decreased for killing friendlies (see Rating Values).
    # 
    # Can be changed via addRating by the mission designer.
    # 
    # 
    # 
    # The rating of the player is displayed as the "score" at the end of the mission.
    # 
    # Via Description.
    # 
    # ext one can define how many points it takes to get a perfect score, as well as the number of stars
    #  
    # ==== Syntax
    #
    #      Number = rating unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Side relations, Rating Values, #addRating, #rank, #setUnitRank
    # 
    # Official Wiki: https://community.bistudio.com/wiki/rating
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _score = rating player 
    # 
    def rating _args
      "rating _args;" 
    end

    # Checks if a location is rectangular (returns true) or elliptical (returns false)
    # 
    # ==== Syntax
    #
    #      rectangular location
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setRectangular
    # 
    # Official Wiki: https://community.bistudio.com/wiki/rectangular
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _isRect = rectangular myLocation
    # 
    def rectangular _args
      "rectangular _args;" 
    end

    # Register a new task type.
    # 
    # ==== Description
    # 
    # Parameters are defined in the given config class (subclass of CfgTasks)
    #  
    # ==== Syntax
    #
    #      teamMember registerTask entry name
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/registerTask
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def registerTask _obj, _args
      "_obj registerTask _args;" 
    end

    # List all registered task types
    # 
    # ==== Syntax
    #
    #      registeredTasks teamMember
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Task
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/registeredTasks
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tasklist = registeredTasks player;
    # 
    def registeredTasks _args
      "registeredTasks _args;" 
    end

    # Reload all weapons
    # 
    # ==== Syntax
    #
    #      reload unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #reloadEnabled
    # 
    # Official Wiki: https://community.bistudio.com/wiki/reload
    #
    # ==== Examples
    # 
    def reload _args
      "reload _args;" 
    end

    # Check whether magazine is reloaded whenever emptied
    # 
    # ==== Syntax
    #
    #      Boolean =  reloadEnabled unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #reload
    # 
    # Official Wiki: https://community.bistudio.com/wiki/reloadEnabled
    #
    # ==== Examples
    # 
    def reloadEnabled _args
      "reloadEnabled _args;" 
    end

    # Switch on remote control of the unit
    # 
    # ==== Syntax
    #
    #      who remoteControl whom
    #
    # ==== Parameters
    # 
    # *    +who+ - Object -  
    # *    +whom+ - Object -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/remoteControl
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player remoteControl driver UAV;
    #    driver UAV switchCamera "Internal"; //switchCamera required 
    # 
    def remoteControl _obj, _args
      "_obj remoteControl _args;" 
    end

    # Removes user added action with given id index.
    # 
    # ==== Description
    # 
    # This only removes actions added with the addAction command.
    # 
    # You cannot remove default game actions, such as reload.
    # 
    # This command has local effect.
    # 
    # The action will only be removed on the computer that executes the command
    #  
    # ==== Syntax
    #
    #      unit removeAction index
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - unit, vehicle or static object  
    # *    +index+ - Number - action id returned by addAction  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addAction, #removeAllActions, #setUserActionText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAction
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player removeAction 0;
    # 
    def removeAction _obj, _args
      "_obj removeAction _args;" 
    end

    # Removes all unit's user added actions
    # 
    # ==== Syntax
    #
    #      removeAllActions unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - unit, vehicle or static object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addAction, #removeAction, #setUserActionText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAllActions
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    removeAllActions player;
    # 
    def removeAllActions _args
      "removeAllActions _args;" 
    end

    # Unassigns and deletes all linked items from inventory (map, compass, headgear, goggles etc.
    # 
    # ==== Description
    # 
    # )
    #  
    # ==== Syntax
    #
    #      removeAllAssignedItems unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #assignedItems, #linkItem, #unlinkItem, #assignItem, #unassignItem, #addItem, #removeItem
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAllAssignedItems
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    removeAllAssignedItems player;
    # 
    def removeAllAssignedItems _args
      "removeAllAssignedItems _args;" 
    end

    # Removes all containers from the unit
    # 
    # ==== Syntax
    #
    #      removeAllContainers unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAllContainers
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    removeAllContainers player;
    # 
    def removeAllContainers _args
      "removeAllContainers _args;" 
    end

    # Restrict access to all addons for given curator
    # 
    # ==== Syntax
    #
    #      removeAllCuratorAddons curatorObj
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #addCuratorAddons, #removeCuratorAddons, #curatorAddons
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAllCuratorAddons
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    removeAllCuratorAddons myCurator;
    # 
    def removeAllCuratorAddons _args
      "removeAllCuratorAddons _args;" 
    end

    # Delete all curator camera areas
    # 
    # ==== Syntax
    #
    #      removeAllCuratorCameraAreas curatorObj
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #addCuratorCameraArea, #removeCuratorCameraArea, #curatorCameraArea
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAllCuratorCameraAreas
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    removeAllCuratorCameraAreas myCurator;
    # 
    def removeAllCuratorCameraAreas _args
      "removeAllCuratorCameraAreas _args;" 
    end

    # Delete all curator edit areas
    # 
    # ==== Syntax
    #
    #      removeAllCuratorEditingAreas curatorObj
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #addCuratorEditingArea, #removeCuratorEditingArea, #curatorEditingArea
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAllCuratorEditingAreas
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    removeAllCuratorEditingAreas myCurator;
    # 
    def removeAllCuratorEditingAreas _args
      "removeAllCuratorEditingAreas _args;" 
    end

    # Removes all event handlers of given type that were added by addEventHandler.
    # 
    # ==== Description
    # 
    # Since VBS2 v1.
    # 
    # 24 can be applied on individual weapon rounds
    #  
    # ==== Syntax
    #
    #      objectName removeAllEventHandlers handlerType
    #
    # ==== Parameters
    # 
    # *    +handlerType+ - String. See Event Handlers for list  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # EventHandlers list, #removeEventHandler, #addEventHandler
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAllEventHandlers
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player removeAllEventHandlers "killed"
    # 
    def removeAllEventHandlers _obj, _args
      "_obj removeAllEventHandlers _args;" 
    end

    # Removes all items from weapon except magazine
    # 
    # ==== Syntax
    #
    #      removeAllHandgunItems unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAllHandgunItems
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def removeAllHandgunItems _args
      "removeAllHandgunItems _args;" 
    end

    # Removes all special items from the unit
    # 
    # ==== Syntax
    #
    #      removeAllItems unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeAllWeapons, #removeMagazines
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAllItems
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    removeAllItems unitName;
    # 
    def removeAllItems _args
      "removeAllItems _args;" 
    end

    # Removes all itemsWithMagazines from the uniform, vest and backpack
    # 
    # ==== Syntax
    #
    #      removeAllItemsWithMagazines unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #itemsWithMagazines
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAllItemsWithMagazines
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    removeAllItemsWithMagazines player;
    # 
    def removeAllItemsWithMagazines _args
      "removeAllItemsWithMagazines _args;" 
    end

    # Removes all MP event handlers of the given type which were added by addMPEventHandler.
    # 
    # ==== Description
    # 
    # Command needs to be executed only on one PC for MP event handler to be removed globally
    #  
    # ==== Syntax
    #
    #      objectName removeAllMPEventHandlers "event"
    #
    # ==== Parameters
    # 
    # *    +objectName+ - Object  
    # *    +event+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # EventHandlers list, #addMPEventHandler, #removeMPEventHandler
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAllMPEventHandlers
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     player removeAllMPEventHandlers "mpkilled"; 
    # 
    def removeAllMPEventHandlers _obj, _args
      "_obj removeAllMPEventHandlers _args;" 
    end

    # Removes all mission event handlers of the given type which were added by addMissionEventHandler
    # 
    # ==== Syntax
    #
    #      removeAllMissionEventHandlers type
    #
    # ==== Parameters
    # 
    # *    +type+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeMissionEventHandler, #addMissionEventHandler
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAllMissionEventHandlers
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def removeAllMissionEventHandlers _args
      "removeAllMissionEventHandlers _args;" 
    end

    # Removes all music track event handlers of given type
    # 
    # ==== Syntax
    #
    #      removeAllMusicEventHandlers type
    #
    # ==== Parameters
    # 
    # *    +type+ - String - "MusicStart" or "MusicStop"  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMusicEventHandler, #setMusicEventHandler, #removeMusicEventHandler, #playMusic
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAllMusicEventHandlers
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    removeAllMusicEventHandlers "MusicStart"
    # 
    # ====== Example 2:
    # 
    #    removeAllMusicEventHandlers "MusicStop"
    # 
    def removeAllMusicEventHandlers _args
      "removeAllMusicEventHandlers _args;" 
    end

    # Removes all items from weapon except magazine
    # 
    # ==== Syntax
    #
    #      removeAllPrimaryWeaponItems unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAllPrimaryWeaponItems
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def removeAllPrimaryWeaponItems _args
      "removeAllPrimaryWeaponItems _args;" 
    end

    # Remove all weapons and magazines of the unit.
    # 
    # ==== Description
    # 
    # 
    # 
    # On vehicles only ammo is removed
    # 
    # Does not remove map, compass, radio.
    # 
    # Use
    # 
    # unitname removeweapon "itemmap"
    # 
    # for that purpose
    #  
    # ==== Syntax
    #
    #      removeAllWeapons unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeWeapon, #setVehicleAmmo, #clearWeaponCargo, #clearMagazineCargo, #removeAllItems, #removeBackpack
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeAllWeapons
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    removeAllWeapons player
    # 
    def removeAllWeapons _args
      "removeAllWeapons _args;" 
    end

    # Removes unit's backpack
    # 
    # ==== Syntax
    #
    #      removeBackpack unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addBackpack, #addMagazineCargo, #addWeaponCargo, #clearMagazineCargo, #clearWeaponCargo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeBackpack
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    removeBackpack this
    # 
    # ====== Example 2:
    # 
    #    removeBackpack mySoldierDude
    # 
    def removeBackpack _args
      "removeBackpack _args;" 
    end

    # Restrict curator use of given addons
    # 
    # ==== Syntax
    #
    #      curatorObj removeCuratorAddons addons
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    # *    +addons+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #addCuratorAddons, #removeAllCuratorAddons, #curatorAddons
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeCuratorAddons
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    curatorModule removeCuratorAddons [addon1,addon2]
    # 
    def removeCuratorAddons _obj, _args
      "_obj removeCuratorAddons _args;" 
    end

    # Removes curator camera area
    # 
    # ==== Syntax
    #
    #      curatorObj removeCuratorCameraArea cameraAreaID
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    # *    +cameraAreaID+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #addCuratorCameraArea, #removeAllCuratorCameraAreas, #curatorCameraArea
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeCuratorCameraArea
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myCurator removeCuratorCameraArea 3;
    # 
    def removeCuratorCameraArea _obj, _args
      "_obj removeCuratorCameraArea _args;" 
    end

    # Unregister objects which can be edited by a curator
    # 
    # ==== Syntax
    #
    #      curatorObj removeCuratorEditableObjects [[objects],removeCrew]
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    # *    +objects+ - Array  
    # *    +removeCrew+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #addCuratorEditableObjects, #curatorEditableObjects
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeCuratorEditableObjects
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    curatorModule removeCuratorEditableObjects [[cursorTarget],true]
    # 
    def removeCuratorEditableObjects _obj, _args
      "_obj removeCuratorEditableObjects _args;" 
    end

    # Removes editing area for given curator
    # 
    # ==== Syntax
    #
    #      curatorObj removeCuratorEditingArea editAreaID
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    # *    +editAreaID+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #addCuratorEditingArea, #removeAllCuratorEditingAreas, #curatorEditingArea
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeCuratorEditingArea
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myCurator removeCuratorEditingArea 3;
    # 
    def removeCuratorEditingArea _obj, _args
      "_obj removeCuratorEditingArea _args;" 
    end

    # Removes an icon for an editor object
    # 
    # ==== Syntax
    #
    #      map removeDrawIcon [object,string identifier]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[object,string identifier]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeDrawIcon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def removeDrawIcon _obj, _args
      "_obj removeDrawIcon _args;" 
    end

    # Remove all drawn links for the given editor object for the given editor,object type.
    # 
    # ==== Description
    # 
    # Pass an empty string as param type to remove all draw,links for an object
    #  
    # ==== Syntax
    #
    #      map removeDrawLinks [from,param type]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[from,param type]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeDrawLinks
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def removeDrawLinks _obj, _args
      "_obj removeDrawLinks _args;" 
    end

    # Removes event handler added by addEventHandler.
    # 
    # ==== Description
    # 
    # 
    # 
    # When any handler is removed, all handler indices higher than the deleted one should be decremented
    #  
    # ==== Syntax
    #
    #      objectName removeEventHandler [type, index]
    #
    # ==== Parameters
    # 
    # *    +objectName+ - Object  
    # *    +[type, index]+ - Array  
    # *    +type+ - String  
    # *    +index+ - Number. Value returned from addEventHandler  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # EventHandlers list, #removeAllEventHandlers, #addEventHandler
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player removeEventHandler ["killed", 0]
    # 
    def removeEventHandler _obj, _args
      "_obj removeEventHandler _args;" 
    end

    # Removes goggles from unit (diver goggles for example).
    # 
    # ==== Description
    # 
    # This command does not remove NVGoggles.
    # 
    # Use unassignItem and removeItem or just unlinkItem for latter
    #  
    # ==== Syntax
    #
    #      removeGoggles unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #goggles, #addGoggles
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeGoggles
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     removeGoggles assaultDiver;
    # 
    def removeGoggles _args
      "removeGoggles _args;" 
    end

    # Remove icon with given ID from group
    # 
    # ==== Syntax
    #
    #      group removeGroupIcon icon ID
    #
    # ==== Parameters
    # 
    # *    +group+ - Group -  
    # *    +icon ID+ - Number -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addGroupIcon, #clearGroupIcons, #getGroupIcon, #getGroupIconParams, #groupIconSelectable, #groupIconsVisible, #onGroupIconClick, #setGroupIcon, #setGroupIconParams, #setGroupIconsSelectable, #setGroupIconsVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeGroupIcon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _target removeGroupIcon (_target getvariable "hc_attackicon");
    # 
    def removeGroupIcon _obj, _args
      "_obj removeGroupIcon _args;" 
    end

    # Removes given item from the weapon cargo space
    # 
    # ==== Syntax
    #
    #      unit removeHandgunItem item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String - Config class  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeHandgunItem
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def removeHandgunItem _obj, _args
      "_obj removeHandgunItem _args;" 
    end

    # Removes headgear from a unit.
    # 
    # ==== Description
    # 
    # If unit has no headgear command quietly fails
    #  
    # ==== Syntax
    #
    #      removeHeadgear unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #headgear, #addHeadgear
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeHeadgear
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    removeHeadgear player;
    # 
    def removeHeadgear _args
      "removeHeadgear _args;" 
    end

    # Removes item from the inventory
    # 
    # ==== Syntax
    #
    #      unit removeItem item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeItems, #unassignItem, #addItem, #assignItem, #assignedItems, #linkItem, #unlinkItem, #removeAllAssignedItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeItem
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    bluforUnit unassignItem "NVGoggles";
    #    bluforUnit removeItem "NVGoggles";
    #    opforUnit unassignItem "NVGoggles_OPFOR";
    #    opforUnit removeItem "NVGoggles_OPFOR";
    #    independentUnit unassignItem "NVGoggles_INDEP";
    #    independentUnit removeItem "NVGoggles_INDEP";
    # 
    def removeItem _obj, _args
      "_obj removeItem _args;" 
    end

    # Removes item from soldier's backpack
    # 
    # ==== Syntax
    #
    #      unit removeItemFromBackpack item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeItemFromBackpack
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def removeItemFromBackpack _obj, _args
      "_obj removeItemFromBackpack _args;" 
    end

    # Removes item from soldier's uniform
    # 
    # ==== Syntax
    #
    #      unit removeItemFromUniform item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeItemFromUniform
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def removeItemFromUniform _obj, _args
      "_obj removeItemFromUniform _args;" 
    end

    # Removes item from soldier's vest
    # 
    # ==== Syntax
    #
    #      unit removeItemFromVest item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeItemFromVest
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def removeItemFromVest _obj, _args
      "_obj removeItemFromVest _args;" 
    end

    # Removes all items with given template from the inventory
    # 
    # ==== Syntax
    #
    #      unit removeItems item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeItem, #removeAllAssignedItems, #unassignItem, #assignItem, #assignedItems, #addItem, #linkItem, #unlinkItem
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeItems
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player removeItems "FirstAidKit";
    # 
    def removeItems _obj, _args
      "_obj removeItems _args;" 
    end

    # Removes MP event handler added by addMPEventHandler.
    # 
    # ==== Description
    # 
    # Format of handler is [type,index].
    # 
    # Index is returned by addMPEventHandler.
    # 
    # When any handler is removed, all handler indices highter than the deleted one should decremented
    #  
    # ==== Syntax
    #
    #      unitName removeMPEventHandler ["event", index]
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +event+ - String  
    # *    +index+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # EventHandlers list, #addMPEventHandler, #removeAllMPEventHandlers
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeMPEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player removeMPEventHandler ["killed", 0]; 
    # 
    def removeMPEventHandler _obj, _args
      "_obj removeMPEventHandler _args;" 
    end

    # Remove magazine from the unit.
    # 
    # ==== Description
    # 
    # Note: You may create invalid combinations with this function.
    # 
    # When doing so, application behaviour is undefined
    #  
    # ==== Syntax
    #
    #      unitName removeMagazine magazineName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +magazineName+ - String - see weapons)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeMagazines, #removeWeapon, #removeMagazinesTurret, #removeMagazineTurret, #setVehicleAmmo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeMagazine
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player removeMagazine "M16"
    # 
    def removeMagazine _obj, _args
      "_obj removeMagazine _args;" 
    end

    # Removes the magazine from the unit
    # 
    # ==== Syntax
    #
    #      unit addMagazineGlobal magazineName
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +magazineName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/addMagazineGlobal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player removeMagazineGlobal "30Rnd_65x39_caseless_mag"
    # 
    def addMagazineGlobal _obj, _args
      "_obj addMagazineGlobal _args;" 
    end

    # Removes the magazine from the turret.
    # 
    # ==== Description
    # 
    # Use turret path [-1] for driver's turret.
    # 
    # Note: you may create invalid combinations by using this function.
    # 
    # When doing so, application behaviour is undefined
    #  
    # ==== Syntax
    #
    #      vehicle removeMagazineTurret [magazineName, turretPath]
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +[weaponName, turretPath]+ - Array  
    # *    +magazineName+ - String  
    # *    +turretPath+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazineTurret, #magazinesTurret, #removeMagazinesTurret, #weaponsTurret
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeMagazineTurret
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    vehicle player removeMagazineTurret ["60rnd_cmflaremagazine",[-1]]
    # 
    # ====== Example 2:
    # 
    #    _tank removeMagazineTurret ["20Rnd_120mmSABOT_M1A2",[0]]
    # 
    def removeMagazineTurret _obj, _args
      "_obj removeMagazineTurret _args;" 
    end

    # Remove all magazines of given type from the unit.
    # 
    # ==== Description
    # 
    # Note: You may create invalid combinations with this function.
    # 
    # When doing so, application behaviour is undefined
    #  
    # ==== Syntax
    #
    #      unitName removeMagazines magazineName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +magazineName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #magazines, #removeMagazine, #removeWeapon, #removeMagazinesTurret, #removeMagazineTurret, #setVehicleAmmo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeMagazines
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player removeMagazines "M16";
    # 
    def removeMagazines _obj, _args
      "_obj removeMagazines _args;" 
    end

    # Removes all magazines of the given type from the unit.
    # 
    # ==== Description
    # 
    # Use turret path [-1] for driver's turret.
    # 
    # 
    # 
    # Note: you may create invalid combinations by using this function.
    # 
    # When doing so, application behaviour is undefined
    #  
    # ==== Syntax
    #
    #      vehicle removeMagazinesTurret [magazineName, turretPath]
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +[weaponName, turretPath]+ - Array  
    # *    +magazineName+ - String  
    # *    +turretPath+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazineTurret, #magazinesTurret, #removeMagazineTurret, #weaponsTurret
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeMagazinesTurret
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    vehicle player removeMagazinesTurret ["60rnd_cmflaremagazine",[-1]]
    # 
    # ====== Example 2:
    # 
    #    _tank removeMagazinesTurret ["20Rnd_120mmSABOT_M1A2",[0]]
    # 
    def removeMagazinesTurret _obj, _args
      "_obj removeMagazinesTurret _args;" 
    end

    # Removes a previously added menu item
    # 
    # ==== Syntax
    #
    #      map removeMenuItem index of menu item to delete
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +index of menu item to delete+ - Number -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeMenuItem
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def removeMenuItem _obj, _args
      "_obj removeMenuItem _args;" 
    end

    # Removes mission event handler added by addMissionEventHandler.
    # 
    # ==== Description
    # 
    # When any handler is removed, all handler indices higher that the deleted one should be decremented
    #  
    # ==== Syntax
    #
    #      removeMissionEventHandler [type, index]
    #
    # ==== Parameters
    # 
    # *    +type+ - String  
    # *    +index+ - Number - Index is returned by addMissionEventHandler.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMissionEventHandler, #removeAllMissionEventHandlers
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeMissionEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def removeMissionEventHandler _args
      "removeMissionEventHandler _args;" 
    end

    # Removes specified music track event handler
    # 
    # ==== Syntax
    #
    #      removeMusicEventHandler [type, id]
    #
    # ==== Parameters
    # 
    # *    +type+ - String - "MusicStart" or "MusicStop"  
    # *    +id+ - Number - event handler id  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMusicEventHandler, #setMusicEventHandler, #removeAllMusicEventHandlers, #playMusic
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeMusicEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    removeMusicEventHandler ["MusicStart", 12];
    # 
    # ====== Example 2:
    # 
    #    removeMusicEventHandler ["MusicStop", 12];
    # 
    def removeMusicEventHandler _args
      "removeMusicEventHandler _args;" 
    end

    # Removes given item from the weapon cargo space
    # 
    # ==== Syntax
    #
    #      unit removePrimaryWeaponItem item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removePrimaryWeaponItem
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def removePrimaryWeaponItem _obj, _args
      "_obj removePrimaryWeaponItem _args;" 
    end

    # Remove a simple task from the list of simple tasks
    # 
    # ==== Syntax
    #
    #      person removeSimpleTask task
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +task+ - Task  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Tasks, #createSimpleTask, #setSimpleTaskDescription, #setSimpleTaskDestination, #setTaskState, #setTaskResult, #taskState
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeSimpleTask
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player removeSimpleTask _tskKillSpongebob
    # 
    def removeSimpleTask _obj, _args
      "_obj removeSimpleTask _args;" 
    end

    # Remove a unit from the list of units available for Team Switch
    # 
    # ==== Syntax
    #
    #      removeSwitchableUnit  unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Team_Switch
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeSwitchableUnit
    #
    # ==== Examples
    # 
    def removeSwitchableUnit _args
      "removeSwitchableUnit _args;" 
    end

    # Remove given member from given team
    # 
    # ==== Syntax
    #
    #      team removeTeamMember member
    #
    # ==== Parameters
    # 
    # *    +team+ - Team Member  
    # *    +member+ - Team Member  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addTeamMember, #createTeam, #deleteTeam, #forEachMemberTeam, #teamMember, #teamMemberNull, #teamName, #teams, #teamType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeTeamMember
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _team removeTeamMember _teamMember
    # 
    def removeTeamMember _obj, _args
      "_obj removeTeamMember _args;" 
    end

    # Removes uniform from unit
    # 
    # ==== Syntax
    #
    #      removeUniform unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeUniform
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def removeUniform _args
      "removeUniform _args;" 
    end

    # Removes vest from unit
    # 
    # ==== Syntax
    #
    #      removeVest unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addVest, #vest
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeVest
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    removeVest player;
    # 
    def removeVest _args
      "removeVest _args;" 
    end

    # Remove weapon from a unit.
    # 
    # ==== Description
    # 
    # The unit must be local to the computer where command is executed.
    # 
    # For a global version of this command see removeWeaponGlobal.
    # 
    # Note: It is possible to create invalid combinations with this command (ie, attempting to remove a weapon that a unit does not possess).
    # 
    # When doing so, application behaviour is undefined
    #  
    # ==== Syntax
    #
    #      unit removeWeapon weapon
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - unit or vehicle  
    # *    +weapon+ - String - weapon class name  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeWeaponGlobal, #addWeapon, #removeAllWeapons
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeWeapon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player removeWeapon "BAF_L85A2_RIS_SUSAT";
    # 
    # ====== Example 2:
    # 
    #    An_2 removeWeapon "M240_veh";
    # 
    def removeWeapon _obj, _args
      "_obj removeWeapon _args;" 
    end

    # Remove a weapon from a unit.
    # 
    # ==== Description
    # 
    # An attempt to remove a weapon, which is not in unit's possession, is simply ignored
    #  
    # ==== Syntax
    #
    #      unit removeWeaponGlobal weapon
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - unit or vehicle  
    # *    +weapon+ - String - weapon class name  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWeaponGlobal, #removeWeapon, #removeMagazine, #removeMagazineGlobal, #removeAllWeapons
    # 
    # Official Wiki: https://community.bistudio.com/wiki/removeWeaponGlobal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    {
    #    	_x removeWeaponGlobal "Laserdesignator";
    #    } forEach allUnits;
    # 
    # ====== Example 2:
    # 
    #    {
    #    	if (typeOf _x == "O_Heli_Attack_02_black_F") then {
    #    		_x removeWeaponGlobal "rockets_Skyfire";
    #    	};
    #    } forEach vehicles;
    # 
    def removeWeaponGlobal _obj, _args
      "_obj removeWeaponGlobal _args;" 
    end

    # Check if version of application is available.
    # 
    # ==== Description
    # 
    # If the current version is older than the required one, a warning message is shown and false is returned.
    # 
    # 
    # 
    # Version of format Major.
    # 
    # Minor, e.
    # 
    # g.
    # 
    # 1.
    # 
    # 30
    #  
    # ==== Syntax
    #
    #      Boolean =  requiredVersion version
    #
    # ==== Parameters
    # 
    # *    +version+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/requiredVersion
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if !(requiredVersion "1.09") exitWith {};
    # 
    def requiredVersion _args
      "requiredVersion _args;" 
    end

    # Stops any ongoing camera shake effects.
    # 
    # ==== Description
    # 
    # Does not prevent new effects from being created.
    # 
    # To disallow new effects altogether, enableCamShake should be used
    #  
    # ==== Syntax
    #
    #      resetCamShake
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #enableCamShake, #addCamShake, #setCamShakeDefParams, #setCamShakeParams
    # 
    # Official Wiki: https://community.bistudio.com/wiki/resetCamShake
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    resetCamShake; 
    # 
    def resetCamShake 
      "resetCamShake" 
    end

    # Resets direction of subgroup
    # 
    # ==== Syntax
    #
    #      resetSubgroupDirection unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - Subgroup member.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/resetSubgroupDirection
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def resetSubgroupDirection _args
      "resetSubgroupDirection _args;" 
    end

    # Resistance side.
    # 
    # ==== Description
    # 
    # 
    # 
    # When used in a format statement (hint format["%1",resistance]), the string returned is "GUER"
    #  
    # ==== Syntax
    #
    #      Side = resistance
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #side, #west, #east, #civilian
    # 
    # Official Wiki: https://community.bistudio.com/wiki/resistance
    #
    # ==== Examples
    # 
    def resistance 
      "resistance" 
    end

    # Change array size.
    # 
    # ==== Description
    # 
    # Can be used to add or remove elements from an array
    #  
    # ==== Syntax
    #
    #      arrayName resize count
    #
    # ==== Parameters
    # 
    # *    +arrayName+ - Array  
    # *    +count+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Array
    # 
    # Official Wiki: https://community.bistudio.com/wiki/resize
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _arrayOne resize 2
    # 
    def resize _obj, _args
      "_obj resize _args;" 
    end

    # Returns the resources of a team member
    # 
    # ==== Syntax
    #
    #      resources member
    #
    # ==== Parameters
    # 
    # *    +member+ - Team Member -  
    #
    # ==== Returns
    #
    #      returnValue
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/resources
    #
    # ==== Examples
    # 
    def resources _args
      "resources _args;" 
    end

    # Restarts the mission editor camera (if it was deleted by a script,for example)
    # 
    # ==== Syntax
    #
    #      restartEditorCamera map
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/restartEditorCamera
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def restartEditorCamera _args
      "restartEditorCamera _args;" 
    end

    # Reveals a unit to a group or another unit.
    # 
    # ==== Description
    # 
    # 
    # 
    # The knowledge value will be set to the highest level any unit of the revealing side has about the revealed unit.
    # 
    # If the revealing side has no knowledge about the revealed unit, the value will be set to 1.
    # 
    # Since ARMA 2 OA 1.
    # 
    # 60 the alternative syntax is available.
    # 
    # Values greater than or equal 1.
    # 
    # 5 reveal the side of the unit, too.
    # 
    # The knowledge level can only be increased, not decreased by this command
    #  
    # ==== Syntax
    #
    #      groupName reveal [unitName, accuracy]
    #
    # ==== Parameters
    # 
    # *    +groupName+ - Object or Group  which receives revealing information  
    # *    +unitName+ - Object  which is revealed  
    # *    +groupName+ - Object or Group  which receives revealing information  
    # *    +unitName+ - Object  which is revealed  
    # *    +accuracy+ - Number - knowledge value, clamped to 0...4 range  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #nearTargets, #knowsAbout
    # 
    # Official Wiki: https://community.bistudio.com/wiki/reveal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne reveal _soldierTwo; //soldierOne received information about soldierTwo
    # 
    # ====== Example 2:
    # 
    #    player reveal cursorTarget; //player receives information about the object below its cursor
    # 
    # ====== Example 3:
    # 
    #    _soldierOne reveal [_soldierTwo, 1.5];
    # 
    def reveal _obj, _args
      "_obj reveal _args;" 
    end

    # Sets given mine as known to the side
    # 
    # ==== Syntax
    #
    #      side revealMine mine
    #
    # ==== Parameters
    # 
    # *    +side+ - Side  
    # *    +mine+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/revealMine
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def revealMine _obj, _args
      "_obj revealMine _args;" 
    end

    # Return if mouse vertical axe is inverted
    # 
    # ==== Syntax
    #
    #      reversedMouseY
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/reversedMouseY
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def reversedMouseY 
      "reversedMouseY" 
    end

    # Find the road segments connected to the given road segment
    # 
    # ==== Syntax
    #
    #      roadsConnectedTo road segment
    #
    # ==== Parameters
    # 
    # *    +road segment+ - -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #roadsConnectedTo (VBS2), #nearRoads (VBS2), #nearRoads
    # 
    # Official Wiki: https://community.bistudio.com/wiki/roadsConnectedTo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def roadsConnectedTo _args
      "roadsConnectedTo _args;" 
    end

    # Rounds up or down to the closest integer
    # 
    # ==== Syntax
    #
    #      Number = round x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands : ceil, #floor
    # 
    # Official Wiki: https://community.bistudio.com/wiki/round
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _val= round 5.25, result is 5
    # 
    # ====== Example 2:
    # 
    #    _val= round 5.55, result is 6
    # 
    def round _args
      "round _args;" 
    end

    # Launch init.
    # 
    # ==== Description
    # 
    # sqs or init.
    # 
    # sqf scripts
    #  
    # ==== Syntax
    #
    #      runInitScript
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/runInitScript
    #
    # ==== Examples
    # 
    def runInitScript 
      "runInitScript" 
    end

    # Returns ratio of height of Safezone UI relative to the Absolute UI.
    # 
    # ==== Description
    # 
    # See SafeZone
    #  
    # ==== Syntax
    #
    #      SafeZoneH
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # SafeZone, SafeZoneX, SafeZoneY, SafeZoneW
    # 
    # Official Wiki: https://community.bistudio.com/wiki/SafeZoneH
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _szH = safeZoneH;//returns a float value >= 1.0 
    # 
    def SafeZoneH 
      "SafeZoneH" 
    end

    # Returns ratio of width of Safezone UI relative to the Absolute UI.
    # 
    # ==== Description
    # 
    # See SafeZone
    #  
    # ==== Syntax
    #
    #      safeZoneW
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # SafeZone, #safeZoneX, #safeZoneY, #safeZoneH, #safeZoneXAbs, #safeZoneWAbs
    # 
    # Official Wiki: https://community.bistudio.com/wiki/safeZoneW
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _szW = safeZoneW; 
    # 
    def safeZoneW 
      "safeZoneW" 
    end

    # Returns SafeZone width (of all monitors, in case there's more than one)
    # 
    # ==== Syntax
    #
    #      safeZoneWAbs
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # SafeZone, #safeZoneH, #safeZoneX, #safeZoneY, #safeZoneW
    # 
    # Official Wiki: https://community.bistudio.com/wiki/safeZoneWAbs
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _szW = safeZoneWAbs; 
    # 
    def safeZoneWAbs 
      "safeZoneWAbs" 
    end

    # see SafeZone
    # 
    # ==== Syntax
    #
    #      SafeZoneX
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # SafeZone, #safeZoneY, #safeZoneW, #safeZoneH, #safeZoneXAbs
    # 
    # Official Wiki: https://community.bistudio.com/wiki/SafeZoneX
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _szX = safeZoneX;//returns a float value < 0.0 
    # 
    def SafeZoneX 
      "SafeZoneX" 
    end

    # Returns SafeZone left border (of all monitors, in case there's more than one)
    # 
    # ==== Syntax
    #
    #      safeZoneXAbs
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # SafeZone, #safeZoneH, #safeZoneX, #safeZoneY, #safeZoneW
    # 
    # Official Wiki: https://community.bistudio.com/wiki/safeZoneXAbs
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _szX = safeZoneXAbs; 
    # 
    def safeZoneXAbs 
      "safeZoneXAbs" 
    end

    # see SafeZone
    # 
    # ==== Syntax
    #
    #      SafeZoneY
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # SafeZone, SafeZoneX, SafeZoneW, SafeZoneH
    # 
    # Official Wiki: https://community.bistudio.com/wiki/SafeZoneY
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _szY = safeZoneY; //returns a float value < 0.0 
    # 
    def SafeZoneY 
      "SafeZoneY" 
    end

    # Autosave game (used for Retry)
    # 
    # ==== Syntax
    #
    #      saveGame
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #enableSaving, #loadGame, #savingEnabled
    # 
    # Official Wiki: https://community.bistudio.com/wiki/saveGame
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    saveGame;
    # 
    def saveGame 
      "saveGame" 
    end

    # Saves person's identity to Objects.
    # 
    # ==== Description
    # 
    # sav file in campaign directory as entry name
    #  
    # ==== Syntax
    #
    #      unitName saveIdentity name
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #loadIdentity
    # 
    # Official Wiki: https://community.bistudio.com/wiki/saveIdentity
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player saveIdentity "playerid"
    # 
    def saveIdentity _obj, _args
      "_obj saveIdentity _args;" 
    end

    # Saves joysticks key mappings into the joysticks.
    # 
    # ==== Description
    # 
    # cfg file.
    # 
    # Engine add these joysticks to the Joystick Scheme mapping dialog in options controls section
    #  
    # ==== Syntax
    #
    #      saveJoysticks
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/saveJoysticks
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def saveJoysticks 
      "saveJoysticks" 
    end

    # Save the current overlay
    # 
    # ==== Syntax
    #
    #      saveOverlay map
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/saveOverlay
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    saveOverlay _map
    # 
    def saveOverlay _args
      "saveOverlay _args;" 
    end

    # Saves the variables stored in profileNamespace to the persistent active user profile.
    # 
    # ==== Description
    # 
    # 
    # 
    # Warning: this is a file operation, which makes it expensive! It is not recommended to do this at a high frequency in a loop for example.
    # 
    # It is however also recommended not to change a large amount of variables and wait long before saving, because certain game crashes may cause a loss of data.
    # 
    # 
    # 
    # Warning: saving a lot of data can quickly increase the size of the profile variables file, so keep an eye on this.
    # 
    # Warning: TKOH's Heliport status (used in the Career mode for example) is stored in this file, so be mindful of working with this technology to avoid losing data and progress
    #  
    # ==== Syntax
    #
    #      saveProfileNamespace
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #profileNamespace
    # 
    # Official Wiki: https://community.bistudio.com/wiki/saveProfileNamespace
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    saveProfileNamespace;
    # 
    def saveProfileNamespace 
      "saveProfileNamespace" 
    end

    # Saves object's properties to Objects.
    # 
    # ==== Description
    # 
    # sav file in campaign directory as entry name
    #  
    # ==== Syntax
    #
    #      object saveStatus name
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #loadStatus
    # 
    # Official Wiki: https://community.bistudio.com/wiki/saveStatus
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player saveStatus "playerstate"
    # 
    def saveStatus _obj, _args
      "_obj saveStatus _args;" 
    end

    # Save variable value into the campaign space.
    # 
    # ==== Description
    # 
    # This variable is available to all following missions in the campaign
    #  
    # ==== Syntax
    #
    #      saveVar varname
    #
    # ==== Parameters
    # 
    # *    +varname+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/saveVar
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    saveVar "varOne"
    # 
    def saveVar _args
      "saveVar _args;" 
    end

    # Check if saving the game is enabled
    # 
    # ==== Syntax
    #
    #      savingEnabled
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #enableSaving, #loadGame, #saveGame
    # 
    # Official Wiki: https://community.bistudio.com/wiki/savingEnabled
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (savingEnabled) then {
    #      hint "Saving is enabled!";
    #    };
    # 
    def savingEnabled 
      "savingEnabled" 
    end

    # Unit will say given sound.
    # 
    # ==== Description
    # 
    # When the Unit is a Person, it will also perform corresponding lipsync effect provided an appropriate .
    # 
    # lip file has been created for this sound.
    # 
    # A unit that has been killed or does not exist will not say anything.
    # 
    # Compare this with playSound which will always play a sound at the location of the player.
    # 
    # If the camera is not within given range, title is not shown and the sound will not be heard.
    # 
    # Sound is defined in CfgSound of the Description.
    # 
    # ext
    #  
    # ==== Syntax
    #
    #      unit say [sound, maxTitlesDistance,speed]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +[sound, maxTitlesDistance,speed]+ - Array  
    # *    +sound+ - String classname. Defined in Description.ext  
    # *    +maxTitlesDistance+ - Number  
    # *    +speed+ - Number. Optional  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #say3D, #say2D, #playSound, #createSoundSource
    # 
    # Official Wiki: https://community.bistudio.com/wiki/say
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (units player select 1) say ["whisper1",5];
    # 
    # ====== Example 2:
    # 
    #    Arma 3:player say "scuba_breath";
    # 
    def say _obj, _args
      "_obj say _args;" 
    end

    # Unit or object will say given sound in 3D Space.
    # 
    # ==== Description
    # 
    # This allows broadcasting of positional music or sound from a source, without having to script a fade sound or music command.
    # 
    # Compare this with say2D which will always play a sound at the location of the player after he has been in the vicinity of a broadcasting sound.
    # 
    # Sound is defined in CfgSound of the Description.
    # 
    # ext
    #  
    # ==== Syntax
    #
    #      [unit, target] say3D sound
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    # *    +sound+ - String - classname. Defined in Description.ext  
    # *    +unit+ - Object -  
    # *    +target+ - Object  
    # *    +sound+ - String - classname. Defined in Description.ext  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #say, #say2D, #playSound, #createSoundSource
    # 
    # Official Wiki: https://community.bistudio.com/wiki/say3D
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     helicopter1 say3D "Fortunateson"
    # 
    def say3D _obj, _args
      "_obj say3D _args;" 
    end

    # Defines name of current scope.
    # 
    # ==== Description
    # 
    # Name is visible in debugger, and name is also used as reference in some commands.
    # 
    # Scope name can be defined only once per scope
    #  
    # ==== Syntax
    #
    #      scopeName name
    #
    # ==== Parameters
    # 
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #breakOut, #breakTo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/scopeName
    #
    # ==== Examples
    # 
    def scopeName _args
      "scopeName _args;" 
    end

    # MP: Returns the person's score
    # 
    # ==== Syntax
    #
    #      Number =  score unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addScore
    # 
    # Official Wiki: https://community.bistudio.com/wiki/score
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _pScore = score player
    # 
    def score _args
      "score _args;" 
    end

    # Returns score for a given side
    # 
    # ==== Syntax
    #
    #      scoreSide side
    #
    # ==== Parameters
    # 
    # *    +side+ - side  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/scoreSide
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _number = scoreSide west; 
    # 
    def scoreSide _args
      "scoreSide _args;" 
    end

    # Returns the position on landscape (in world coordinates) corresponding to the given point on screen (in UI coordinates)
    # 
    # ==== Syntax
    #
    #      screenToWorld position
    #
    # ==== Parameters
    # 
    # *    +position+ - Array -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # SafeZone, #worldToScreen
    # 
    # Official Wiki: https://community.bistudio.com/wiki/screenToWorld
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _wPos = screenToWorld [0.5,0.5]
    # 
    def screenToWorld _args
      "screenToWorld _args;" 
    end

    # Check if a script is finished running using the Script_(Handle) returned by execVM or spawn
    # 
    # ==== Syntax
    #
    #      scriptDone handle
    #
    # ==== Parameters
    # 
    # *    +handle+ - Script_(Handle) returned by spawn or execVM  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #execVM, #terminate
    # 
    # Official Wiki: https://community.bistudio.com/wiki/scriptDone
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    @ScriptDone _Handle
    # 
    # ====== Example 2:
    # 
    #    script_handler = [parameters] execVM "scriptname.sqf";
    #    waitUntil {scriptDone script_handler};
    # 
    def scriptDone _args
      "scriptDone _args;" 
    end

    # Assign a user friendly name to the VM script this command is executed from.
    # 
    # ==== Description
    # 
    # Once name is assigned, it cannot be changed
    #  
    # ==== Syntax
    #
    #      scriptName name
    #
    # ==== Parameters
    # 
    # *    +name+ - String -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/scriptName
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    scriptName "leetScript.sqf";
    # 
    # ====== Example 2:
    # 
    #    scriptName format ["%1ARTY\data\scripts\ARTY_sadarmDeploy.sqf (_this: %1)",_this];
    # 
    def scriptName _args
      "scriptName _args;" 
    end

    # Current state of given Scud launcher.
    # 
    # ==== Description
    # 
    # Following states are recognized:
    # 
    # 0 - No activity
    # 
    # 1 - Launch preparation,
    # 
    # 2 - Launch prepared
    # 
    # 3 - Ignition
    # 
    # 4 - Launched
    #  
    # ==== Syntax
    #
    #      Number =  scudState scudName
    #
    # ==== Parameters
    # 
    # *    +scudName+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/scudState
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? scudState _scudOne >= 3 : hint "RUN!!!!"
    # 
    def scudState _args
      "scudState _args;" 
    end

    # Returns name of a unit's secondary weapon (empty string if none)
    # 
    # ==== Syntax
    #
    #      secondaryWeapon unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #secondaryWeaponMagazine, #secondaryWeaponItems, #addSecondaryWeaponItem, #primaryWeapon, #handgunWeapon, #currentWeapon, #weapons
    # 
    # Official Wiki: https://community.bistudio.com/wiki/secondaryWeapon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _sWeap = secondaryWeapon player;
    # 
    # ====== Example 2:
    # 
    #    hint secondaryWeapon player; //"launch_NLAW_F"
    # 
    def secondaryWeapon _args
      "secondaryWeapon _args;" 
    end

    # Returns array with all items assigned to the secondary weapon.
    # 
    # ==== Description
    # 
    # This command is used for infantry weapons only
    #  
    # ==== Syntax
    #
    #      secondaryWeaponItems unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addSecondaryWeaponItem, #weaponsItems, #primaryWeaponItems, #handgunItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/secondaryWeaponItems
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    secondaryWeaponItems player; //["","",""]
    # 
    def secondaryWeaponItems _args
      "secondaryWeaponItems _args;" 
    end

    # Selects an index element of an array or config object.
    # 
    # ==== Description
    # 
    # Index 0 denotes the first element, 1 the second, etc.
    # 
    # If index has decimal places it gets rounded down for fractions less than or equal .
    # 
    # 5, otherwise it gets rounded up
    #  
    # ==== Syntax
    #
    #      config select index
    #
    # ==== Parameters
    # 
    # *    +array + - Array  
    # *    +index+ - Number  
    # *    +config+ - Config  
    # *    +index+ - Number  
    #
    # ==== Returns
    #
    #      Config
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #count
    # 
    # Official Wiki: https://community.bistudio.com/wiki/select
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [1,2,3,4] select 2 - result is 3
    # 
    # ====== Example 2:
    # 
    #    position player select 2 - result is Z coordinate of player position (see Position for more details)
    # 
    # ====== Example 3:
    # 
    #    (configFile >> "CfgVehicles") select 0 
    # 
    def select _obj, _args
      "_obj select _args;" 
    end

    # Find the places with the maximum value of _expression in the given area.
    # 
    # ==== Description
    # 
    # Places can be on water
    #  
    # ==== Syntax
    #
    #      selectBestPlaces [_position, _radius, _expression, _precision, _sourcesCount]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array - Format is [[position: Position2D, expressionResult: Number], ...]
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Ambient Parameters, #findEmptyPosition, #isFlatEmpty
    # 
    # Official Wiki: https://community.bistudio.com/wiki/selectBestPlaces
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myPlaces = selectBestPlaces [position player, 50, "meadow + 2*hills", 1, 5]
    # 
    def selectBestPlaces _args
      "selectBestPlaces _args;" 
    end

    # Select the subject page in a log
    # 
    # ==== Syntax
    #
    #      person selectDiarySubject subject
    #
    # ==== Parameters
    # 
    # *    +person+ - -  
    # *    +Object,subject+ - -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/selectDiarySubject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def selectDiarySubject _obj, _args
      "_obj selectDiarySubject _args;" 
    end

    # Select an editor object.
    # 
    # ==== Description
    # 
    # Does not un-select previously selected objects
    #  
    # ==== Syntax
    #
    #      map selectEditorObject object
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +object+ - String -  
    #
    # ==== Returns
    #
    #      Any
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/selectEditorObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def selectEditorObject _obj, _args
      "_obj selectEditorObject _args;" 
    end

    # Select a group's leader
    # 
    # ==== Syntax
    #
    #      groupName selectLeader unitName
    #
    # ==== Parameters
    # 
    # *    +groupName+ - Group  
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #formationLeader, #formLeader, #leader, #isFormationLeader
    # 
    # Official Wiki: https://community.bistudio.com/wiki/selectLeader
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    group player selectLeader player
    # 
    def selectLeader _obj, _args
      "_obj selectLeader _args;" 
    end

    # Switch player to no unit
    # 
    # ==== Syntax
    #
    #      selectNoPlayer
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Works only in Single Player
    # 
    # ==== See Also
    # 
    # #selectPlayer
    # 
    # Official Wiki: https://community.bistudio.com/wiki/selectNoPlayer
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    Single player:
    #    selectNoPlayer;
    #    hint str player; //<NULL-object>
    #    Rough multiplayer emulation:
    #    _noPlayer = createGroup sideLogic createUnit [
    #    	"Logic",
    #    	[0,0,1000],
    #    	[],
    #    	0,
    #    	"NONE"
    #    ];
    #    selectPlayer _noPlayer;
    #    hint str player; //L Charlie 4-3:1 (KK)
    # 
    def selectNoPlayer 
      "selectNoPlayer" 
    end

    # Switch player to given person.
    # 
    # ==== Description
    # 
    # Switching to a Null-Object works, but provides a view which you cannot manipulate (neither move nor rotate) with regular input.
    # 
    # This command has significant effects on locality.
    # 
    # See notes beneath
    #  
    # ==== Syntax
    #
    #      selectPlayer unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #selectNoPlayer, Team_Switch, #switchCamera
    # 
    # Official Wiki: https://community.bistudio.com/wiki/selectPlayer
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    selectPlayer _aPerson
    # 
    def selectPlayer _args
      "selectPlayer _args;" 
    end

    # Selects the given weapon.
    # 
    # ==== Description
    # 
    # Note: For weapons that have more than one muzzle, you have to input the muzzlename and not the weaponName.
    # 
    # The only weapons that have muzzleNames seem to be rifles with grenade launchers, handgrenades, smokeshells and satchels.
    # 
    # In all other cases the weaponName must be used.
    # 
    # Fortunately, in OFP, in most cases, both names are the same.
    # 
    # But check.
    # 
    # In ArmA the weaponNames and muzzleNames are different.
    # 
    # For muzzle names see cfgWeapons.
    # 
    # 
    # 
    # NOTE: The unit must be local to the PC on which command is executed
    #  
    # ==== Syntax
    #
    #      unitName selectWeapon muzzleName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +muzzleName+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #fire, #forceWeaponFire, #primaryWeapon, #handgunWeapon, #secondaryWeapon, #weapons, #action SwitchWeapon, #action SwitchMagazine
    # 
    # Official Wiki: https://community.bistudio.com/wiki/selectWeapon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 selectWeapon "LAWLauncher";
    # 
    # ====== Example 2:
    # 
    #    player selectWeapon "M203Muzzle";
    # 
    def selectWeapon _obj, _args
      "_obj selectWeapon _args;" 
    end

    # Selects the given weapon on specified turret.
    # 
    # ==== Description
    # 
    # Use turret path [-1] for driver's turret
    #  
    # ==== Syntax
    #
    #      vehicle selectWeaponTurret [weapon, turret path]
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +[weapon, turret path]+ - Array  
    # *    +weapon+ - String  
    # *    +turret path+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/selectWeaponTurret
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    MBT_Kuma selectWeaponTurret ["LMG_coax",[0]];
    # 
    def selectWeaponTurret _obj, _args
      "_obj selectWeaponTurret _args;" 
    end

    # Returns a list of currently selected editor objects
    # 
    # ==== Syntax
    #
    #      selectedEditorObjects map
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #clearSelected (VBS2)
    # 
    # Official Wiki: https://community.bistudio.com/wiki/selectedEditorObjects
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _selObjects = selectedEditorObjects _map  
    #    Result can be: ["_vehicle_0","_vehicle_9","_vehicle_11"]
    # 
    def selectedEditorObjects _args
      "selectedEditorObjects _args;" 
    end

    # Search for selection in the object model (first in the memory level, then in geometry LODs).
    # 
    # ==== Description
    # 
    # Returns position in model space.
    # 
    # In A1 it returns the initial position of the selection, in A2/3 position of the selection (e.
    # 
    # g.
    # 
    # when it is animated).
    # 
    # If a selection does not exist [0,0,0] is returned
    #  
    # ==== Syntax
    #
    #      object selectionPosition selectionName
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +selectionName+ - String  
    #
    # ==== Returns
    #
    #      Array - [x,y,z] relative position in model space
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #modelToWorld
    # 
    # Official Wiki: https://community.bistudio.com/wiki/selectionPosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _inModelPosition = player selectionPosition "head_hit";
    # 
    # ====== Example 2:
    # 
    #    _inModelPosition = player selectionPosition "pelvis";
    # 
    # ====== Example 3:
    # 
    #    _inModelPosition = player selectionPosition "head";
    # 
    # ====== Example 4:
    # 
    #    _inModelPosition = player selectionPosition "camera";
    # 
    def selectionPosition _obj, _args
      "_obj selectionPosition _args;" 
    end

    # Send the command to the list of clients
    # 
    # ==== Syntax
    #
    #      sendAUMessage [clientList, command]
    #
    # ==== Parameters
    # 
    # *    +clientList+ - Array  
    # *    +command+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sendAUMessage
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    sendAUMessage [[dpnid1, dpnid2], "ConnectTo: 192.168.1.66"]
    # 
    def sendAUMessage _args
      "sendAUMessage _args;" 
    end

    # Sends a simple command to the vehicle's driver / gunner
    # 
    # ==== Syntax
    #
    #      vehicleName sendSimpleCommand command
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    # *    +command+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sendSimpleCommand
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    vehicle player sendSimpleCommand "STOP"
    # 
    def sendSimpleCommand _obj, _args
      "_obj sendSimpleCommand _args;" 
    end

    # Create a new AI task (subtask of parentTask).
    # 
    # ==== Description
    # 
    # Type is name of registered task type
    #  
    # ==== Syntax
    #
    #      sender sendTask [receiver,[type] or [type,parentTask],priority,name1,value1,name2,value2,...]
    #
    # ==== Parameters
    # 
    # *    +sender+ - -  
    # *    +[type] or [type,parentTask],priority,name1,value1,name2,value2,...]+ - Array -  
    #
    # ==== Returns
    #
    #      Task
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sendTask
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def sendTask _obj, _args
      "_obj sendTask _args;" 
    end

    # Send a result of the task to the task sender
    # 
    # ==== Syntax
    #
    #      task sendTaskResult [state,result,sentence]
    #
    # ==== Parameters
    # 
    # *    +task+ - Task -  
    # *    +[state,result,sentence]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sendTaskResult
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def sendTaskResult _obj, _args
      "_obj sendTaskResult _args;" 
    end

    # Send message to given address using UDP protocol.
    # 
    # ==== Description
    # 
    # Returns false if the message has not been delivered
    # 
    # Note: Not implemented (see talk page for more info)
    #  
    # ==== Syntax
    #
    #      sendUDPMessage [ip, port, message]
    #
    # ==== Parameters
    # 
    # *    +ip+ - String  
    # *    +port+ -   
    # *    +message+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sendUDPMessage
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _bool = sendUDPMessage ["192.168.0.1", 2302, "Here goes you message..."]; 
    # 
    def sendUDPMessage _args
      "sendUDPMessage _args;" 
    end

    # Executes an admin command on the server.
    # 
    # ==== Description
    # 
    # If used in singleplayer or in multiplayer, but without required privileges (player using the computer where command is executed is not an admin) nothing happens.
    # 
    # This can be detected beforehand using serverCommandAvailable
    #  
    # ==== Syntax
    #
    #      serverCommand command
    #
    # ==== Parameters
    # 
    # *    +command + - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #serverCommandAvailable
    # 
    # Official Wiki: https://community.bistudio.com/wiki/serverCommand
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     serverCommand "#logout" 
    # 
    def serverCommand _args
      "serverCommand _args;" 
    end

    # Returns true if the admin command can be performed on the machine, false if not.
    # 
    # ==== Description
    # 
    # Used in connection with serverCommand
    #  
    # ==== Syntax
    #
    #      Boolean = serverCommandAvailable command
    #
    # ==== Parameters
    # 
    # *    +command+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #serverCommand
    # 
    # Official Wiki: https://community.bistudio.com/wiki/serverCommandAvailable
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _can = serverCommandAvailable "#kick" 
    # 
    def serverCommandAvailable _args
      "serverCommandAvailable _args;" 
    end

    # Server time synchronized to clients.
    # 
    # ==== Description
    # 
    # Returns always 0 in Singleplayer.
    # 
    # Note that in ArmA2 1.
    # 
    # 05 Final, this command only returns the time since the Server was actually started.
    # 
    # NOTE: serverTime is available to both server and clients and shows the same value when synced.
    # 
    # The only time it is not synced is on the server, right after server restart and only for the first 300 seconds.
    # 
    # Client side serverTime is synced from the start.
    # 
    # serverTime is also different from server time and server diag_tickTime
    #  
    # ==== Syntax
    #
    #      serverTime
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #time, #diag_tickTime
    # 
    # Official Wiki: https://community.bistudio.com/wiki/serverTime
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint format["Connected on Server since Serverstart : %1", serverTime - time]
    # 
    def serverTime 
      "serverTime" 
    end

    # Format of element is [index, value].
    # 
    # ==== Description
    # 
    # Changes an element of given array.
    # 
    # If element does not exist, resize index+1 is called to create it
    #  
    # ==== Syntax
    #
    #      array set [index, value]
    #
    # ==== Parameters
    # 
    # *    +array+ - Array  
    # *    +[index, value]+ - Array  
    # *    +index+ - Number  
    # *    +value+ - Anything  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/set
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _arrayOne set [0, "Hello"]
    # 
    def set _obj, _args
      "_obj set _args;" 
    end

    # Set time acceleration coefficient.
    # 
    # ==== Description
    # 
    # May be also used to slow time in cutscenes.
    # 
    # This command does NOT work in multiplayer
    #  
    # ==== Syntax
    #
    #      setAccTime accFactor
    #
    # ==== Parameters
    # 
    # *    +accFactor+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #accTime
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setAccTime
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setAccTime 0.1
    # 
    def setAccTime _args
      "setAccTime _args;" 
    end

    # Set owning side of the airport.
    # 
    # ==== Description
    # 
    # ID is the number to identify which airport on the island you want to check
    #  
    # ==== Syntax
    #
    #      id setAirportSide side
    #
    # ==== Parameters
    # 
    # *    +id+ - Number  
    # *    +side+ - Side  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #airportSide, #landAt
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setAirportSide
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    0 setAirportSide east
    # 
    def setAirportSide _obj, _args
      "_obj setAirportSide _args;" 
    end

    # Sets custom ammo count in the currently loaded magazine of the specified weapon.
    # 
    # ==== Description
    # 
    # The unit must be local to the computer where command is executed
    #  
    # ==== Syntax
    #
    #      unit setAmmo [weapon, count]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - Gunner or vehicle.  
    # *    +[weapon, count]+ - Array  
    # *    +weapon+ - String  
    # *    +count+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ammo, #setFuel, #setHit
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setAmmo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    Set player's handgun magazine ammo count to 10 rounds:
    #    player setAmmo [handgunWeapon player, 10];
    # 
    # ====== Example 2:
    # 
    #    Set player's current weapon magazine ammo count to 1 round:
    #    player setAmmo [currentWeapon player, 1];
    # 
    # ====== Example 3:
    # 
    #    If player is a gunner in a vehicle, set current weapon magazine ammo count to 5 rounds:
    #    if (local vehicle player) then {
    #    	vehicle player setAmmo [currentWeapon vehicle player, 5];
    #    } else {
    #    	hint "Vehicle must be local to this machine for 'setAmmo' to work";
    #    };
    # 
    # ====== Example 4:
    # 
    #    If you try to set more ammo than the magazine can hold, it will be clipped at default magazine capacity:
    #    player setAmmo [primaryWeapon player, 1000000]; //full mag with default ammo count
    # 
    def setAmmo _obj, _args
      "_obj setAmmo _args;" 
    end

    # Set amount of ammo resources in cargo space of a rearm vehicle.
    # 
    # ==== Description
    # 
    # Ammo resource is used to resupply vehicles that take ammo.
    # 
    # Soldiers use individual magazines instead.
    # 
    # Amount: 1 is full cargo.
    # 
    # The actual quantity to work with is determined by the model's class in CfgVehicles
    #  
    # ==== Syntax
    #
    #      vehicleName setAmmoCargo ammoCargo
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    # *    +ammoCargo+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getAmmoCargo, #setFuelCargo, #setRepairCargo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setAmmoCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _ammoTruck1 setAmmoCargo 0.5; 
    # 
    def setAmmoCargo _obj, _args
      "_obj setAmmoCargo _args;" 
    end

    # Sets custom camera aperture (-1 to do it automatically)
    # 
    # ==== Syntax
    #
    #      setAperture aperture
    #
    # ==== Parameters
    # 
    # *    +aperture+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setApertureNew
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setAperture
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setAperture 0.3
    # 
    def setAperture _args
      "setAperture _args;" 
    end

    # Sets custom camera aperture (-1 to do it automatically)
    # 
    # ==== Syntax
    #
    #      setApertureNew [min, std, max, stdLum]
    #
    # ==== Parameters
    # 
    # *    +min+ - Number  
    # *    +std+ - Number  
    # *    +max+ - Number  
    # *    +stdLum+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setAperture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setApertureNew
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setApertureNew _args
      "setApertureNew _args;" 
    end

    # Store the given amount of armory points
    # 
    # ==== Syntax
    #
    #      setArmoryPoints points
    #
    # ==== Parameters
    # 
    # *    +points+ - Number (Integer)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #armoryPoints
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setArmoryPoints
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setArmoryPoints (armoryPoints + 20);
    # 
    def setArmoryPoints _args
      "setArmoryPoints _args;" 
    end

    # Returns a structured text created by the given structured or plain text by setting attributes to the given values
    # 
    # ==== Syntax
    #
    #      text setAttributes [name1, value1, name2, value2, ...]
    #
    # ==== Parameters
    # 
    # *    +text+ - String  
    # *    +[name1, value1, name2, value2, ...]+ - Array  
    #
    # ==== Returns
    #
    #      Structured Text
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setAttributes
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    txt = img setAttributes ["image", "data\iSoldier.paa"]
    # 
    def setAttributes _obj, _args
      "_obj setAttributes _args;" 
    end

    # Set group/unit behaviour mode.
    # 
    # ==== Description
    # 
    # Behaviour is one of:
    # 
    # "CARELESS"
    # 
    # "SAFE"
    # 
    # "AWARE"
    # 
    # "COMBAT"
    # 
    # "STEALTH".
    # 
    # 
    # 
    # See this page for details of the effect of this command on AI units
    #  
    # ==== Syntax
    #
    #      groupName setBehaviour behaviour
    #
    # ==== Parameters
    # 
    # *    +groupName+ - Object or Group  
    # *    +behaviour+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #behaviour description, AIBehaviour, #behaviour, #setWaypointBehaviour, #combatMode, #setCombatMode, #skill, #setSkill array, CfgAISkill
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setBehaviour
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _group1 setBehaviour "SAFE"
    # 
    def setBehaviour _obj, _args
      "_obj setBehaviour _args;" 
    end

    # Sets bleeding time remaining
    # 
    # ==== Syntax
    #
    #      unit setBleedingRemaining time
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +time+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setBleedingRemaining
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setBleedingRemaining _obj, _args
      "_obj setBleedingRemaining _args;" 
    end

    # Sets camera shake default params, the default camshake when, for example, you freelook at your character shooting a 12.
    # 
    # ==== Description
    # 
    # 7mm sniper rifle or firing tank cannon.
    # 
    # Would also work in 1st person
    #  
    # ==== Syntax
    #
    #      setCamShakeDefParams [power, duration, frequency, minSpeed, minMass, caliberCoefHit, vehicleCoef]
    #
    # ==== Parameters
    # 
    # *    +power+ - Number  
    # *    +duration+ - Number  
    # *    +frequency+ - Number  
    # *    +minSpeed+ - Number  
    # *    +minMass+ - Number  
    # *    +caliberCoefHit+ - Number  
    # *    +vehicleCoef+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #enableCamShake, #addCamShake, #setCamShakeParams, #resetCamShake
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setCamShakeDefParams
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setCamShakeDefParams [1, 2, 3, 4, 5, .5, .5];
    # 
    # ====== Example 2:
    # 
    #    setCamShakeDefParams [100, 10, 10, 4, 5, 1, 1];
    # 
    def setCamShakeDefParams _args
      "setCamShakeDefParams _args;" 
    end

    # Set camera shake parameters.
    # 
    # ==== Description
    # 
    # 
    # 
    # Will not have any effect unit shake is started via addCamShake
    #  
    # ==== Syntax
    #
    #      setCamShakeParams  [posCoef, vertCoef, horzCoef, bankCoef, interpolation]
    #
    # ==== Parameters
    # 
    # *    +posCoef+ - Number - Strength of positional movement (how far the whole position can change in X,Y&Z), should not be bigger than .1, or the camera might move into, or behind, the player  
    # *    +vertCoef+ - Number - Strength of vertical camera pan (up/down), practical range: 0-10  
    # *    +horzCoef+ - Number - Strength of horizontal camera pan (left/right), practical range: 0-10  
    # *    +bankCoef+ - Number - Strength of camera tilt/bank, practical range: 0-20  
    # *    +interpolation+ - Boolean - If true, then transitions in the different shaking directions will be smoother  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setCamShakeDefParams, #addCamShake, #enableCamShake, #resetCamShake
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setCamShakeParams
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setCamShakeParams [0.1, 1, 1, 1, true]; 
    # 
    def setCamShakeParams _args
      "setCamShakeParams _args;" 
    end

    # Activate camera thermal vision
    # 
    # ==== Syntax
    #
    #      Bool setCamUseTi mode index
    #
    # ==== Parameters
    # 
    # *    +Bool+ - Boolean  
    # *    +mode index+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setCamUseTi
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    true setCamUseTi 1; 
    # 
    def setCamUseTi _obj, _args
      "_obj setCamUseTi _args;" 
    end

    # Set camera interest for given entity.
    # 
    # ==== Description
    # 
    # Camera interest is by default 0.
    # 
    # Any unit which is speaking has its camera interest raised to 50.
    # 
    # Camera interest is used to focus camera to control depth of field in cutscenes.
    # 
    # Combination of camera interest, unit position of the screen, unit movement, unit type, and some other properties is used to determine which unit to focus at.
    # 
    # Higher camera interest increases the chance of the unit being focused
    #  
    # ==== Syntax
    #
    #      entity setCameraInterest interest
    #
    # ==== Parameters
    # 
    # *    +entity+ - Object  
    # *    +interest+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setCameraInterest
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier setCameraInterest 50
    # 
    def setCameraInterest _obj, _args
      "_obj setCameraInterest _args;" 
    end

    # Mark a unit as captive.
    # 
    # ==== Description
    # 
    # If unit is a vehicle, commander is marked.
    # 
    # A captive is neutral to everyone (belong to civilian side), and will not trigger "detected by" conditions for its original side.
    # 
    # Using a number (instead of a boolean) for the status has no further effect on the engine's behavior, but can be used by captiveNum to keep track of the captivity status at a finer resolution (e.
    # 
    # g.
    # 
    # handcuffed, grouped, etc.
    # 
    # )
    # 
    # The numbered status syntax was introduced in Arma 2
    #  
    # ==== Syntax
    #
    #      unitName setCaptive status
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +status+ - Boolean or Number - When using a number parameter, any value>0 is considered to be the same as true  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #captive, #captiveNum, #setCaptive_(VBS2)
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setCaptive
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 setCaptive true
    # 
    # ====== Example 2:
    # 
    #    _soldier1 setCaptive 3
    # 
    def setCaptive _obj, _args
      "_obj setCaptive _args;" 
    end

    # Changes the center of mass of an object smoothly during the given time (in seconds).
    # 
    # ==== Description
    # 
    # A time of zero (or using the alternative syntax) means an immediate change
    #  
    # ==== Syntax
    #
    #      myObject setCenterOfMass com
    #
    # ==== Parameters
    # 
    # *    +myObject+ - Object  
    # *    +com+ - Array - [x,y,z] offset relative to the model centre  
    # *    +time+ - Number  
    # *    +myObject+ - Object  
    # *    +com+ - Array - [x,y,z] offset relative to the model centre  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getCenterOfMass, #setMass, #getMass
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setCenterOfMass
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myObject setCenterOfMass [[0,-1,0],0.5];
    # 
    # ====== Example 2:
    # 
    #    myObject setCenterOfMass [0,-1,0];
    # 
    def setCenterOfMass _obj, _args
      "_obj setCenterOfMass _args;" 
    end

    # Set group combat mode (engagement rules).
    # 
    # ==== Description
    # 
    # Mode may be one of:
    # 
    # "BLUE" (Never fire)
    # 
    # "GREEN" (Hold fire - defend only)
    # 
    # "WHITE" (Hold fire, engage at will)
    # 
    # "YELLOW" (Fire at will)
    # 
    # "RED" (Fire at will, engage at will)
    #  
    # ==== Syntax
    #
    #      groupName setCombatMode mode
    #
    # ==== Parameters
    # 
    # *    +groupName+ - Object or Group  
    # *    +mode+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #combat mode description, AI Combat Modes, #combatMode, #behaviour, #setBehaviour, #skill, #setSkill array, CfgAISkill
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setCombatMode
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _group1 setCombatMode "BLUE"
    # 
    def setCombatMode _obj, _args
      "_obj setCombatMode _args;" 
    end

    # Sets compass oscillation
    # 
    # ==== Syntax
    #
    #      setCompassOscillation [angle, frequencyMin, frequencyMax]
    #
    # ==== Parameters
    # 
    # *    +angle+ - Number  
    # *    +frequencyMin+ - Number  
    # *    +frequencyMax+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setCompassOscillation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setCompassOscillation [1, 1, 1];
    # 
    def setCompassOscillation _args
      "setCompassOscillation _args;" 
    end

    # Sets maximal height to which curator camera can move
    # 
    # ==== Syntax
    #
    #      curatorObj setCuratorCameraAreaCeiling height
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    # *    +height+ - Number (in metres)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #addCuratorCameraArea, #removeCuratorCameraArea, #removeAllCuratorCameraAreas, #curatorCameraArea
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setCuratorCameraAreaCeiling
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myCurator setCuratorCameraAreaCeiling 50;
    # 
    def setCuratorCameraAreaCeiling _obj, _args
      "_obj setCuratorCameraAreaCeiling _args;" 
    end

    # Sets coef for some action (coef have to be bigger than -1 000 000, anything lower is considered as disabled action)
    # 
    # ==== Syntax
    #
    #      curatorObj setCuratorCoef [action,coef]
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    # *    +action+ - String  
    # *    +coef+ - Number or Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setCuratorCoef
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    curatorModule setCuratorCoef ["Place", 1]
    # 
    # ====== Example 2:
    # 
    #    curatorModule setCuratorCoef ["Delete", -1e10]
    # 
    def setCuratorCoef _obj, _args
      "_obj setCuratorCoef _args;" 
    end

    # Set whether curator can edit in all editing areas (true) or outside of them (false)
    # 
    # ==== Syntax
    #
    #      curatorObj setCuratorEditingAreaType bool
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    # *    +bool+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #addCuratorEditingArea, #removeCuratorEditingArea, #removeAllCuratorEditingAreas, #curatorEditingArea
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setCuratorEditingAreaType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    curatorModule setCuratorEditingAreaType true
    # 
    def setCuratorEditingAreaType _obj, _args
      "_obj setCuratorEditingAreaType _args;" 
    end

    # Sets cost of waypoints (used for placing, editing and deleting)
    # 
    # ==== Syntax
    #
    #      curatorObj setCuratorWaypointCost cost
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    # *    +cost+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setCuratorWaypointCost
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myCUrator setCuratorWaypointCost 0.1;
    # 
    def setCuratorWaypointCost _obj, _args
      "_obj setCuratorWaypointCost _args;" 
    end

    # Set the task as a current task of the person
    # 
    # ==== Syntax
    #
    #      object setCurrentTask task
    #
    # ==== Parameters
    # 
    # *    +object+ - Object - the unit having the task  
    # *    +task+ - Task - the task you want to select  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createSimpleTask, #simpleTasks, #currentTask
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setCurrentTask
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setCurrentTask tskKillSpongebob;
    # 
    def setCurrentTask _obj, _args
      "_obj setCurrentTask _args;" 
    end

    # Sets the currently active waypoint for a group
    # 
    # ==== Syntax
    #
    #      groupName setCurrentWaypoint waypoint
    #
    # ==== Parameters
    # 
    # *    +groupName+ - Object or Group  
    # *    +waypoint+ - Array - format Waypoint  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWaypoint, #currentWaypoint
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setCurrentWaypoint
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _grp setCurrentWaypoint [_grp, 1]
    # 
    def setCurrentWaypoint _obj, _args
      "_obj setCurrentWaypoint _args;" 
    end

    # Damage / repair object.
    # 
    # ==== Description
    # 
    # Damage 0 means fully functional, damage 1 means completely destroyed / dead.
    # 
    # This function is identical to setDammage.
    # 
    # It was introduced to fix a spelling error in original function name
    #  
    # ==== Syntax
    #
    #      object setDamage damage
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +damage+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setDammage, #damage, #getDammage, #setHit
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setDamage
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 setDamage 1
    # 
    def setDamage _obj, _args
      "_obj setDamage _args;" 
    end

    # Damage / repair object.
    # 
    # ==== Description
    # 
    # Damage 0 means fully functional, damage 1 means completely destroyed / dead.
    # 
    # This function is identical to setDamage.
    # 
    # setDamage was introduced to fix a spelling error in this operator's name
    #  
    # ==== Syntax
    #
    #      object setDammage damage
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +damage+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setDamage, #damage, #getDammage
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setDammage
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 setDammage 1
    # 
    def setDammage _obj, _args
      "_obj setDammage _args;" 
    end

    # Sets the actual mission date and time
    # 
    # ==== Syntax
    #
    #      setDate [year, month, day, hour, minute]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #date, #skipTime
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setDate
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setDate [1986, 2, 25, 16, 0]
    # 
    def setDate _args
      "setDate _args;" 
    end

    # Sets debriefing text
    # 
    # ==== Syntax
    #
    #      endType setDebriefingText [title, description]
    #
    # ==== Parameters
    # 
    # *    +endType+ - String  
    # *    +[title, description]+ - Array  
    # *    +title+ - String  
    # *    +description+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setDebriefingText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setDebriefingText _obj, _args
      "_obj setDebriefingText _args;" 
    end

    # Sets the position and direction for the camera used after camera is set on no object (log out view when leaving MP game for example)
    # 
    # ==== Syntax
    #
    #      setDefaultCamera [position, direction]
    #
    # ==== Parameters
    # 
    # *    +position+ - PositionASL - position of the camera  
    # *    +direction+ - vectorDir - direction of the camera  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #camCreate, #cameraOn, #cameraView, #cameraEffect, #cameraEffectEnableHUD, #switchCamera, #positionCameraToWorld, #cameraInterest, #setCameraInterest, #getEditorCamera, #mapCenterOnCamera, #preloadCamera, #restartEditorCamera
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setDefaultCamera
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setDefaultCamera [[5000,5000,200],[1,1,-1]];
    # 
    # ====== Example 2:
    # 
    #    Lift camera 100m up above current player position and point downwards:
    #    setDefaultCamera [ATLtoASL (player modelToWorld [0,0,100]),[0,0,-1]];
    # 
    def setDefaultCamera _args
      "setDefaultCamera _args;" 
    end

    # Set the destination for path planning of the pilot.
    # 
    # ==== Description
    # 
    # Possible values for planningMode are:
    # 
    # "DoNotPlan",
    # 
    # "LeaderPlanned",
    # 
    # "LeaderDirect",
    # 
    # "FormationPlanned",
    # 
    # "VehiclePlanned"
    #  
    # ==== Syntax
    #
    #      object setDestination [position, planningMode, forceReplan]
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +[position, planningMode, forceReplan]+ - Array  
    # *    +position+ - Array - format Position  
    # *    +planningMode+ - String  
    # *    +forceReplan+ - Boolean Specifies if replanning of the path should be forced.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #expectedDestination, #doMove
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setDestination
    #
    # ==== Examples
    # 
    def setDestination _obj, _args
      "_obj setDestination _args;" 
    end

    # Sets object heading.
    # 
    # ==== Description
    # 
    # Angles are measured in degrees clockwise from north.
    # 
    # The accepted heading range is from 0 to 360 Negative angles represent a counter-clockwise angle and the angle can be of any size
    #  
    # ==== Syntax
    #
    #      object setDir heading
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +heading+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getDir, #direction, #setFormDir
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setDir
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _soldier1 setDir 45 
    #    Will set soldier1 to face North East
    # 
    # ====== Example 2:
    # 
    #    _soldier1 setDir -675
    #    Will also set soldier1 to face North East
    # 
    def setDir _obj, _args
      "_obj setDir _args;" 
    end

    # Set's the orientation of a location.
    # 
    # ==== Description
    # 
    # It's area and map icon (if it's type uses an icon) will be rotated to this orientation
    #  
    # ==== Syntax
    #
    #      location setDirection direction
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    # *    +direction+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #direction
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setDirection
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myLocation setDirection 45
    # 
    def setDirection _obj, _args
      "_obj setDirection _args;" 
    end

    # Set the icon to be shown in 2D editor for the specified editor object.
    # 
    # ==== Description
    # 
    # If maintain size is false,icon will not scale depending on the scale,of the map.
    # 
    # If maintain size is a number,the icon will maintain size,if map scale is below that number.
    # 
    # is3D,show line and priority are,optional
    #  
    # ==== Syntax
    #
    #      map setDrawIcon [object,texture,color,offset,width,height,maintain size?,angle,string identifier,shadow,is3D,draw line?,priority]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[object,texture,color,offset,width,height,maintain size?,angle,string identifier,shadow,is3D,draw line?,priority]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setDrawIcon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def setDrawIcon _obj, _args
      "_obj setDrawIcon _args;" 
    end

    # Set interval of emitting particles from particle source
    # 
    # ==== Syntax
    #
    #      particleSource setDropInterval interval
    #
    # ==== Parameters
    # 
    # *    +particleSource+ - Object  
    # *    +interval+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setDropInterval
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _source setDropInterval 0.05
    # 
    def setDropInterval _obj, _args
      "_obj setDropInterval _args;" 
    end

    # Sets map mode to MAP,3D or PREVIEW
    # 
    # ==== Syntax
    #
    #      map setEditorMode mode
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +mode+ - String -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setEditorMode
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def setEditorMode _obj, _args
      "_obj setEditorMode _args;" 
    end

    # This command defines the level of access a user has to editor objects.
    # 
    # ==== Description
    # 
    # "objects" is an array of either Editor Objects (eg ["_unit_0"]) or actual Game Objects (eg [player]).
    # 
    # If the array is empty then the command will automatically parse all editor objects.
    # 
    # "editorType" is the editor type to effect (eg "unit", "vehicle", "center") or "" for all types.
    # 
    # "condition" is an executable string that must evaluate to true or false.
    # 
    # If true, the scope of the evaluated editor object will be modified.
    # 
    # "_x" can be used in the string as reference to the ingame representation of the currently processed array member.
    # 
    # "scope" is one of "HIDE", "VIEW", "SELECT", "LINKTO", "LINKFROM", "ALLNODRAG", "ALLNOTREE", "ALLNOCOPY", "ALLNOSELECT" or "ALL".
    # 
    # "subordinatesAlso" is a boolean value.
    # 
    # If true then subordinates in the editor will be assigned the same scope as the parent
    #  
    # ==== Syntax
    #
    #      map setEditorObjectScope [objects, editorType, condition, scope, subordinatesAlso]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[objects, editorType, condition, scope, subordinatesAlso]+ - Array -  
    # *    +objects+ - Array of Objects and/or Editor Objects  
    # *    +editorType+ - String  
    # *    +condition+ - String  
    # *    +scope+ - String  
    # *    +subordinatesAlso+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setEditorObjectScope
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _map setEditorObjectScope [[],"vehicle", "side effectiveCommander _x != side player", "HIDE", false]
    # 
    # ====== Example 2:
    # 
    #    ((findDisplay 128) displayCtrl 51) setEditorObjectScope [["_unit_0"], "", "true", "ALLNODRAG", false]
    # 
    def setEditorObjectScope _obj, _args
      "_obj setEditorObjectScope _args;" 
    end

    # The statement is executed when the trigger or waypoint is activated and the effects are launched depending on the result.
    # 
    # ==== Description
    # 
    # If the result is a boolean and true, the effect is launched.
    # 
    # If the result is an object, the effect is launched if the result is the player or the player vehicle.
    # 
    # If the result is an array, the effect is launched if the result contains the player or the player vehicle
    #  
    # ==== Syntax
    #
    #      waypoint setEffectCondition "statement"
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    # *    +statement+ - String  
    # *    +waypoint+ - Array - format Waypoint  
    # *    +statement+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createTrigger
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setEffectCondition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _triggerObj setEffectCondition "thisList";
    # 
    def setEffectCondition _obj, _args
      "_obj setEffectCondition _args;" 
    end

    # Set variable to given value in the variable space of given FSM.
    # 
    # ==== Description
    # 
    # The FSM handle is the number returned by the execFSM command
    #  
    # ==== Syntax
    #
    #      handle setFSMVariable [name, value]
    #
    # ==== Parameters
    # 
    # *    +handle+ - Number - FSM handle  
    # *    +[name,value]+ - Array  
    # *    +name+ - String - name of the FSM variable  
    # *    +value+ - Any Value - new value of the FSM variable  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # FSM, #commandFSM, #completedFSM, #doFSM, #execFSM, #getFSMVariable
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFSMVariable
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _handle = execFSM "test.fsm";
    #    _handle setFSMVariable ["_foo", 23];
    #    sets variable _foo in the FSM to 23
    # 
    def setFSMVariable _obj, _args
      "_obj setFSMVariable _args;" 
    end

    # Set person's face.
    # 
    # ==== Description
    # 
    # For a list of available faces, check Category:CfgIdentities
    #  
    # ==== Syntax
    #
    #      person setFace face
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +face+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFace
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    soldier1 setFace "WhiteHead_02"
    # 
    def setFace _obj, _args
      "_obj setFace _args;" 
    end

    # Set facial animation phase (eye blinking), blink is in the range from 0 to 1
    # 
    # ==== Syntax
    #
    #      person setFaceAnimation blink
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +blink+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFaceAnimation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 setFaceAnimation 0.5
    # 
    def setFaceAnimation _obj, _args
      "_obj setFaceAnimation _args;" 
    end

    # Sets the person's fatigue, from 0 to 1
    # 
    # ==== Syntax
    #
    #      unit setFatigue value
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +value+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getFatigue, #enableFatigue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFatigue
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     player setFatigue 1;
    # 
    def setFatigue _obj, _args
      "_obj setFatigue _args;" 
    end

    # Set flag owner.
    # 
    # ==== Description
    # 
    # When owner is set to objNull or any object other than a unit of class man or logic, flag is returned to the flagpole.
    # 
    # A flag owned by a logic has no visual representation
    #  
    # ==== Syntax
    #
    #      flag setFlagOwner owner
    #
    # ==== Parameters
    # 
    # *    +flag+ - Object  
    # *    +owner+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Flag Textures, #flag, #flagOwner, #setFlagSide, #setFlagTexture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFlagOwner
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _flag1 setFlagOwner _soldier1;
    # 
    def setFlagOwner _obj, _args
      "_obj setFlagOwner _args;" 
    end

    # Set flag side.
    # 
    # ==== Description
    # 
    # A flag may be taken by any unit that is enemy to the side that owns the flag
    #  
    # ==== Syntax
    #
    #      flag setFlagSide side
    #
    # ==== Parameters
    # 
    # *    +flag+ - Object  
    # *    +side+ - Side  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Flag Textures, #flag, #flagOwner, #setFlagOwner, #setFlagTexture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFlagSide
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _flag1 setFlagSide east;
    # 
    def setFlagSide _obj, _args
      "_obj setFlagSide _args;" 
    end

    # Set flag texture.
    # 
    # ==== Description
    # 
    # If texture is "", flag is not drawn.
    # 
    # Custom texture can be used, as long as it is in *.
    # 
    # jpg format, and has dimensions of 200px*200px.
    # 
    # The page Flag Textures shows which textures are available in each game.
    # 
    # NOTE: In MP this command has to be executed where Flag Pole is local.
    # 
    # If you add Flag Pole in the editor, it will be local to the server, so executing setFlagTexture on the server will change flag texture on all clients.
    # 
    # The command is also persistent and is synchronised for JIP clients
    #  
    # ==== Syntax
    #
    #      flag setFlagTexture texture
    #
    # ==== Parameters
    # 
    # *    +flag+ - Object  
    # *    +texture+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Flag Textures, #flag, #flagOwner, #setFlagOwner, #setFlagSide, #setObjectTexture, #setObjectTextureGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFlagTexture
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _flagE setFlagTexture "\ca\misc\data\sever_vlajka.paa";
    # 
    # ====== Example 2:
    # 
    #    _flagW setFlagTexture "\ca\misc\data\usa_vlajka.paa";
    # 
    # ====== Example 3:
    # 
    #    flag1 setFlagTexture "\A3\Data_F\Flags\Flag_red_CO.paa";
    # 
    def setFlagTexture _obj, _args
      "_obj setFlagTexture _args;" 
    end

    # Changes the fog smoothly over the the given TransitionTime (in seconds).
    # 
    # ==== Description
    # 
    # A time of zero means there will be an immediate change.
    # 
    # A fog intensity of zero is minimum fog and a fog level of one is maximum fog
    #  
    # ==== Syntax
    #
    #      time setFog fog
    #
    # ==== Parameters
    # 
    # *    +time+ - Number  
    # *    +fog+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Each client and the server can have differing fog values.
    # 
    # ==== See Also
    # 
    # #setFog array, #fog, #fogParams, #fogForecast, #nextWeatherChange
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFog
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    15 setFog 0.5;
    # 
    def setFog _obj, _args
      "_obj setFog _args;" 
    end

    # Changes the fog smoothly over the given time (in seconds).
    # 
    # ==== Description
    # 
    # A time of zero means there will be an immediate change.
    # 
    # A fog value of zero is minimum fog and a fog value of one is maximum fog
    #  
    # ==== Syntax
    #
    #      time setFog [fogValue, fogDecay, fogBase]
    #
    # ==== Parameters
    # 
    # *    +time+ - Number  
    # *    +[fogValue, fogDecay, fogBase]+ - Array  
    # *    +fogValue+ - Number - value for fog at base level  
    # *    +fogDecay+ - Number - decay of fog density with altitude  
    # *    +fogBase+ - Number - base altitude of fog (in meters)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #fogParams, #fog, #setFog, #fogForecast
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFog
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    0 setFog [1, 0.01, 0];
    # 
    def setFog _obj, _args
      "_obj setFog _args;" 
    end

    # Set group formation heading.
    # 
    # ==== Description
    # 
    # Accepted heading range is 0 to 360.
    # 
    # Formation is facing this direction unless enemy is seen.
    # 
    # When group is moving, this value is overriden by movement direction
    #  
    # ==== Syntax
    #
    #      group setFormDir heading
    #
    # ==== Parameters
    # 
    # *    +group+ - Object or Group  
    # *    +heading+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setDir
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFormDir
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _group1 setFormDir 180
    # 
    # ====== Example 2:
    # 
    #    //center the main turret
    #    (group BIS_Crew1) setFormDir (getDir BIS_Armor);
    #    (group BIS_Crew2) setFormDir (getDir BIS_Armor);
    # 
    def setFormDir _obj, _args
      "_obj setFormDir _args;" 
    end

    # Set group formation.
    # 
    # ==== Description
    # 
    # Formation is one of:
    # 
    # "COLUMN"
    # 
    # "STAG COLUMN"
    # 
    # "WEDGE"
    # 
    # "ECH LEFT"
    # 
    # "ECH RIGHT"
    # 
    # "VEE"
    # 
    # "LINE"
    # 
    # "FILE" (ArmA)
    # 
    # "DIAMOND" (ArmA)
    #  
    # ==== Syntax
    #
    #      group setFormation formation
    #
    # ==== Parameters
    # 
    # *    +group+ - Object or Group  
    # *    +formation+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #formations description, #formation
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFormation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _groupOne setFormation "LINE"
    # 
    def setFormation _obj, _args
      "_obj setFormation _args;" 
    end

    # Set the current task of the formation member
    # 
    # ==== Syntax
    #
    #      object setFormationTask task
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +task+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #formationTask
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFormationTask
    #
    # ==== Examples
    # 
    def setFormationTask _obj, _args
      "_obj setFormationTask _args;" 
    end

    # Sets how friendly side1 is with side2.
    # 
    # ==== Description
    # 
    # For a value smaller than 0.
    # 
    # 6 it results in being enemy, otherwise it's friendly.
    # 
    # Intended to be used on mission start.
    # 
    # Changing value during mission can cause unexpected errors in AI behavior
    #  
    # ==== Syntax
    #
    #      side1 setFriend [side2 , value]
    #
    # ==== Parameters
    # 
    # *    +side1+ - Side  
    # *    +[side2 , value]+ - Array  
    # *    +side2+ - Side  
    # *    +value+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Have effect only when called on server
    # 
    # ==== See Also
    # 
    # #getFriend
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFriend
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    WEST setFriend [RESISTANCE, 0];
    # 
    def setFriend _obj, _args
      "_obj setFriend _args;" 
    end

    # Set if given team member was inserted directly from editor
    # 
    # ==== Syntax
    #
    #      teamMember setFromEditor fromEditor
    #
    # ==== Parameters
    # 
    # *    +teamMember+ - Team Member  
    # *    +fromEditor+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFromEditor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _teamMember setFromEditor true
    # 
    def setFromEditor _obj, _args
      "_obj setFromEditor _args;" 
    end

    # Set fuel percentage from 0 (empty) to 1 (full).
    # 
    # ==== Description
    # 
    # The vehicle must be local to the computer where command is executed
    #  
    # ==== Syntax
    #
    #      vehicle setFuel amount
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +amount+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setHit, #setAmmo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFuel
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _jeepOne setFuel 0
    # 
    def setFuel _obj, _args
      "_obj setFuel _args;" 
    end

    # Set fuel amount in cargo space of refuel vehicle from empty (0) to full (1)
    # 
    # ==== Description
    # 
    # Note the carrying capacity of each side's refuel trucks differ
    #  
    # ==== Syntax
    #
    #      vehicle setFuelCargo amount
    #
    # ==== Parameters
    # 
    # *    +vehicle + - Object  
    # *    +amount + - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getFuelCargo, #setAmmoCargo, #setRepairCargo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setFuelCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _refuelTruckOne setFuelCargo 0
    # 
    def setFuelCargo _obj, _args
      "_obj setFuelCargo _args;" 
    end

    # Set group icons properties
    # 
    # ==== Syntax
    #
    #      group setGroupIcon properties
    #
    # ==== Parameters
    # 
    # *    +group+ - Group -  
    # *    +properties+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addGroupIcon, #clearGroupIcons, #getGroupIcon, #getGroupIconParams, #groupIconSelectable, #groupIconsVisible, #onGroupIconClick, #removeGroupIcon, #setGroupIconParams, #setGroupIconsSelectable, #setGroupIconsVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setGroupIcon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _target setGroupIcon [_icon,"hc_selectedEnemy"];
    #    _target setGroupIcon [_icon,"flag"];
    #    _grp setGroupIcon [_iconsize,_iconsizeclass,_offset];
    #    _grp setGroupIcon [_newid,_icon,_offset];
    #    _grp setGroupIcon [_icon,_iconclass];
    # 
    def setGroupIcon _obj, _args
      "_obj setGroupIcon _args;" 
    end

    # Set group icons parameters.
    # 
    # ==== Description
    # 
    # [color,string,float,bool]
    #  
    # ==== Syntax
    #
    #      group setGroupIconParams properties
    #
    # ==== Parameters
    # 
    # *    +group+ - Group -  
    # *    +properties+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addGroupIcon, #clearGroupIcons, #getGroupIcon, #getGroupIconParams, #groupIconSelectable, #groupIconsVisible, #onGroupIconClick, #removeGroupIcon, #setGroupIcon, #setGroupIconsSelectable, #setGroupIconsVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setGroupIconParams
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _icon setGroupIconParams [_color,_text,_scale,_visible];
    #    _grp setGroupIconParams [[0,0,0,0],"",1,false];
    # 
    def setGroupIconParams _obj, _args
      "_obj setGroupIconParams _args;" 
    end

    # Sets if group icons raises onclick and onover events
    # 
    # ==== Syntax
    #
    #      setGroupIconsSelectable bool
    #
    # ==== Parameters
    # 
    # *    +bool+ - Boolean -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addGroupIcon, #clearGroupIcons, #getGroupIcon, #getGroupIconParams, #groupIconSelectable, #groupIconsVisible, #onGroupIconClick, #removeGroupIcon, #setGroupIcon, #setGroupIconParams, #setGroupIconsVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setGroupIconsSelectable
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setGroupIconsSelectable true;
    # 
    def setGroupIconsSelectable _args
      "setGroupIconsSelectable _args;" 
    end

    # Sets if group icons are visible
    # 
    # ==== Syntax
    #
    #      setGroupIconsVisible array
    #
    # ==== Parameters
    # 
    # *    +array+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addGroupIcon, #clearGroupIcons, #getGroupIcon, #getGroupIconParams, #groupIconSelectable, #groupIconsVisible, #onGroupIconClick, #removeGroupIcon, #setGroupIcon, #setGroupIconParams, #setGroupIconsSelectable
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setGroupIconsVisible
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setGroupIconsVisible [true,true];//[show markers on map, show markers on player hud]
    #    setGroupIconsVisible [true,false]; //Show only 2D
    #    setGroupIconsVisible [false,false];
    # 
    def setGroupIconsVisible _args
      "setGroupIconsVisible _args;" 
    end

    # Set a group's identity
    # 
    # ==== Syntax
    #
    #      group setGroupId [nameFomat, nameParam1, ...]
    #
    # ==== Parameters
    # 
    # *    +group+ - Object or Group  
    # *    +[nameFomat, nameParam1 ...]+ - Array of strings.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #groupID, #group
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setGroupId
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    OFP:_group1 setGroupId ["Delta","GroupColor4"]
    # 
    # ====== Example 2:
    # 
    #    ArmA / ArmA 2:_group1 setGroupId ["Assault Squad"]
    # 
    def setGroupId _obj, _args
      "_obj setGroupId _args;" 
    end

    # Changes the gusts value smoothly during the given time (in seconds).
    # 
    # ==== Description
    # 
    # A time of zero means there will be an immediate change.
    # 
    # Value is 0 to 1
    #  
    # ==== Syntax
    #
    #      time setGusts value
    #
    # ==== Parameters
    # 
    # *    +time+ - Number  
    # *    +value+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #gusts, #wind, #setWind
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setGusts
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    60 setGusts 0.75;
    # 
    def setGusts _obj, _args
      "_obj setGusts _args;" 
    end

    # Set min/max movement borders displayed in HUD gauges.
    # 
    # ==== Description
    # 
    # Use -1 to skip some value
    #  
    # ==== Syntax
    #
    #      setHUDMovementLevels [minSpeed, maxSpeed, minAlt, maxAlt, minDir, maxDir, target or position]
    #
    # ==== Parameters
    # 
    # *    +minSpeed+ - Number - Units: m/s  
    # *    +maxSpeed+ - Number - Units: m/s  
    # *    +minAlt+ - Number - Units: m  
    # *    +maxAlt+ - Number - Units: m  
    # *    +minDir+ - Number - Units: deg  
    # *    +maxDir+ - Number - Units: deg  
    # *    +position+ - Array - [x,y,z]  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setHUDMovementLevels
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setHUDMovementLevels [20,30,-1,-1,0.23,2.1]
    # 
    def setHUDMovementLevels _args
      "setHUDMovementLevels _args;" 
    end

    # Sets the data for hiding.
    # 
    # ==== Description
    # 
    # objectWhereHide can be taken using findCover.
    # 
    # hidePosition can be taken using getHideFrom.
    # 
    # Command is not functional in ArmA 2.
    # 
    # This command is part of getHideFrom, findCover, setHideBehind non-functional trio
    #  
    # ==== Syntax
    #
    #      object setHideBehind [objectWhereHide, hidePosition]
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +[objectWhereHide, hidePosition]+ - Array  
    # *    +objectWhereHide+ - Object  
    # *    +hidePosition+ - Array - format getHideFrom  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getHideFrom, #findCover, #isHidden
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setHideBehind
    #
    # ==== Examples
    # 
    def setHideBehind _obj, _args
      "_obj setHideBehind _args;" 
    end

    # Damage / repair part of object.
    # 
    # ==== Description
    # 
    # The object must be local to the computer where command is executed.
    # 
    # Damage 0 means fully functional, damage 1 means completely destroyed / dead.
    # 
    # Note: Some part names are in Czech; see translation table
    #  
    # ==== Syntax
    #
    #      object setHit [part, damage]
    #
    # ==== Parameters
    # 
    # *    +object+ - Object -  
    # *    +part+ - String - Name of the part (selection name).  
    # *    +damage+ - Number -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setDamage, #setFuel, #setAmmo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setHit
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    vehicle player setHit ["motor", 1]
    # 
    # ====== Example 2:
    # 
    #    vehicle player setHit ["mala vrtule", 0.95]
    # 
    # ====== Example 3:
    # 
    #    if (local _heli) then {
    #    	_heli setHit ["velka vrtule", 0];
    #    } else {
    #    	hint "Vehicle " + str _heli + " must be local to this machine to do that!";
    #    };
    # 
    def setHit _obj, _args
      "_obj setHit _args;" 
    end

    # Set the current level of damage for a specific Hit Point (specified by its config class).
    # 
    # ==== Description
    # 
    # 0: no damage
    # 
    # 1: full damage
    #  
    # ==== Syntax
    #
    #      vehicle setHitPointDamage [hitPointName, damage]
    #
    # ==== Parameters
    # 
    # *    +vehicle + - Object - vehicle to be damaged  
    # *    +hitPointName+ - String - name of the Hit Point class  
    # *    +damage+ - String - level of damage  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getHitPointDamage, #setHit, Common TKOH Hit Points
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setHitPointDamage
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (vehicle player) setHitPointDamage ["hitEngine2", 1.0];
    # 
    # ====== Example 2:
    # 
    #    player setHitPointDamage ["hitHead", 0.5];
    #    player setHitPointDamage ["hitBody", 0.5];
    #    player setHitPointDamage ["hitHands", 0.5];
    #    player setHitPointDamage ["hitLegs", 0.5];
    # 
    def setHitPointDamage _obj, _args
      "_obj setHitPointDamage _args;" 
    end

    # Sets coef used to shift horizon position based on camera height (use 0 to disable shifting)
    # 
    # ==== Syntax
    #
    #      setHorizonParallaxCoef coef
    #
    # ==== Parameters
    # 
    # *    +coef+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setHorizonParallaxCoef
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setHorizonParallaxCoef _args
      "setHorizonParallaxCoef _args;" 
    end

    # Set identity of person.
    # 
    # ==== Description
    # 
    # Identities are defined in Description.
    # 
    # ext of the mission or campaign.
    # 
    # For a list of available faces, glasses and speakers check Category:CfgIdentities
    #  
    # ==== Syntax
    #
    #      person setIdentity identity
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +identity+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setIdentity
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 setIdentity "MyLittleSoldier";
    # 
    def setIdentity _obj, _args
      "_obj setIdentity _args;" 
    end

    # Sets the importance value of location
    # 
    # ==== Syntax
    #
    #      location setImportance value
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    # *    +value+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #importance
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setImportance
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myLocation setImportance 2
    # 
    def setImportance _obj, _args
      "_obj setImportance _args;" 
    end

    # Set the leader of given team
    # 
    # ==== Syntax
    #
    #      team setLeader leader
    #
    # ==== Parameters
    # 
    # *    +team+ - Team Member  
    # *    +leader+ - Team Member  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #selectLeader, #formationLeader, #formLeader, #leader, #isFormationLeader
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setLeader
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def setLeader _obj, _args
      "_obj setLeader _args;" 
    end

    # Set ambient color of light
    # 
    # ==== Syntax
    #
    #      light setLightAmbient [r, g, b]
    #
    # ==== Parameters
    # 
    # *    +light+ - Object  
    # *    +[r, g, b]+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setLightColor, #setLightBrightness, #lightAttachObject, #lightDetachObject, #setLightIntensity, #setLightAttenuation, #setLightUseFlare, #setLightFlareSize, #setLightFlareMaxDistance, #setLightDayLight
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setLightAmbient
    #
    # ==== Examples
    # 
    def setLightAmbient _obj, _args
      "_obj setLightAmbient _args;" 
    end

    # Sets attenuation of light
    # 
    # ==== Syntax
    #
    #      light setLightAttenuation [start, constant, linear, quadratic]
    #
    # ==== Parameters
    # 
    # *    +light+ - Object  
    # *    +[start, constant, linear, quadratic]+ - Array  
    # *    +start+ - Number  
    # *    +constant+ - Number  
    # *    +linear+ - Number  
    # *    +quadratic+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setLightAmbient, #setLightColor, #lightAttachObject, #lightDetachObject, #setLightBrightness, #setLightIntensity, #setLightUseFlare, #setLightFlareSize, #setLightFlareMaxDistance, #setLightDayLight
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setLightAttenuation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setLightAttenuation _obj, _args
      "_obj setLightAttenuation _args;" 
    end

    # Set brightness of light
    # 
    # ==== Syntax
    #
    #      light setLightBrightness brightness
    #
    # ==== Parameters
    # 
    # *    +light+ - Object  
    # *    +brightness+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setLightAmbient, #setLightColor, #lightAttachObject, #lightDetachObject, #setLightIntensity, #setLightAttenuation, #setLightUseFlare, #setLightFlareSize, #setLightFlareMaxDistance, #setLightDayLight
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setLightBrightness
    #
    # ==== Examples
    # 
    def setLightBrightness _obj, _args
      "_obj setLightBrightness _args;" 
    end

    # Set diffuse color of light
    # 
    # ==== Syntax
    #
    #      light setLightColor [r, g, b]
    #
    # ==== Parameters
    # 
    # *    +light+ - Object  
    # *    +[r, g, b]+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setLightAmbient, #setLightBrightness, #lightAttachObject, #lightDetachObject, #setLightIntensity, #setLightAttenuation, #setLightUseFlare, #setLightFlareSize, #setLightFlareMaxDistance, #setLightDayLight
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setLightColor
    #
    # ==== Examples
    # 
    def setLightColor _obj, _args
      "_obj setLightColor _args;" 
    end

    # Sets if light can be used during the day
    # 
    # ==== Syntax
    #
    #      light setLightDayLight bool
    #
    # ==== Parameters
    # 
    # *    +light+ - Object  
    # *    +bool+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setLightAmbient, #setLightColor, #lightAttachObject, #lightDetachObject, #setLightIntensity, #setLightAttenuation, #setLightUseFlare, #setLightFlareSize, #setLightFlareMaxDistance, #setLightBrightness
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setLightDayLight
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setLightDayLight _obj, _args
      "_obj setLightDayLight _args;" 
    end

    # Sets max distance where the flare is visible
    # 
    # ==== Syntax
    #
    #      light setLightFlareMaxDistance distance
    #
    # ==== Parameters
    # 
    # *    +light+ - Object  
    # *    +distance+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setLightAmbient, #setLightColor, #lightAttachObject, #lightDetachObject, #setLightIntensity, #setLightAttenuation, #setLightUseFlare, #setLightFlareSize, #setLightBrightness, #setLightDayLight
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setLightFlareMaxDistance
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setLightFlareMaxDistance _obj, _args
      "_obj setLightFlareMaxDistance _args;" 
    end

    # Sets relative size of the flare for the light
    # 
    # ==== Syntax
    #
    #      light setLightFlareSize size
    #
    # ==== Parameters
    # 
    # *    +light+ - Object  
    # *    +size+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setLightAmbient, #setLightColor, #lightAttachObject, #lightDetachObject, #setLightIntensity, #setLightAttenuation, #setLightUseFlare, #setLightBrightness, #setLightFlareMaxDistance, #setLightDayLight
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setLightFlareSize
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setLightFlareSize _obj, _args
      "_obj setLightFlareSize _args;" 
    end

    # Sets intensity of light
    # 
    # ==== Syntax
    #
    #      light setLightIntensity value
    #
    # ==== Parameters
    # 
    # *    +light+ - Object  
    # *    +value+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setLightAmbient, #setLightColor, #lightAttachObject, #lightDetachObject, #setLightBrightness, #setLightAttenuation, #setLightUseFlare, #setLightFlareSize, #setLightFlareMaxDistance, #setLightDayLight
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setLightIntensity
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setLightIntensity _obj, _args
      "_obj setLightIntensity _args;" 
    end

    # Sets if light has flare
    # 
    # ==== Syntax
    #
    #      light setLightUseFlare bool
    #
    # ==== Parameters
    # 
    # *    +light+ - Object  
    # *    +bool+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setLightAmbient, #setLightColor, #lightAttachObject, #lightDetachObject, #setLightIntensity, #setLightAttenuation, #setLightBrightness, #setLightFlareSize, #setLightFlareMaxDistance, #setLightDayLight
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setLightUseFlare
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setLightUseFlare _obj, _args
      "_obj setLightUseFlare _args;" 
    end

    # Changes the lightnings value smoothly during the given time (in seconds).
    # 
    # ==== Description
    # 
    # A time of zero means there will be an immediate change
    #  
    # ==== Syntax
    #
    #      time setLightnings value
    #
    # ==== Parameters
    # 
    # *    +time+ - Number  
    # *    +value+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lightnings
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setLightnings
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    1800 setLightnings 0.7;
    # 
    def setLightnings _obj, _args
      "_obj setLightnings _args;" 
    end

    # Sets parameters for local wind emiters (like helicopters).
    # 
    # ==== Description
    # 
    # Default [1.
    # 
    # 0, 1.
    # 
    # 0]
    #  
    # ==== Syntax
    #
    #      setLocalWindParams [strength, diameter]
    #
    # ==== Parameters
    # 
    # *    +strength+ - Number  
    # *    +diameter+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setWind, #wind, #setWindStr, #setWindDir, #setWindForce, #windDir, #windStr, #gusts, #setGusts
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setLocalWindParams
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setLocalWindParams _args
      "setLocalWindParams _args;" 
    end

    # Sets the marker alpha.
    # 
    # ==== Description
    # 
    # The marker is modified on all computers in a network session.
    # 
    # When alpha equal one, the marker is visible, but if alpha equal zero, then the marker is invisible.
    # 
    # Alpha can be numbers and fractions
    #  
    # ==== Syntax
    #
    #      marker setMarkerAlpha alpha
    #
    # ==== Parameters
    # 
    # *    +marker+ - String -  
    # *    +alpha+ - Number -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setMarkerAlphaLocal, #setMarkerBrush, #setMarkerColor, #setMarkerDir, #setMarkerPos, #setMarkerShape, #setMarkerSize, #setMarkerText, #setMarkerType, #createMarker
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerAlpha
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     "my_marker" setMarkerAlpha 0.5; 
    # 
    # ====== Example 2:
    # 
    #     "enemy_convoy_marker" setMarkerAlpha 0; 
    # 
    def setMarkerAlpha _obj, _args
      "_obj setMarkerAlpha _args;" 
    end

    # Sets the marker alpha.
    # 
    # ==== Description
    # 
    # The marker is only modified on the computer where the command is called.
    # 
    # When alpha equal one, the marker is visible, but if alpha equal zero, then the marker is invisible.
    # 
    # Alpha can be numbers and fractions
    #  
    # ==== Syntax
    #
    #      marker setMarkerAlphaLocal alpha
    #
    # ==== Parameters
    # 
    # *    +marker+ - String -  
    # *    +alpha+ - Number -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setMarkerAlpha, #setMarkerBrush, #setMarkerColor, #setMarkerDir, #setMarkerPos, #setMarkerShape, #setMarkerSize, #setMarkerText, #setMarkerType, #createMarker
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerAlphaLocal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     "my_marker" setMarkerAlphaLocal 0.5; 
    # 
    # ====== Example 2:
    # 
    #     "enemy_convoy_marker" setMarkerAlphaLocal 0; 
    # 
    def setMarkerAlphaLocal _obj, _args
      "_obj setMarkerAlphaLocal _args;" 
    end

    # Selects the fill texture for the marker ("RECTANGLE" or "ELLIPSE").
    # 
    # ==== Description
    # 
    # Brush is the name of the subclass in CfgMarkerBrushes.
    # 
    # brush can be:
    # 
    # "Solid"
    # 
    # "Horizontal"
    # 
    # "Vertical"
    # 
    # "Grid"
    # 
    # "FDiagonal"
    # 
    # "BDiagonal"
    # 
    # "DiagGrid"
    # 
    # "Cross"
    # 
    # "Border" (ArmA2 only)
    # 
    # "SolidBorder" (OA only)
    #  
    # ==== Syntax
    #
    #      markerName setMarkerBrush brush
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +brush+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerBrush
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "Marker1" setMarkerBrush "DIAGGRID"
    # 
    def setMarkerBrush _obj, _args
      "_obj setMarkerBrush _args;" 
    end

    # Selects the fill texture for the marker ("RECTANGLE" or "ELLIPSE").
    # 
    # ==== Description
    # 
    # Brush is the name of the subclass in CfgMarkerBrushes.
    # 
    # brush can be:
    # 
    # "Solid"
    # 
    # "Horizontal"
    # 
    # "Vertical"
    # 
    # "Grid"
    # 
    # "FDiagonal"
    # 
    # "BDiagonal"
    # 
    # "DiagGrid"
    # 
    # "Cross"
    # 
    # "Border" (ArmA2 only)
    # 
    # "SolidBorder" (OA only)
    #  
    # ==== Syntax
    #
    #      markerName setMarkerBrushLocal brush
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +brush+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerBrushLocal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "Marker1" setMarkerBrushLocal "DiagGrid"
    # 
    def setMarkerBrushLocal _obj, _args
      "_obj setMarkerBrushLocal _args;" 
    end

    # Set marker color.
    # 
    # ==== Description
    # 
    # Color is one of:
    # 
    # "Default"
    # 
    # "ColorBlack"
    # 
    # "ColorGrey"
    # 
    # "ColorRed"
    # 
    # "ColorRedAlpha" (Arma 2 only)
    # 
    # "ColorGreen"
    # 
    # "ColorGreenAlpha" (Arma 2 only)
    # 
    # "ColorBlue"
    # 
    # "ColorYellow"
    # 
    # "ColorOrange"
    # 
    # "ColorWhite"
    # 
    # "ColorPink"
    # 
    # "ColorBrown"
    # 
    # "ColorKhaki"
    # 
    # "ColorWEST"
    # 
    # "ColorEAST"
    # 
    # "ColorGUER"
    # 
    # "ColorCIV"
    # 
    # "ColorUNKNOWN"
    # 
    # "Color1_FD_F" (Light red)
    # 
    # "Color2_FD_F" (Light khaki)
    # 
    # "Color3_FD_F" (Light orange)
    # 
    # "Color4_FD_F" (Light blue)
    #  
    # ==== Syntax
    #
    #      markerName setMarkerColor color
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +color+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setMarkerBrush, #createMarker, #setMarkerDir, #setMarkerPos, #setMarkerShape, #setMarkerSize, #setMarkerText, #setMarkerType, #setMarkerAlpha
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerColor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "MarkerOne" setMarkerColor "ColorBlack"
    # 
    def setMarkerColor _obj, _args
      "_obj setMarkerColor _args;" 
    end

    # Set marker color.
    # 
    # ==== Description
    # 
    # Color is one of:
    # 
    # "Default"
    # 
    # "ColorBlack"
    # 
    # "ColorRed"
    # 
    # "ColorRedAlpha"
    # 
    # "ColorGreen"
    # 
    # "ColorGreenAlpha"
    # 
    # "ColorBlue"
    # 
    # "ColorYellow"
    # 
    # "ColorOrange" (Arma 2 only)
    # 
    # "ColorWhite"
    #  
    # ==== Syntax
    #
    #      markerName setMarkerColorLocal color
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +color+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setMarkerColor
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerColorLocal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "MarkerOne" setMarkerColorLocal "ColorBlack"
    # 
    def setMarkerColorLocal _obj, _args
      "_obj setMarkerColorLocal _args;" 
    end

    # Sets the orientation of the marker.
    # 
    # ==== Description
    # 
    # Angle is in degrees
    #  
    # ==== Syntax
    #
    #      markerName setMarkerDir angle
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +angle+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #markerDir, #setMarkerBrush, #createMarker, #setMarkerColor, #setMarkerPos, #setMarkerShape, #setMarkerSize, #setMarkerText, #setMarkerType, #setMarkerAlpha
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerDir
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "Marker1" setMarkerDir 90
    # 
    def setMarkerDir _obj, _args
      "_obj setMarkerDir _args;" 
    end

    # Sets the orientation of the marker.
    # 
    # ==== Description
    # 
    # Angle is in degrees
    #  
    # ==== Syntax
    #
    #      markerName setMarkerDirLocal angle
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +angle+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerDirLocal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "Marker1" setMarkerDirLocal 90
    # 
    def setMarkerDirLocal _obj, _args
      "_obj setMarkerDirLocal _args;" 
    end

    # Moves the marker.
    # 
    # ==== Description
    # 
    # Pos format is Position2D
    #  
    # ==== Syntax
    #
    #      markerName setMarkerPos pos
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +pos+ - Array - format Position2D  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setMarkerBrush, #setMarkerColor, #setMarkerDir, #createMarker, #setMarkerShape, #setMarkerSize, #setMarkerText, #setMarkerType, #setMarkerAlpha
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerPos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "MarkerOne" setMarkerPos getMarkerPos "MarkerTwo"
    # 
    def setMarkerPos _obj, _args
      "_obj setMarkerPos _args;" 
    end

    # Moves the marker.
    # 
    # ==== Description
    # 
    # Pos format is Position2D
    #  
    # ==== Syntax
    #
    #      markerName setMarkerPosLocal pos
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +pos+ - Array - format Position2D  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerPosLocal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "MarkerOne" setMarkerPosLocal getMarkerPos "MarkerTwo"
    # 
    def setMarkerPosLocal _obj, _args
      "_obj setMarkerPosLocal _args;" 
    end

    # Selects the shape (type) of the marker.
    # 
    # ==== Description
    # 
    # Shape can be "ICON", "RECTANGLE" or "ELLIPSE"
    #  
    # ==== Syntax
    #
    #      markerName setMarkerShape shape
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +shape+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setMarkerBrush, #setMarkerColor, #setMarkerDir, #setMarkerPos, #createMarker, #setMarkerSize, #setMarkerText, #setMarkerType, #setMarkerAlpha
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerShape
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "Marker1" setMarkerShape "RECTANGLE"
    # 
    def setMarkerShape _obj, _args
      "_obj setMarkerShape _args;" 
    end

    # Selects the shape (type) of the marker.
    # 
    # ==== Description
    # 
    # Shape can be "ICON", "RECTANGLE" or "ELLIPSE"
    #  
    # ==== Syntax
    #
    #      markerName setMarkerShapeLocal shape
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +shape+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerShapeLocal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "Marker1" setMarkerShapeLocal "RECTANGLE"
    # 
    def setMarkerShapeLocal _obj, _args
      "_obj setMarkerShapeLocal _args;" 
    end

    # Set marker size.
    # 
    # ==== Description
    # 
    # Size is in format [a-axis, b-axis]
    #  
    # ==== Syntax
    #
    #      markerName setMarkerSize [a-axis, b-axis]
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +[aaxis, baxis]+ - Array  
    # *    +aaxis+ - Number. width of marker  
    # *    +baxis+ - Number. height of marker  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getMarkerSize, #setMarkerBrush, #setMarkerColor, #setMarkerDir, #setMarkerPos, #setMarkerShape, #createMarker, #setMarkerText, #setMarkerType, #setMarkerAlpha
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerSize
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "MarkerOne" setMarkerSize [100, 200]
    # 
    def setMarkerSize _obj, _args
      "_obj setMarkerSize _args;" 
    end

    # Set marker size.
    # 
    # ==== Description
    # 
    # Size is in format [a-axis, b-axis]
    #  
    # ==== Syntax
    #
    #      markerName setMarkerSizeLocal [a-axis, b-axis]
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +[aaxis, baxis]+ - Array  
    # *    +aaxis+ - Numbers. width of marker  
    # *    +baxis+ - Numbers. height of marker  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerSizeLocal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "MarkerOne" setMarkerSizeLocal [100, 200]
    # 
    def setMarkerSizeLocal _obj, _args
      "_obj setMarkerSizeLocal _args;" 
    end

    # Sets the text label of an existing marker
    # 
    # ==== Syntax
    #
    #      markerName setMarkerText text
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # setMarkerText is global.  All other setMarker commands seem to be Local.
    # 
    # ==== See Also
    # 
    # #setMarkerBrush, #setMarkerColor, #setMarkerDir, #setMarkerPos, #setMarkerShape, #setMarkerSize, #setMarkerType, #setMarkerAlpha
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "Marker1" setMarkerText "You are here."
    # 
    def setMarkerText _obj, _args
      "_obj setMarkerText _args;" 
    end

    # Sets the text label of an existing marker
    # 
    # ==== Syntax
    #
    #      markerName setMarkerTextLocal text
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # setMarkerTextLocal is Local.
    # 
    # ==== See Also
    # 
    # #setMarkerBrush, #setMarkerColor, #setMarkerDir, #setMarkerPos, #setMarkerShape, #setMarkerSize, #setMarkerType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerTextLocal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "Marker1" setMarkerTextLocal "You are here."
    # 
    def setMarkerTextLocal _obj, _args
      "_obj setMarkerTextLocal _args;" 
    end

    # Set marker type.
    # 
    # ==== Description
    # 
    # See cfgMarkers for a list of standard markers
    #  
    # ==== Syntax
    #
    #      markerName setMarkerType type
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +type+ - String. See cfgMarkers.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #cfgMarkers, #setMarkerTypeLocal, #markerType, #setMarkerAlphaLocal, #setMarkerBrush, #setMarkerColor, #setMarkerDir, #setMarkerPos, #setMarkerShape, #setMarkerSize, #setMarkerText, #createMarker
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "MarkerOne" setMarkerType "Warning"
    # 
    def setMarkerType _obj, _args
      "_obj setMarkerType _args;" 
    end

    # Set marker type.
    # 
    # ==== Description
    # 
    # See cfgMarkers for a list of standard markers
    #  
    # ==== Syntax
    #
    #      markerName setMarkerTypeLocal type
    #
    # ==== Parameters
    # 
    # *    +markerName+ - String  
    # *    +type+ - String. See cfgMarkers.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #cfgMarkers, #setMarkerType, #markerType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMarkerTypeLocal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "MarkerOne" setMarkerTypeLocal "Warning"
    # 
    def setMarkerTypeLocal _obj, _args
      "_obj setMarkerTypeLocal _args;" 
    end

    # Changes the mass of an object smoothly during the given time (in seconds).
    # 
    # ==== Description
    # 
    # A time of zero (or using the alternative syntax) means an immediate change
    #  
    # ==== Syntax
    #
    #      myObject setMass mass
    #
    # ==== Parameters
    # 
    # *    +myObject+ - Object  
    # *    +[mass, time]+ - Array  
    # *    +mass+ - Number  
    # *    +time+ - Number  
    # *    +myObject+ - Object  
    # *    +mass+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getMass, #setCenterOfMass, #getCenterOfMass
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMass
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myObject setMass [10,0.5]
    # 
    # ====== Example 2:
    # 
    #    myObject setMass 10
    # 
    def setMass _obj, _args
      "_obj setMass _args;" 
    end

    # Set person's facial expression.
    # 
    # ==== Description
    # 
    # Following mimic values are recognized:
    # 
    # "Default"
    # 
    # "Normal"
    # 
    # "Smile"
    # 
    # "Hurt"
    # 
    # "Ironic"
    # 
    # "Sad"
    # 
    # "Cynic"
    # 
    # "Surprised"
    # 
    # "Agresive"
    # 
    # "Angry"
    # 
    # Since Arma 2 OA 1.
    # 
    # 6*, these values are used :
    # 
    # "neutral"
    # 
    # "dead"
    # 
    # "danger"
    # 
    # "hurt"
    # 
    # "aware"
    # 
    # "safe"
    # 
    # "combat"
    #  
    # ==== Syntax
    #
    #      person setMimic mimic
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +mimic+ - String. as above  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setIdentity, #setFace, #setFaceAnimation
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMimic
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldier1 setmimic "angry"
    # 
    def setMimic _obj, _args
      "_obj setMimic _args;" 
    end

    # Move (UI) mouse pointer to specified position of the screen.
    # 
    # ==== Description
    # 
    # Values of x and y can be in the range from 0 to 1
    #  
    # ==== Syntax
    #
    #      setMousePosition [x, y]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMousePosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setMousePosition [0.5, 0.5]
    # 
    def setMousePosition _args
      "setMousePosition _args;" 
    end

    # Defines the music track played on activation.
    # 
    # ==== Description
    # 
    # Track is a subclass name of CfgMusic.
    # 
    # In addition, "$NONE$" (no change) or "$STOP$" (stops the current music track)
    #  
    # ==== Syntax
    #
    #      waypoint setMusicEffect track
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    # *    +track+ - String  
    # *    +waypoint+ - Array - format Waypoint  
    # *    +track+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createTrigger
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMusicEffect
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _trigger setMusicEffect "Track1"
    # 
    # ====== Example 2:
    # 
    #    [_group1,1] setMusicEffect "$STOP$"
    # 
    def setMusicEffect _obj, _args
      "_obj setMusicEffect _args;" 
    end

    # Sets given music track event handler.
    # 
    # ==== Description
    # 
    # Will overwrite other music event handlers.
    # 
    # Use addMusicEventHandler if you want to stack them
    #  
    # ==== Syntax
    #
    #      setMusicEventHandler [type, function]
    #
    # ==== Parameters
    # 
    # *    +type+ - String - "MusicStart" or "MusicStop"  
    # *    +function+ - String - script to be executed. Passes params array 0: class name of the sound in CfgMusic, 1: event handler id  
    #
    # ==== Returns
    #
    #      Number - id of the event handler
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMusicEventHandler, #removeMusicEventHandler, #playMusic, #removeAllMusicEventHandlers
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setMusicEventHandler
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _ehID = setMusicEventHandler ["MusicStart", "hint str _this"];
    # 
    # ====== Example 2:
    # 
    #    _ehID = setMusicEventHandler ["MusicStop", "hint str _this"];
    # 
    def setMusicEventHandler _args
      "setMusicEventHandler _args;" 
    end

    # Sets the name of a location or a person.
    # 
    # ==== Description
    # 
    # In Arma 3 this can be used to set name of a person but only in single player
    #  
    # ==== Syntax
    #
    #      unit setName [name, first name, last name]
    #
    # ==== Parameters
    # 
    # *    +object+ - Location or Object  
    # *    +name+ - String  
    # *    +unit+ - Object  
    # *    +name+ - String  
    # *    +first name+ - String  
    # *    +last name+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #name
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setName
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myLocation setName "My Location Name";
    # 
    # ====== Example 2:
    # 
    #    player setName "New Name";
    # 
    # ====== Example 3:
    # 
    #    player setName ["Ben Kerry","Ben","Kerry"];
    # 
    def setName _obj, _args
      "_obj setName _args;" 
    end

    # Sets the nameSound of a person
    # 
    # ==== Syntax
    #
    #      person setNameSound name
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setNameSound
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    unit1 setNameSound "dixon";
    # 
    # ====== Example 2:
    # 
    #    unit1 setNameSound ""; // will reset to default behaviour
    # 
    def setNameSound _obj, _args
      "_obj setNameSound _args;" 
    end

    # Set object arguments in mission editor
    # 
    # ==== Syntax
    #
    #      map setObjectArguments [object,[name1,value1,...]]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[name1,value1,...]]+ - Array -  
    #
    # ==== Returns
    #
    #      Any
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setObjectArguments
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def setObjectArguments _obj, _args
      "_obj setObjectArguments _args;" 
    end

    # Sets material of object selection.
    # 
    # ==== Description
    # 
    # The selection number is defined through the  hiddenselection[]={} array in the vehicle's config (starting with 0)
    #  
    # ==== Syntax
    #
    #      obj setObjectMaterial [selectionNumber, material]
    #
    # ==== Parameters
    # 
    # *    +obj+ - Object  
    # *    +[selectionNumber, material]+ - Array  
    # *    +selectionNumber+ - Number  
    # *    +material+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setObjectTexture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setObjectMaterial
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    car setObjectMaterial [0,"A3\Structures_F\Data\Windows\window_set.rvmat"];
    #    car setObjectMaterial [1,"A3\Structures_F\Data\Windows\window_set.rvmat"];
    # 
    def setObjectMaterial _obj, _args
      "_obj setObjectMaterial _args;" 
    end

    # Set the proxy object associated with the given editor object
    # 
    # ==== Syntax
    #
    #      map setObjectProxy [object,proxy object]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[object,proxy object]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getObjectProxy
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setObjectProxy
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _map setObjectProxy ["_group_0", vehicle (leader _group)];
    # 
    def setObjectProxy _obj, _args
      "_obj setObjectProxy _args;" 
    end

    # Textures object selection with texture named in array.
    # 
    # ==== Description
    # 
    # 
    # 
    # Array has the form [selectionNumber, "Texture"].
    # 
    # The selection number is defined through the hiddenselection[]={} array in the vehicle's config (starting with 0)
    #  
    # ==== Syntax
    #
    #      object setObjectTexture [selectionNumber,texture]
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +[selectionNumber,texture]+ - Array  
    # *    +selectionNumber+ - Number  
    # *    +texture+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setObjectTextureGlobal, #setObjectMaterial
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setObjectTexture
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _objectname setObjectTexture [0, "\pboname\texture.paa"];
    #    _objectname setObjectTexture [1, "\pboname\texture2.paa"];
    # 
    def setObjectTexture _obj, _args
      "_obj setObjectTexture _args;" 
    end

    # Set the texture of the given selection on all computers in a network session
    # 
    # ==== Syntax
    #
    #      obj setObjectTextureGlobal [selection, texture]
    #
    # ==== Parameters
    # 
    # *    +obj+ - Object  
    # *    +[selection,texture]+ - Array  
    # *    +selection+ - Number  
    # *    +texture+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setObjectTexture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setObjectTextureGlobal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setObjectTextureGlobal [0, "\MyAddon\blue.paa"];
    # 
    def setObjectTextureGlobal _obj, _args
      "_obj setObjectTextureGlobal _args;" 
    end

    # Sets the rendering distance of objects.
    # 
    # ==== Description
    # 
    # 
    # 
    # This command does nothing and also throws error when 3 element array is passed: http://feedback.
    # 
    # arma3.
    # 
    # com/view.
    # 
    # php?id=11835
    #  
    # ==== Syntax
    #
    #      setObjectViewDistance dist
    #
    # ==== Parameters
    # 
    # *    +dist+ - Number or Array - Array in format [vehiclesZ, staticZ, treesZ]  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setViewDistance
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setObjectViewDistance
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setObjectViewDistance 2000
    # 
    def setObjectViewDistance _args
      "setObjectViewDistance _args;" 
    end

    # Set overcast to given value smoothly during given time (in seconds).
    # 
    # ==== Description
    # 
    # Zero time means immediate change.
    # 
    # An overcast setting of zero means clear (sunny) weather, and one means storms and rain are very likely.
    # 
    # Higher overcast values also result in higher wind speeds
    #  
    # ==== Syntax
    #
    #      time setOvercast overcast
    #
    # ==== Parameters
    # 
    # *    +time+ - Number. In seconds  
    # *    +overcast+ - Number. Range 0 to 1  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Each client and the server can have differing overcast values.
    # 
    # ==== See Also
    # 
    # #overcast, #nextWeatherChange, #simulSetHumidity
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setOvercast
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    50 setOvercast 0.5
    # 
    def setOvercast _obj, _args
      "_obj setOvercast _args;" 
    end

    # From server machine, change the ownership of an object to a given client.
    # 
    # ==== Description
    # 
    # Returns true if locality was changed
    #  
    # ==== Syntax
    #
    #      object setOwner clientID
    #
    # ==== Parameters
    # 
    # *    +object+ - Object -  
    # *    +clientID+ - Number - clientID of the new owner  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #owner
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setOwner
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _someObject setOwner 12;
    # 
    # ====== Example 2:
    # 
    #    _someObject setOwner (owner _playerObject);
    # 
    def setOwner _obj, _args
      "_obj setOwner _args;" 
    end

    # Sets oxygen remaining.
    # 
    # ==== Description
    # 
    # It has no effect when soldier is not diving
    #  
    # ==== Syntax
    #
    #      unit setOxygenRemaining value
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +value+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setOxygenRemaining
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setOxygenRemaining _obj, _args
      "_obj setOxygenRemaining _args;" 
    end

    # Update particle source to create particles on circle with given radius.
    # 
    # ==== Description
    # 
    # Velocity is transformed and added to total velocity
    #  
    # ==== Syntax
    #
    #      particleSource setParticleCircle [radius, velocity]
    #
    # ==== Parameters
    # 
    # *    +particleSource+ - Object  
    # *    +[radius, velocity]+ - Array  
    # *    +radius+ - Number  
    # *    +velocity+ - Array (x,y,z)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # ParticleArray, #setParticleParams, #setParticleRandom
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setParticleCircle
    #
    # ==== Examples
    # 
    def setParticleCircle _obj, _args
      "_obj setParticleCircle _args;" 
    end

    # Set parameters from existing config class.
    # 
    # ==== Description
    # 
    # ClassName is name of the class from CfgCloudlets.
    # 
    # 
    # 
    # Since version 1.
    # 
    # 11.
    # 
    # 114706 you can use setParticleParams to overwrite many values set by config class, particularity those defined in ParticleArray
    #  
    # ==== Syntax
    #
    #      source setParticleClass className
    #
    # ==== Parameters
    # 
    # *    +source+ - Object  
    # *    +className+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Arma 3 Particle Effects, ParticleArray, #setParticleParams, #setParticleRandom, #setParticleCircle, #setParticleFire, #setDropInterval, #drop
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setParticleClass
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _source01 = "#particlesource" createVehicleLocal _pos01;
    #    _source01 setParticleClass "ObjectDestructionFire1Smallx";
    #    _source01 attachTo [_object,[0,0,0]];
    # 
    def setParticleClass _obj, _args
      "_obj setParticleClass _args;" 
    end

    # Set fire parameters to particle effect.
    # 
    # ==== Description
    # 
    # Note: You need to create emitter at first.
    # 
    # Basic parameters of particle effect must be defined too.
    # 
    # You can use script commands setParticleClass or setParticleParams to do so.
    # 
    # See example
    #  
    # ==== Syntax
    #
    #      source setParticleFire [coreIntensity, coreDistance, damageTime]
    #
    # ==== Parameters
    # 
    # *    +source+ - Object  
    # *    +[coreIntensity, coreDistance, damageTime]+ - Array  
    # *    +coreIntensity+ - Number - damage in the center of fire  
    # *    +coreDistance+ - Number - how far can unit get damage  
    # *    +damageTime+ - Number - how often is unit getting damage  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setParticleFire
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _emitter = "#particlesource" createVehicleLocal (getPos player);
    #    _emitter setParticleClass "MediumSmoke";
    #    _emitter setParticleFire [0.3,1.0,0.1];
    # 
    def setParticleFire _obj, _args
      "_obj setParticleFire _args;" 
    end

    # Set parameters to particle source.
    # 
    # ==== Description
    # 
    # Array is in format ParticleArray.
    # 
    # 
    # 
    # Since Arma 3 version 1.
    # 
    # 11.
    # 
    # 114706 you can use this command to overwrite many values set by setParticleClass, particularity those defined in ParticleArray
    #  
    # ==== Syntax
    #
    #      particleSource setParticleParams array
    #
    # ==== Parameters
    # 
    # *    +particleSource+ - Object  
    # *    +array+ - Array - format ParticleArray  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Arma 3 Particle Effects, ParticleArray, #setParticleClass, #setParticleRandom, #setParticleCircle, #setParticleFire, #setDropInterval, #drop
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setParticleParams
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    see ParticleArray
    # 
    def setParticleParams _obj, _args
      "_obj setParticleParams _args;" 
    end

    # Set randomization of particle source parameters
    # 
    # ==== Syntax
    #
    #      particleSource setParticleRandom [lifeTime, position, moveVelocity, rotationVelocity, size, color, randomDirectionPeriod, randomDirectionIntensity, {angle}, bounceOnSurface]
    #
    # ==== Parameters
    # 
    # *    +particleSource+ - Object  
    # *    +[lifeTime, position, moveVelocity, rotationVelocity, size, color, randomDirectionPeriod, randomDirectionIntensity, {angle}, bounceOnSurface]+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # ParticleArray, #setParticleCircle, #setParticleParams
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setParticleRandom
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _PS setParticleRandom [0, [0.1, 0.1, 0.1], [0, 0, 0.5], 0, 0.1, [0, 0, 0, 0], 0, 0] 
    # 
    def setParticleRandom _obj, _args
      "_obj setParticleRandom _args;" 
    end

    # Set a Render Target's visual effect (Picture-in-Picture).
    # 
    # ==== Description
    # 
    # 
    # 
    # 0: normal (HDR)
    # 
    # 1: NV
    # 
    # 2: TI
    # 
    # 3: Color correction
    # 
    # 4: Mirror
    #  
    # ==== Syntax
    #
    #      name setPiPEffect [effect, optionalParam1, ..., optionalParamN]
    #
    # ==== Parameters
    # 
    # *    +name + - String - Render Target name  
    # *    +effect + - Number - effect type  
    # *    +optionalParam1+ - Parameters based on selected effect  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setPiPEffect
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    "rendertarget0" setPiPEffect [0];
    # 
    # ====== Example 2:
    # 
    #    "rendertarget0" setPiPEffect [3, 1.0, 1.0, 1.0, 0.0, [0.0, 1.0, 0.0, 0.25], [1.0, 0.0, 1.0, 1.0],  [0.199, 0.587, 0.114, 0.0]];
    # 
    def setPiPEffect _obj, _args
      "_obj setPiPEffect _args;" 
    end

    # Sets the pitch of a persons voice
    # 
    # ==== Syntax
    #
    #      person setPitch pitch
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +pitch+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #pitch
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setPitch
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    unit1 setPitch 1
    # 
    def setPitch _obj, _args
      "_obj setPitch _args;" 
    end

    # Create MP role for the unit.
    # 
    # ==== Description
    # 
    # The roles created this way are used for Join In Progress and Team Switch.
    # 
    # 
    # 
    # NOTE: Currently in Arma 3 this command does nothing
    #  
    # ==== Syntax
    #
    #      setPlayable unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setPlayable
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setPlayable _aPerson
    # 
    def setPlayable _args
      "setPlayable _args;" 
    end

    # Set the time interval to wait on player respawn.
    # 
    # ==== Description
    # 
    # It is set to mission default on mission start again
    #  
    # ==== Syntax
    #
    #      setPlayerRespawnTime interval
    #
    # ==== Parameters
    # 
    # *    +interval+ - Number - respawn time in seconds  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #playerRespawnTime
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setPlayerRespawnTime
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setPlayerRespawnTime 5;
    # 
    def setPlayerRespawnTime _args
      "setPlayerRespawnTime _args;" 
    end

    # Set object position
    # 
    # ==== Syntax
    #
    #      object setPos pos
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +pos+ - Array - format Position  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # ArmA 1.00 - 1.06: This command has local effect, but some simulation types do synchronise their changes over the network whilst others do not. The only known object types that currently, don't synchronise their positions over the net, are statics (simulation = "house").
    # 
    # Since ArmA 1.08 and later the command is global for every object again.
    # 
    # ==== See Also
    # 
    # #setPosASL, #getPos, #setVehiclePosition
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setPos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setPos [ getPos this select 0, getPos this select 1, (getPos this select 2) +10] 
    # 
    # ====== Example 2:
    # 
    #    obj1 setpos [ getPos obj1 select 0, getPos obj1 select 1, -5] 
    # 
    # ====== Example 3:
    # 
    #     player setPos (getPos someobject) 
    # 
    def setPos _obj, _args
      "_obj setPos _args;" 
    end

    # Sets the object position above sea level.
    # 
    # ==== Description
    # 
    # The pos array uses the PositionASL format
    #  
    # ==== Syntax
    #
    #      object setPosASL pos
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +pos+ - Array - format PositionASL  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # ASLToATL, ATLToASL, #getPos, #getPosASL, #getPosATL, #position, #setPos, #setPosASL2, #setPosATL
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setPosASL
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setPosASL [ getPosASL player select 0, (getPosASL player select 1) + 10,
    #    getPosASL player select 2]
    # 
    # ====== Example 2:
    # 
    #    this setPosASL [position this select 0, position this select 1, 9]; 
    #    "this" can be any name. "9" is the height above sea level
    # 
    def setPosASL _obj, _args
      "_obj setPosASL _args;" 
    end

    # Sets the object position.
    # 
    # ==== Description
    # 
    # The pos array uses the PositionASL format.
    # 
    # The version of the command does not offset based on object center
    #  
    # ==== Syntax
    #
    #      obj setPosASL2 pos
    #
    # ==== Parameters
    # 
    # *    +obj+ - Object  
    # *    +pos+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setPosASL getPosASL
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setPosASL2
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setPosASL2 [getPosASL player select 0, (getPosASL player select 1) + 10, getPosASL player select 2] 
    # 
    def setPosASL2 _obj, _args
      "_obj setPosASL2 _args;" 
    end

    # Sets the object position above sea surface.
    # 
    # ==== Description
    # 
    # The pos array uses the PositionASLW format
    #  
    # ==== Syntax
    #
    #      obj setPosASLW pos
    #
    # ==== Parameters
    # 
    # *    +obj+ - Object  
    # *    +pos+ - Array - format PositionASLW  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getPosASLW
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setPosASLW
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _diver setPosASLW [(position _diver) select 0, (position _diver) select 1, -10];
    # 
    def setPosASLW _obj, _args
      "_obj setPosASLW _args;" 
    end

    # Sets the position of an object relative to the terrain
    # 
    # ==== Syntax
    #
    #      object setPosATL pos
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +pos+ - Array - format PositionATL  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getPosATL, #getPos, #getPosASL, #setPos, #setPosASL
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setPosATL
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setPosATL [ getPosATL player select 0, (getPosATL player select 1) - 10,
    #    getPosATL player select 2]
    # 
    def setPosATL _obj, _args
      "_obj setPosATL _args;" 
    end

    # Sets the position of a location
    # 
    # ==== Syntax
    #
    #      location setPosition pos
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    # *    +pos+ - Array - format Position  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #locationPosition
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setPosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myLocation setPosition [1000,5320,10]
    # 
    def setPosition _obj, _args
      "_obj setPosition _args;" 
    end

    # Set radio message (0, 0, map radio) to given text.
    # 
    # ==== Description
    # 
    # Use "NULL" to disable radio slot
    #  
    # ==== Syntax
    #
    #      index setRadioMsg text
    #
    # ==== Parameters
    # 
    # *    +index+ - Number  
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createTrigger, #setTriggerText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setRadioMsg
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    1 setRadioMsg "Alpha Radio"
    # 
    def setRadioMsg _obj, _args
      "_obj setRadioMsg _args;" 
    end

    # Set rain density smoothly over the given transition time (in seconds).
    # 
    # ==== Description
    # 
    # A transition time of zero means an immediate change.
    # 
    # A rain density of zero is no rain, one is maximum rain.
    # 
    # Rain is not possible when overcast is less than 0.
    # 
    # 7
    #  
    # ==== Syntax
    #
    #      time setRain rain
    #
    # ==== Parameters
    # 
    # *    +time+ - Number. In seconds  
    # *    +rain+ - Number. Range 0 to 1  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Each client and the server can have differing rain values.
    # 
    # ==== See Also
    # 
    # #overcast, #setOvercast, #rain
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setRain
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    60 setRain 1
    # 
    def setRain _obj, _args
      "_obj setRain _args;" 
    end

    # Changes the rainbow value smoothly during the given time (in seconds).
    # 
    # ==== Description
    # 
    # A time of zero means there will be an immediate change
    #  
    # ==== Syntax
    #
    #      time setRainbow value
    #
    # ==== Parameters
    # 
    # *    +time+ - Number  
    # *    +value+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #rainbow
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setRainbow
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setRainbow _obj, _args
      "_obj setRainbow _args;" 
    end

    # Enables/Disables random lip
    # 
    # ==== Syntax
    #
    #      unit setRandomLip bool
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +bool+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setRandomLip
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setRandomLip _obj, _args
      "_obj setRandomLip _args;" 
    end

    # Sets rank of given unit.
    # 
    # ==== Description
    # 
    # Possible values: PRIVATE, CORPORAL, SERGEANT, LIEUTENANT, CAPTAIN, MAJOR or COLONEL
    #  
    # ==== Syntax
    #
    #      unitName setRank rank
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +rank+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setRank
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setRank "COLONEL"
    # 
    def setRank _obj, _args
      "_obj setRank _args;" 
    end

    # Set the shape of a location to be either rectangular or elliptical.
    # 
    # ==== Description
    # 
    # Locations default shape is elliptical
    #  
    # ==== Syntax
    #
    #      location setRectangular set
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    # *    +set+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #rectangular
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setRectangular
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myLocation setRectangular true
    # 
    def setRectangular _obj, _args
      "_obj setRectangular _args;" 
    end

    # Set amount of repair resources in cargo space of repair vehicle.
    # 
    # ==== Description
    # 
    # Amount 1 is full cargo
    #  
    # ==== Syntax
    #
    #      vehicleName setRepairCargo amount
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    # *    +amount+ - Number range 0 to 1  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #getRepairCargo, #setAmmoCargo, #setFuelCargo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setRepairCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _repairTruck1 setRepairCargo 0
    # 
    def setRepairCargo _obj, _args
      "_obj setRepairCargo _args;" 
    end

    # Sets the shadows rendering distance
    # 
    # ==== Syntax
    #
    #      setShadowDistance value
    #
    # ==== Parameters
    # 
    # *    +value+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setShadowDistance
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setShadowDistance 1000
    # 
    def setShadowDistance _args
      "setShadowDistance _args;" 
    end

    # Sets a location's side.
    # 
    # ==== Description
    # 
    # The default side is Unknown
    #  
    # ==== Syntax
    #
    #      location setSide side
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    # *    +side+ - Side  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Side, #side, #west, #east, #resistance, #civilian, #sideUnknown, #sideFriendly, #sideEnemy, #playerSide, #side location, Side relations
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setSide
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myLocation setSide resistance
    # 
    def setSide _obj, _args
      "_obj setSide _args;" 
    end

    # Attach descriptions to the simple task
    # 
    # ==== Syntax
    #
    #      task setSimpleTaskDescription array
    #
    # ==== Parameters
    # 
    # *    +Array+ - [Task description, Task title, Task waypoint description]  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #taskDescription, Tasks, #createSimpleTask, #removeSimpleTask, #setSimpleTaskDestination, #setTaskState, #setTaskResult, #taskState
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setSimpleTaskDescription
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tskCaptObj setSimpleTaskDescription ["Today you have to kill Spongebob.", "Kill Spongebob", "Here he is !"];
    # 
    def setSimpleTaskDescription _obj, _args
      "_obj setSimpleTaskDescription _args;" 
    end

    # Attach a destination to the simple task
    # 
    # ==== Syntax
    #
    #      task setSimpleTaskDestination position
    #
    # ==== Parameters
    # 
    # *    +Task+ - Task  
    # *    +Position+ - Position  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Tasks, #createSimpleTask, #removeSimpleTask, #setSimpleTaskDescription, #setTaskState, #setTaskResult, #taskState
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setSimpleTaskDestination
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tskGoHere setSimpleTaskDestination (getMarkerPos "obj1");
    # 
    def setSimpleTaskDestination _obj, _args
      "_obj setSimpleTaskDestination _args;" 
    end

    # Attach a target to the simple task.
    # 
    # ==== Description
    # 
    # Overrides setSimpleTaskDestination
    #  
    # ==== Syntax
    #
    #      task setSimpleTaskTarget [target, precisePosition]
    #
    # ==== Parameters
    # 
    # *    +task+ - Task  
    # *    +target+ - Object  
    # *    +precisePosition+ - Boolean - use exact position of the target for map marker / HUD indicator instead of the position known to the owner of the task (depending on the knowledge about the target)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #briefing, #createSimpleTask, #setSimpleTaskDestination
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setSimpleTaskTarget
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    task setSimpleTaskTarget [targetVehicle, true];
    # 
    def setSimpleTaskTarget _obj, _args
      "_obj setSimpleTaskTarget _args;" 
    end

    # Sets number of simul weather layers, affects quality of simul weather clouds
    # 
    # ==== Syntax
    #
    #      setSimulWeatherLayers layers
    #
    # ==== Parameters
    # 
    # *    +layers+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setSimulWeatherLayers
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setSimulWeatherLayers _args
      "setSimulWeatherLayers _args;" 
    end

    # Sets the size (radius)  of a location.
    # 
    # ==== Description
    # 
    # The width  is 2 * x, the height is 2 * y
    #  
    # ==== Syntax
    #
    #      location setSize size
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    # *    +size+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #size
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setSize
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myLocation setSize [10,30]
    # 
    def setSize _obj, _args
      "_obj setSize _args;" 
    end

    # Sets ability level of person (commander unit).
    # 
    # ==== Description
    # 
    # Value of skill may vary from 0 to 1
    #  
    # ==== Syntax
    #
    #      vehicleName setSkill skill
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    # *    +skill+ - Number Range 0 to 1  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #skill, #setSkill array, #setUnitAbility, CfgAISkill, AI Combat Modes
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setSkill
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _hero setskill 1
    # 
    def setSkill _obj, _args
      "_obj setSkill _args;" 
    end

    # Sets sub-skill level of an unit / commander unit.
    # 
    # ==== Description
    # 
    # 
    # 
    # Value of sub-skill may vary from 0 to 1.
    # 
    # Possible sub-skill types are:
    # 
    # aimingAccuracy
    # 
    # aimingShake
    # 
    # aimingSpeed
    # 
    # endurance
    # 
    # spotDistance
    # 
    # spotTime
    # 
    # courage
    # 
    # reloadSpeed
    # 
    # commanding
    # 
    # general
    #  
    # ==== Syntax
    #
    #      unitName setSkill [type, skill]
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +[type, skill]+ - Array  
    # *    +type+ - String As above  
    # *    +skill+ - Number Range 0..1  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # AI Sub-skills, #skill, #setSkill, #setUnitAbility, CfgAISkill
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setSkill
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hero setskill ["Endurance",0.7]
    # 
    def setSkill _obj, _args
      "_obj setSkill _args;" 
    end

    # Defines the different sound effects.
    # 
    # ==== Description
    # 
    # Sound / voice plays a 2D / 3D sound from CfgSounds.
    # 
    # SoundEnv plays an enviromental sound from CfgEnvSounds.
    # 
    # SoundDet (only for triggers) creates a dynamic sound object attached to a trigger defined in CfgSFX
    #  
    # ==== Syntax
    #
    #      waypoint setSoundEffect [sound, voice, soundEnv, soundDet]
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    # *    +[sound, voice, soundEnv, soundDet]+ - Array of strings  
    # *    +waypoint+ - Array - format Waypoint  
    # *    +[sound, voice, soundEnv, soundDet]+ - Array of strings  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createTrigger
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setSoundEffect
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _trigger setSoundEffect ["Alarm", "", "", ""];
    # 
    # ====== Example 2:
    # 
    #     [_group1,2] setSoundEffect ["Alarm", "", "", ""];
    # 
    # ====== Example 3:
    # 
    #    _trigger setSoundEffect ["$NONE$", "", "", "MySound"];
    # 
    def setSoundEffect _obj, _args
      "_obj setSoundEffect _args;" 
    end

    # Sets the speaker of a person
    # 
    # ==== Syntax
    #
    #      person setSpeaker speaker
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #speaker
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setSpeaker
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    unit1 setSpeaker "Male02GRE";
    # 
    def setSpeaker _obj, _args
      "_obj setSpeaker _args;" 
    end

    # Add speech to location
    # 
    # ==== Syntax
    #
    #      location setSpeech speech
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    # *    +speech+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setSpeech
    #
    # ==== Examples
    # 
    def setSpeech _obj, _args
      "_obj setSpeech _args;" 
    end

    # Set group speed mode.
    # 
    # ==== Description
    # 
    # Mode may be one of:
    # 
    # "LIMITED" (half speed)
    # 
    # "NORMAL" (full speed, maintain formation)
    # 
    # "FULL" (do not wait for any other units in formation)
    #  
    # ==== Syntax
    #
    #      groupName setSpeedMode mode
    #
    # ==== Parameters
    # 
    # *    +groupName+ - Object or Group  
    # *    +mode+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #speedMode
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setSpeedMode
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _groupOne setSpeedMode "LIMITED"
    # 
    def setSpeedMode _obj, _args
      "_obj setSpeedMode _args;" 
    end

    # Set system of units
    # 
    # ==== Syntax
    #
    #      setSystemOfUnits value
    #
    # ==== Parameters
    # 
    # *    +value+ - Number - 0 for metric, 1 for mixed, 2 for imperial.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setSystemOfUnits
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setSystemOfUnits _args
      "setSystemOfUnits _args;" 
    end

    # Sets how the target is known to the other centers.
    # 
    # ==== Description
    # 
    # They behave like the target was seen age seconds ago.
    # 
    # Possible age values are: "ACTUAL", "5 MIN", "10 MIN", "15 MIN", "30 MIN", "60 MIN", "120 MIN" or "UNKNOWN"
    #  
    # ==== Syntax
    #
    #      object setTargetAge age
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +age+ - String As above  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setTargetAge
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setTargetAge "10 MIN"
    # 
    def setTargetAge _obj, _args
      "_obj setTargetAge _args;" 
    end

    # Set a result of the task
    # 
    # ==== Syntax
    #
    #      task setTaskResult [state,result]
    #
    # ==== Parameters
    # 
    # *    +task+ - Task -  
    # *    +[state,result]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Tasks, #createSimpleTask, #removeSimpleTask, #setSimpleTaskDescription, #setSimpleTaskDestination, #setTaskState, #taskState
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setTaskResult
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def setTaskResult _obj, _args
      "_obj setTaskResult _args;" 
    end

    # Set the state of a given task.
    # 
    # ==== Description
    # 
    # State value may be one of:
    # 
    # "Succeeded"
    # 
    # "Failed"
    # 
    # "Canceled"
    # 
    # "Created"
    # 
    # "Assigned"
    #  
    # ==== Syntax
    #
    #      task setTaskState state
    #
    # ==== Parameters
    # 
    # *    +task+ - Task  
    # *    +state+ - String  
    #
    # ==== Returns
    #
    #      
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Tasks, #createSimpleTask, #removeSimpleTask, #setSimpleTaskDescription, #setSimpleTaskDestination, #setTaskResult, #taskState
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setTaskState
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _tskKillSpongebob setTaskState "Succeeded"
    # 
    def setTaskState _obj, _args
      "_obj setTaskState _args;" 
    end

    # Operation Flashpoint, VBS1: Set desired terrain resolution (in meters).
    # 
    # ==== Description
    # 
    # 
    # 
    # For default landscapes, supported resolutions are:
    # 
    # 50 - smoothest, less lag
    # 
    # 25 - default in multiplayer
    # 
    # 12.
    # 
    # 5 - default in singleplayer
    # 
    # 6.
    # 
    # 25
    # 
    # 3.
    # 
    # 125 - bumpiest, higher lag
    # 
    # If you select unsupported resolutions, nearest supported value is used instead.
    # 
    # 
    # 
    # Armed Assault, VBS2: Terrain resolution is fixed, determined by the world created.
    # 
    # This function controls terrain LOD instead (the distance in which the terrain mesh resolution starts to degrade).
    # 
    # Higher number means less vertices are used for terrain rendering, making distant hills less smooth.
    # 
    # Value 12.
    # 
    # 5 corresponds to selecting Terrain Detail Normal in Video options, 50 to Very Low, 3.
    # 
    # 125 to Very High
    #  
    # ==== Syntax
    #
    #      setTerrainGrid grid
    #
    # ==== Parameters
    # 
    # *    +grid+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setViewDistance, #viewDistance
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setTerrainGrid
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setTerrainGrid 12.5
    # 
    def setTerrainGrid _args
      "setTerrainGrid _args;" 
    end

    # Sets the text associated with a location.
    # 
    # ==== Description
    # 
    # This text will be displayed on the game map at the location's position
    #  
    # ==== Syntax
    #
    #      location setText text
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #text, #createLocation
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myLocation setText "Rahmadi Village"
    # 
    def setText _obj, _args
      "_obj setText _args;" 
    end

    # Defines the title effect via [Type, Effect, Text] where
    # 
    # ==== Description
    # 
    # 'Type' can be
    # 
    # "NONE",
    # 
    # "OBJECT",
    # 
    # 'Text' defines the shown object , a subclass of CfgTitles.
    # 
    # "RES"
    # 
    # 'Text' defines a resource class, a subclass of RscTitles.
    # 
    # "TEXT"
    # 
    # The 'Text' is shown as text itself.
    # 
    # 'Effect' defines a subtype: "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK IN", "WHITE OUT" or "WHITE IN"
    #  
    # ==== Syntax
    #
    #      waypoint setTitleEffect [type, effect, text]
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    # *    +[type, effect, text]+ - Array of strings. See above  
    # *    +waypoint+ - Array - format Waypoint  
    # *    +[type, effect, text]+ - Array of strings. See above  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createTrigger
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setTitleEffect
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _trigger setTitleEffect ["TEXT", "PLAIN DOWN", "Hello world."]
    # 
    def setTitleEffect _obj, _args
      "_obj setTitleEffect _args;" 
    end

    # Defines the trigger activation type.
    # 
    # ==== Description
    # 
    # 
    # 
    # See ArmA:Mission Editor - Triggers for a thorough overview of triggers and its fields for activation, effects, etc
    #  
    # ==== Syntax
    #
    #      trigger setTriggerActivation [by, type, repeating]
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object - Trigger object  
    # *    +by+ - String - Who activates trigger. Can be "NONE" orSide': "EAST", "WEST", "GUER", "CIV", "LOGIC", "ANY"  
    # *    +Radio+ - "ALPHA", "BRAVO", "CHARLIE", "DELTA", "ECHO", "FOXTROT", "GOLF", "HOTEL", "INDIA", "JULIET"Object: "STATIC", "VEHICLE", "GROUP", "LEADER", "MEMBER"Status: "WEST SEIZED", "EAST SEIZED" or "GUER SEIZED"  
    # *    +type+ - String -  How trigger is it activated. Can be:Presence: "PRESENT", "NOT PRESENT"Detection: "WEST D", "EAST D", "GUER D" or "CIV D"  
    # *    +repeating+ - Boolean - Activation can happen repeatedly  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Triggers are global. Activation changes are local.
    # 
    # ==== See Also
    # 
    # #triggerActivation, #triggerActivated, #createTrigger, #setTriggerArea, #setTriggerStatements, #setTriggerText, #setTriggerTimeout, #setTriggerType, #triggerAttachVehicle, #triggerAttachObject
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setTriggerActivation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _trigger setTriggerActivation ["WEST", "EAST D", true]
    # 
    def setTriggerActivation _obj, _args
      "_obj setTriggerActivation _args;" 
    end

    # Defines the area controlled by the trigger.
    # 
    # ==== Description
    # 
    # The area is either rectangular or elliptical, the width is 2 * xrad, the height is 2 * yrad.
    # 
    # It is rotated angle degrees
    #  
    # ==== Syntax
    #
    #      trigger setTriggerArea [xrad, yrad, angle, rectangle]
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    # *    +[xrad, yrad, angle, rectangle]+ - Array  
    # *    +xrad+ - Number - horizontal(x) radius (or half the width of rectangle)  
    # *    +yrad+ - Number - vertical(y) radius (or half the height of rectangle)  
    # *    +angle+ - Number - rotational in degrees  
    # *    +rectangle+ - Boolean - true if rectangle)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #triggerArea, #createTrigger, #setTriggerActivation, #setTriggerStatements, #setTriggerText, #setTriggerTimeout, #setTriggerType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setTriggerArea
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _trigger setTriggerArea [100, 50, 45, false ]
    # 
    def setTriggerArea _obj, _args
      "_obj setTriggerArea _args;" 
    end

    # Defines a trigger's condition, and executable code for its activation and deactivation events
    # 
    # ==== Syntax
    #
    #      trigger setTriggerStatements [condition, activation, deactivation]
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object - Trigger object  
    # *    +condition+ - String - Code containing the trigger's condition, which has to return a boolean value. If this is used, the result of the trigger's activation condition is interpreted.  
    # *    +activation+ - String - Code that is executed when the trigger is activated (The variable thislist contains an array with the units that activated the trigger.)  
    # *    +deactivation+ - String - Code that is executed when the trigger is deactivated.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #triggerStatements, #createTrigger, #setTriggerActivation, #setTriggerArea, #setTriggerText, #setTriggerTimeout, #setTriggerType, #this
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setTriggerStatements
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _trg setTriggerStatements ["this", "hint 'trigger on'", "hint 'trigger off'"]
    # 
    def setTriggerStatements _obj, _args
      "_obj setTriggerStatements _args;" 
    end

    # Sets the text label attached to the trigger object.
    # 
    # ==== Description
    # 
    # This is used for example as a radio slot label for radio activated triggers
    #  
    # ==== Syntax
    #
    #      trigger setTriggerText text
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #triggerText, #createTrigger, #setTriggerActivation, #setTriggerArea, #setTriggerStatements, #setTriggerTimeout, #setTriggerType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setTriggerText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    trigger setTriggerText "Call for support"
    # 
    def setTriggerText _obj, _args
      "_obj setTriggerText _args;" 
    end

    # Defines the time between condition satisfaction and trigger activation (randomly from min to max, with an average value mid).
    # 
    # ==== Description
    # 
    # If the last argument is true, the condition must be fullfilled all the time
    #  
    # ==== Syntax
    #
    #      trigger setTriggerTimeout [min, mid, max, interruptable]
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    # *    +[min, mid, max, interruptable]+ - Array  
    # *    +min+ - Number  
    # *    +mid+ - Number  
    # *    +max+ - Number  
    # *    +interruptable+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #triggerTimeout, #triggerTimeoutCurrent, #createTrigger, #setTriggerActivation, #setTriggerArea, #setTriggerStatements, #setTriggerText, #setTriggerType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setTriggerTimeout
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _trigger setTriggerTimeout [5, 10, 7, false];
    # 
    def setTriggerTimeout _obj, _args
      "_obj setTriggerTimeout _args;" 
    end

    # Sets the type of action processed by the trigger after activation (no action, a waypoints switch or an end of mission):
    # 
    # ==== Description
    # 
    # "NONE"
    # 
    # "EAST G" - Guarded by OPFOR
    # 
    # "WEST G" - Guarded by BLUFOR
    # 
    # "GUER G" - Guarded by Independent
    # 
    # "SWITCH" - Switch waypoints/break loop (see Triggers)
    # 
    # "END1" - End #1
    # 
    # "END2" - End #2
    # 
    # "END3" - End #3
    # 
    # "END4" - End #4
    # 
    # "END5" - End #5
    # 
    # "END6" - End #6
    # 
    # "LOOSE" - Lose //it is not a typo on the wiki, it is indeed misspelt in the game engine.
    # 
    # "WIN" - (not found in ArmA)
    #  
    # ==== Syntax
    #
    #      trigger setTriggerType action
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    # *    +action+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #triggerType, #createTrigger, #setTriggerActivation, #setTriggerArea, #setTriggerStatements, #setTriggerText, #setTriggerTimeout
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setTriggerType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _trigger setTriggerType "END1"
    # 
    def setTriggerType _obj, _args
      "_obj setTriggerType _args;" 
    end

    # Changes a location to the specified class.
    # 
    # ==== Description
    # 
    # Location classes are defined in CfgLocationTypes
    #  
    # ==== Syntax
    #
    #      location setType name
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #type
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myLocation setType "RockArea"
    # 
    def setType _obj, _args
      "_obj setType _args;" 
    end

    # Set / reset the unconscious life state of the given unit (in MP works only for a local unit)
    # 
    # ==== Syntax
    #
    #      unit setUnconscious set
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    # *    +set+ - Boolean -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lifeState
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setUnconscious
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _unit setUnconscious true
    # 
    def setUnconscious _obj, _args
      "_obj setUnconscious _args;" 
    end

    # Sets skill of given unit.
    # 
    # ==== Description
    # 
    # This command will probably differ in some future products, but currently it does the same as setSkill.
    # 
    # 
    # 
    # Skill may vary from 0.
    # 
    # 2 to 1.
    # 
    # 0
    #  
    # ==== Syntax
    #
    #      unit setUnitAbility skill
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +skill+ - Number Range 0.2 to 1.0  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #skill, #setSkill, #setSkill array, CfgAISkill, AI Combat Modes
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setUnitAbility
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setUnitAbility 1.0
    # 
    def setUnitAbility _obj, _args
      "_obj setUnitAbility _args;" 
    end

    # Set unit position rules.
    # 
    # ==== Description
    # 
    # Mode may be one of:
    # 
    # "DOWN" - unit goes prone and stays prone.
    # 
    # "UP" - unit stands and stays standing.
    # 
    # "Middle" - Kneel Position.
    # 
    # ArmA version 1.
    # 
    # 04 (Unit will not kneel if it is unarmed)
    # 
    # "AUTO" - unit chooses mode according to circumstances
    #  
    # ==== Syntax
    #
    #      unitName setUnitPos mode
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +mode+ - String As above  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setUnitPosWeak, #unitPos
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setUnitPos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _loon1 setUnitPos "UP"
    # 
    def setUnitPos _obj, _args
      "_obj setUnitPos _args;" 
    end

    # Set unit position rules.
    # 
    # ==== Description
    # 
    # Mode may be one of:
    # 
    # "DOWN" - person goes prone and stays prone.
    # 
    # "UP" - person stands and stays standing.
    # 
    # "Middle" - Kneel Position.
    # 
    # ArmA version 1.
    # 
    # 04
    # 
    # "AUTO" - person chooses mode according to circumstances
    #  
    # ==== Syntax
    #
    #      unitName setUnitPosWeak mode
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +mode+ - String As above  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # FSM, #doFSM, #setUnitPos, #unitPos
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setUnitPosWeak
    #
    # ==== Examples
    # 
    def setUnitPosWeak _obj, _args
      "_obj setUnitPosWeak _args;" 
    end

    # Sets rank of given unit.
    # 
    # ==== Description
    # 
    # Possible rank values, and the associated rating that is automatically given:
    # 
    # PRIVATE: 0
    # 
    # CORPORAL: 500
    # 
    # SERGEANT: 1500
    # 
    # LIEUTENANT: 2500
    # 
    # CAPTAIN: 3500
    # 
    # MAJOR: 5000
    # 
    # COLONEL: 7500
    #  
    # ==== Syntax
    #
    #      unitName setUnitRank rank
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +rank+ - String As above  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Rating Values, #rating, #addRating, #rank
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setUnitRank
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setUnitRank "COLONEL"
    # 
    def setUnitRank _obj, _args
      "_obj setUnitRank _args;" 
    end

    # Proportionaly increase/decrease unit's recoil.
    # 
    # ==== Description
    # 
    # Drives muzzle up with every shot when supplied positive number and down when negative.
    # 
    # 0 cancels recoil
    #  
    # ==== Syntax
    #
    #      unitName setUnitRecoilCoefficient coefficient
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +coefficient+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #unitRecoilCoefficient
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setUnitRecoilCoefficient
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setUnitRecoilCoefficient 10
    # 
    def setUnitRecoilCoefficient _obj, _args
      "_obj setUnitRecoilCoefficient _args;" 
    end

    # Changes user added action menu item text
    # 
    # ==== Syntax
    #
    #      unit setUserActionText [index, text, textDefault, textToolTip]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +[index, text, textDefault, textToolTip]+ - Array  
    # *    +index+ - Number - Action id returned by addAction  
    # *    +text+ - String or Structured Text - Action title  
    # *    +textDefault+ - String (does nothing, looks like leftover from TKOH)  
    # *    +textToolTip+ - String (does nothing, looks like leftover from TKOH)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addAction, #removeAction, #removeAllActions
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setUserActionText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _id = player addAction ["Hello", ""];
    #    player setUserActionText [_id, "Good Bye"];
    # 
    def setUserActionText _obj, _args
      "_obj setUserActionText _args;" 
    end

    # Set variable to given value in the variable space of given element.
    # 
    # ==== Description
    # 
    # 
    # 
    # To remove a variable, set it to nil (e.
    # 
    # g.
    # 
    # player setVariable ["varname",nil]).
    # 
    # 
    # 
    # All available data type combinations:
    # 
    # Namespace setVariable Array
    # 
    # Control setVariable Array
    # 
    # Object setVariable Array
    # 
    # Group setVariable Array
    # 
    # Team_Member setVariable Array
    # 
    # Task setVariable Array
    # 
    # Location setVariable Array
    #  
    # ==== Syntax
    #
    #      objectName setVariable [name, value, (public)]
    #
    # ==== Parameters
    # 
    # *    +objectName+ - Object or Location. Arma 2 also supports: Namespace, Group, Control, Task  
    # *    +[name, value]+ - Array  
    # *    +name+ - String  
    # *    +value+ - Any_Value  
    # *    +public+ - Boolean - Only available for Object types. If public is true then the value is broadcast to all computers.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # The variable space of the object is local to each client. By default changes are not broadcasted.  Since Arma 2: When the public parameter for supported types. If public, the value will be synchronized also for a JIP player.
    # 
    # ==== See Also
    # 
    # MP editing guide, #getVariable
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setVariable
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _myTruck setVariable ["myVariable", 123, true];
    # 
    def setVariable _obj, _args
      "_obj setVariable _args;" 
    end

    # Set object's direction vector.
    # 
    # ==== Description
    # 
    # Up vector will remain unchanged
    #  
    # ==== Syntax
    #
    #      object setVectorDir [x, z, y]
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +[x, z, y]+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #vectorUp, #setVectorUp, #vectorDir, #setVectorDirAndUp
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setVectorDir
    #
    # ==== Examples
    # 
    def setVectorDir _obj, _args
      "_obj setVectorDir _args;" 
    end

    # Sets orientation of an object.
    # 
    # ==== Description
    # 
    # The command takes 2 vector arrays, one for vectorDir and one for vectorUp.
    # 
    # Default object orientation will always have vectorDir pointing forward (North) along Y axis and vectorUp pointing up along Z axis - [[0,1,0],[0,0,1]], as shown on the diagram below.
    # 
    # When attaching object to an object the axes are relative to the object that gets the attachment.
    # 
    # If it is player object for example, then X goes from left to right, Y goes from back to front, and Z goes from down up.
    # 
    # 
    # 
    # The setDir command is incompatible with setVectorDirAndUp and should not be used together on the same object.
    # 
    # Using setVectorDirAndUp alone should be sufficient for any orientation.
    # 
    # In Multiplayer, setVectorDirAndUp must be executed on the machine where the object it applied to is local
    #  
    # ==== Syntax
    #
    #      vehicle setVectorDirAndUp [[x, y, z],[x, y, z]]
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +[[x, y, z],[x, y, z]]+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #vectorUp, #setVectorUp, #vectorDir, #setVectorDir
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setVectorDirAndUp
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    To rotate BRICK on Z axis 90 degrees clockwise, change its vectorDir but leave vectorUp unchanged.
    #    BRICK setVectorDirAndUp [[1,0,0],[0,0,1]];
    # 
    # ====== Example 2:
    # 
    #    To rotate BRICK on Y axis 90 degrees clockwise, change its vectorUp but leave vectorDir unchanged.
    #    BRICK setVectorDirAndUp [[0,1,0],[1,0,0]];
    # 
    # ====== Example 3:
    # 
    #    To rotate BRICK on X axis 90 degrees (tilt forward), change both vectorDir and vectorUp accordingly.
    #    BRICK setVectorDirAndUp [[0,0,-1],[0,1,0]];
    # 
    # ====== Example 4:
    # 
    #    More complex orientations
    #    //tilt forward 90 + rotate left 90
    #    BRICK setVectorDirAndUp [[1,0,0],[0,1,0]];
    #    //tilt backward 45 degrees
    #    BRICK setVectorDirAndUp [[0,0.5,0.5],[0,-0.5,0.5]];
    #    //tilt forward 30 degrees
    #    BRICK setVectorDirAndUp [[0,0.66,-0.33],[0,0.33,0.66]];
    # 
    def setVectorDirAndUp _obj, _args
      "_obj setVectorDirAndUp _args;" 
    end

    # Set object's up vector.
    # 
    # ==== Description
    # 
    # Direction vector will remain unchanged.
    # 
    # Default object's vectorUp is [0,0,1].
    # 
    # In Multiplayer, setVectorUp must be executed on the machine where the object it applied to is local
    #  
    # ==== Syntax
    #
    #      object setVectorUp [x, y, z]
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +[x, y, z]+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #vectorUp, #setVectorDir, #vectorDir, #setVectorDirAndUp, #surfaceNormal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setVectorUp
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    Turn object upside down:
    #    _obj setVectorUp [0,0,-1];
    # 
    # ====== Example 2:
    # 
    #    Align object with the terrain underneath:
    #    _obj setVectorUp surfaceNormal position _obj;
    # 
    def setVectorUp _obj, _args
      "_obj setVectorUp _args;" 
    end

    # Sets how much ammunition (compared to a full state defined by the vehicle type) the vehicle has.
    # 
    # ==== Description
    # 
    # The value ranges from 0 to 1
    #  
    # ==== Syntax
    #
    #      vehicleName setVehicleAmmo value
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    # *    +value+ - Number Range 0 to 1  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setVehicleAmmo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setVehicleAmmo 0;
    # 
    # ====== Example 2:
    # 
    #    _vehicle setVehicleAmmo 1;
    # 
    def setVehicleAmmo _obj, _args
      "_obj setVehicleAmmo _args;" 
    end

    # Sets how much ammunition (compared to the current configuration of magazines, but fully loaded) the vehicle has
    # 
    # ==== Syntax
    #
    #      unit setVehicleAmmoDef value
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - Unit or vehicle.  
    # *    +value+ - Number - From 0 (no ammo) to 1 (fully loaded).  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setVehicleAmmoDef
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setVehicleAmmoDef 0
    # 
    def setVehicleAmmoDef _obj, _args
      "_obj setVehicleAmmoDef _args;" 
    end

    # Sets the armor (or health for men) state of the vehicle (a value from 0 to 1).
    # 
    # ==== Description
    # 
    # 
    # 
    # Works like setDamage only in reverse: player setVehicleArmor 1 is the same as player setDamage 0, and player setVehicleArmor 0 is the same as player setDamage 0.
    # 
    # 97
    #  
    # ==== Syntax
    #
    #      vehicleName setVehicleArmor value
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    # *    +value+ - Number range 0 to 1  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setDamage
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setVehicleArmor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setVehicleArmor 0.5;
    # 
    def setVehicleArmor _obj, _args
      "_obj setVehicleArmor _args;" 
    end

    # Sets id (integer value) to vehicle.
    # 
    # ==== Description
    # 
    # By this id vehicle is referenced by triggers and waypoints
    #  
    # ==== Syntax
    #
    #      vehicleName setVehicleId id
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    # *    +id+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setVehicleId
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setVehicleId 1
    # 
    def setVehicleId _obj, _args
      "_obj setVehicleId _args;" 
    end

    # Set how vehicle is locked for player.
    # 
    # ==== Description
    # 
    # Possible values: "UNLOCKED", "DEFAULT" or "LOCKED"
    #  
    # ==== Syntax
    #
    #      vehicleName setVehicleLock state
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    # *    +state+ - String see above  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setVehicleLock
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _veh1 setVehicleLock "LOCKED"
    # 
    def setVehicleLock _obj, _args
      "_obj setVehicleLock _args;" 
    end

    # Moves the object to a random position.
    # 
    # ==== Description
    # 
    # Uses either the position that's defined in the first array, or one of the marker positions from the markers array.
    # 
    # 
    # 
    # The object is placed inside a circle with this position as its center and placement as its radius
    #  
    # ==== Syntax
    #
    #      object setVehiclePosition [position, markers, placement]
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    # *    +[position, markers, placement]+ - Array  
    # *    +position+ - Array - format Position  
    # *    +markers+ - Array - format Position  
    # *    +placement+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setVehiclePosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player setVehiclePosition [[1000,2000], ["Pos1","Pos2","Pos3"], 0] Will place the player at either [1000,2000], or one of the three markers positions.
    # 
    def setVehiclePosition _obj, _args
      "_obj setVehiclePosition _args;" 
    end

    # RSet ti parameters for spécified vehicle, pars: engine/body, tracks/wheels, main gun
    # 
    # ==== Syntax
    #
    #      vehicleName setVehicleTiPars [pars]
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    # *    +pars+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setVehicleTiPars
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     vehicle player setVehicleTiPars ["pars"]; 
    # 
    def setVehicleTiPars _obj, _args
      "_obj setVehicleTiPars _args;" 
    end

    # Set velocity (speed vector) of a vehicle.
    # 
    # ==== Description
    # 
    # Units are in metres per second
    #  
    # ==== Syntax
    #
    #      vehicleName setVelocity [x, y, z]
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    # *    +[x, y, z]+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #velocity, #velocityModelSpace, #setVelocityTransformation
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setVelocity
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _truck1 setVelocity [20, 0, 0];
    # 
    # ====== Example 2:
    # 
    #    Advanced method used for relative acceleration:
    #    _vel = velocity _vehicle;
    #    _dir = direction _vehicle;
    #    _speed = 10; comment "Added speed";
    #    _vehicle setVelocity [
    #    	(_vel select 0) + (sin _dir * _speed), 
    #    	(_vel select 1) + (cos _dir * _speed), 
    #    	(_vel select 2)
    #    ];
    # 
    def setVelocity _obj, _args
      "_obj setVelocity _args;" 
    end

    # Interpolate and sets vectors.
    # 
    # ==== Description
    # 
    # For additional info see this resource
    #  
    # ==== Syntax
    #
    #      objectName setVelocityTransformation [position1, position2, velocity1, velocity2, direction1, direction2, up1, up2, time]
    #
    # ==== Parameters
    # 
    # *    +objectName+ - Object  
    # *    +position1+ - Number  
    # *    +position2+ - Number  
    # *    +velocity1+ - Number  
    # *    +velocity2+ - Number  
    # *    +direction1+ - Number  
    # *    +direction2+ - Number  
    # *    +up1+ - Number  
    # *    +up2+ - Number  
    # *    +time+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #velocity, #velocityModelSpace, #setVelocity
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setVelocityTransformation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _targetUnit setVelocityTransformation [
    #    	_tmpPos,
    #    	_tmpPosNext,
    #    	_tmpVel,
    #    	_tmpVelNext,
    #    	_tmpVecDir,
    #    	_tmpVecDirNext,
    #    	_tmpVecUp,
    #    	_tmpVecUpNext,
    #    	_tmpTimeDiff
    #    ];
    #    comment "fn_UnitPlay.sqf from \ca\modules_e\Functions\scenes";
    # 
    def setVelocityTransformation _obj, _args
      "_obj setVelocityTransformation _args;" 
    end

    # Set rendering distance, in metres.
    # 
    # ==== Description
    # 
    # Default is 900m (in OFP) or 1,200m (in ArmA), accepted range is 500m to 5,000m (in OFP) or 10,000m (in ArmA)
    #  
    # ==== Syntax
    #
    #      setViewDistance distance
    #
    # ==== Parameters
    # 
    # *    +distance+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #viewDistance, #viewDistance_(VBS2), #setTerrainGrid, #setObjectViewDistance
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setViewDistance
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setViewDistance 2250
    # 
    def setViewDistance _args
      "setViewDistance _args;" 
    end

    # Sets whether or not the object is visible even if the tree is collapsed
    # 
    # ==== Syntax
    #
    #      map setVisibleIfTreeCollapsed [object, visible]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control  
    # *    +[object, visible]+ - Array  
    # *    +object+ - Editor Object  
    # *    +visible+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setVisibleIfTreeCollapsed
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _map setVisibleIfTreeCollapsed ["_unit_0", true]
    # 
    def setVisibleIfTreeCollapsed _obj, _args
      "_obj setVisibleIfTreeCollapsed _args;" 
    end

    # Set waypoint position
    # 
    # ==== Syntax
    #
    #      waypoint setWPPos pos
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +pos+ - Array - format Position2D  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setWaypointPosition
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWPPos
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_groupOne, 1] setWPPos markerPos "MarkerOne"
    # 
    def setWPPos _obj, _args
      "_obj setWPPos _args;" 
    end

    # Changes the waves value smoothly during the given time (in seconds).
    # 
    # ==== Description
    # 
    # A time of zero means there will be an immediate change
    #  
    # ==== Syntax
    #
    #      time setWaves value
    #
    # ==== Parameters
    # 
    # *    +time+ - Number  
    # *    +value+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaves
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    180 setWaves .5;
    # 
    # ====== Example 2:
    # 
    #    0 setWaves 1;
    # 
    def setWaves _obj, _args
      "_obj setWaves _args;" 
    end

    # Switches the unit behaviour when the waypoint becomes active.
    # 
    # ==== Description
    # 
    # Possible values are:
    # 
    # "UNCHANGED"
    # 
    # "CARELESS"
    # 
    # "SAFE"
    # 
    # "AWARE"
    # 
    # "COMBAT"
    # 
    # "STEALTH"
    # 
    # See the AIBehaviour page for details of the effect of this command on AI units
    #  
    # ==== Syntax
    #
    #      waypoint setWaypointBehaviour mode
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +mode+ - String As Above  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #behaviour description, AIBehaviour, #addWaypoint, #waypointBehaviour, #behaviour, #setBehaviour
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointBehaviour
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_grp, 2] setWaypointBehaviour "AWARE"
    # 
    def setWaypointBehaviour _obj, _args
      "_obj setWaypointBehaviour _args;" 
    end

    # The group combat mode is switched when the waypoint becomes active.
    # 
    # ==== Description
    # 
    # Possible mode values are:
    # 
    # "NO CHANGE" (No change)
    # 
    # "BLUE" (Never fire)
    # 
    # "GREEN" (Hold fire - defend only)
    # 
    # "WHITE" (Hold fire, engage at will)
    # 
    # "YELLOW" (Fire at will)
    # 
    # "RED" (Fire at will, engage at will)
    #  
    # ==== Syntax
    #
    #      waypoint setWaypointCombatMode mode
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +mode+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #combat mode description, AI Combat Modes, #addWaypoint, #waypointCombatMode
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointCombatMode
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_grp, 2] setWaypointCombatMode "RED"
    # 
    def setWaypointCombatMode _obj, _args
      "_obj setWaypointCombatMode _args;" 
    end

    # The completion radius allows units to call the waypoint completed once they are inside of the given circle
    # 
    # ==== Syntax
    #
    #      waypoint setWaypointCompletionRadius radius
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +radius+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWaypoint, #waypointCompletionRadius
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointCompletionRadius
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [grp,2] setWaypointCompletionRadius 30
    # 
    def setWaypointCompletionRadius _obj, _args
      "_obj setWaypointCompletionRadius _args;" 
    end

    # Sets the description shown in the HUD while the waypoint is active
    # 
    # ==== Syntax
    #
    #      waypoint setWaypointDescription text
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWaypoint, #waypointDescription
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointDescription
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_grp, 2] setWaypointDescription "Move here."
    # 
    def setWaypointDescription _obj, _args
      "_obj setWaypointDescription _args;" 
    end

    # Switches the group formation when the waypoint becomes active.
    # 
    # ==== Description
    # 
    # Possible values are:
    # 
    # "NO CHANGE"
    # 
    # "COLUMN"
    # 
    # "STAG COLUMN"
    # 
    # "WEDGE"
    # 
    # "ECH LEFT"
    # 
    # "ECH RIGHT"
    # 
    # "VEE"
    # 
    # "LINE"
    # 
    # "FILE"
    # 
    # "DIAMOND"
    #  
    # ==== Syntax
    #
    #      waypoint setWaypointFormation formation
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +formation+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #formations description, #addWaypoint, #waypointFormation
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointFormation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_grp, 2] setWaypointFormation "LINE"
    # 
    def setWaypointFormation _obj, _args
      "_obj setWaypointFormation _args;" 
    end

    # For waypoints attached to a house, this defines the target house position
    # 
    # ==== Syntax
    #
    #      waypoint setWaypointHousePosition pos
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +pos+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWaypoint, #waypointHousePosition
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointHousePosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_grp, 2] setWaypointHousePosition 1
    # 
    def setWaypointHousePosition _obj, _args
      "_obj setWaypointHousePosition _args;" 
    end

    # Assignes loiter radius to waypoint
    # 
    # ==== Syntax
    #
    #      waypoint setWaypointLoiterRadius radius
    #
    # ==== Parameters
    # 
    # *    +Waypoint+ - Waypoint  
    # *    +Radius+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointLoiterRadius
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_grp, 2] setWaypointLoiterRadius 200;
    # 
    def setWaypointLoiterRadius _obj, _args
      "_obj setWaypointLoiterRadius _args;" 
    end

    # Sets the waypoint loiter type
    # 
    # ==== Syntax
    #
    #      waypoint setWaypointLoiterType type
    #
    # ==== Parameters
    # 
    # *    +Waypoint+ - Waypoint  
    # *    +type+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointLoiterType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_grp, 2] setWaypointLoiterType "CIRCLE"
    # 
    # ====== Example 2:
    # 
    #    [_grp, 2] setWaypointLoiterType "CIRCLE_L"
    # 
    def setWaypointLoiterType _obj, _args
      "_obj setWaypointLoiterType _args;" 
    end

    # Changes the waypoint name
    # 
    # ==== Syntax
    #
    #      waypoint setWaypointName name
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Waypoint  
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointName
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setWaypointName _obj, _args
      "_obj setWaypointName _args;" 
    end

    # Moves the waypoint to a random position in a circle with the given center and radius
    # 
    # ==== Syntax
    #
    #      waypoint setWaypointPosition [center, radius]
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +[center, radius]+ - Array  
    # *    +center+ - Array - format Position  
    # *    +radius+ - Number meters  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWaypoint, #waypointPosition, #setWPPos
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointPosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_grp, 2] setWaypointPosition [position player, 0]
    # 
    def setWaypointPosition _obj, _args
      "_obj setWaypointPosition _args;" 
    end

    # Attaches a script to a scripted waypoint.
    # 
    # ==== Description
    # 
    # Command consist of a script name and additional script arguments.
    # 
    # The Script has to use SQS-Syntax.
    # 
    # See Mission editor Description for more information about scripted waypoints
    #  
    # ==== Syntax
    #
    #      waypoint setWaypointScript command
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +command+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWaypoint, #waypointScript
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointScript
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_grp, 2] setWaypointScript "find.sqs player"
    # 
    def setWaypointScript _obj, _args
      "_obj setWaypointScript _args;" 
    end

    # Switches the group speed mode when the waypoint becomes active.
    # 
    # ==== Description
    # 
    # Possible values are:
    # 
    # "UNCHANGED"
    # 
    # "LIMITED"
    # 
    # "NORMAL"
    # 
    # "FULL"
    #  
    # ==== Syntax
    #
    #      waypoint setWaypointSpeed mode
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +mode+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWaypoint, #waypointSpeed
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointSpeed
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_grp, 2] setWaypointSpeed "FULL"
    # 
    def setWaypointSpeed _obj, _args
      "_obj setWaypointSpeed _args;" 
    end

    # The waypoint is done only when the condition is fulfilled.
    # 
    # ==== Description
    # 
    # When the waypoint is done, the statement expression is executed.
    # 
    # Within the Condition & Statement code string:
    # 
    # this refers to the group leader
    # 
    # thislist refers to an array containing each unit in the group
    #  
    # ==== Syntax
    #
    #      waypoint setWaypointStatements [condition, statement]
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +[condition, statement]+ - Array  
    # *    +condition+ - String  
    # *    +statement+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWaypoint, #waypointStatements, #waypointStatements (VBS2)
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointStatements
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    new_wp setWaypointStatements ["true", "hint 'hello'; hint 'goodbye'"];
    # 
    # ====== Example 2:
    # 
    #    new_wp setWaypointStatements ["true", "diag_log ['GroupLeader: ',this]; diag_log ['Units: ',thislist]"];
    # 
    def setWaypointStatements _obj, _args
      "_obj setWaypointStatements _args;" 
    end

    # Defines the time between condition satisfaction and waypoint finish (randomly from min to max, with an average value mid)
    # 
    # ==== Syntax
    #
    #      waypoint setWaypointTimeout [min, mid, max]
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +[min, mid, max]+ - Array  
    # *    +min+ - Number  
    # *    +mid+ - Number  
    # *    +max+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWaypoint, #waypointTimeout
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointTimeout
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_grp, 2] setWaypointTimeout [5, 10, 6]
    # 
    def setWaypointTimeout _obj, _args
      "_obj setWaypointTimeout _args;" 
    end

    # Changes the waypoint type.
    # 
    # ==== Description
    # 
    # 
    # 
    # Type can be:
    # 
    # "MOVE"
    # 
    # "DESTROY"
    # 
    # "GETIN"
    # 
    # "SAD"
    # 
    # "JOIN"
    # 
    # "LEADER"
    # 
    # "GETOUT"
    # 
    # "CYCLE"
    # 
    # "LOAD"
    # 
    # "UNLOAD"
    # 
    # "TR UNLOAD"
    # 
    # "HOLD"
    # 
    # "SENTRY"
    # 
    # "GUARD"
    # 
    # "TALK"
    # 
    # "SCRIPTED"
    # 
    # "SUPPORT"
    # 
    # "GETIN NEAREST"
    # 
    # "DISMISS"
    # 
    # "LOITER" (new in Arma 3)
    # 
    # "AND" (only for game logics)
    # 
    # "OR" (only for game logics)
    # 
    # More details at Waypoint types
    #  
    # ==== Syntax
    #
    #      waypoint setWaypointType type
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +type+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypoints description, Waypoint types, #addWaypoint, #waypointType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_grp, 2] setWaypointType "HOLD"
    # 
    def setWaypointType _obj, _args
      "_obj setWaypointType _args;" 
    end

    # Sets the visibility of the waypoint
    # 
    # ==== Syntax
    #
    #      waypoint setWaypointVisible visible
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +visible+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWaypoint, #waypointVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWaypointVisible
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [grp, 2] setWaypointVisible false;
    # 
    # ====== Example 2:
    # 
    #    [group player, currentWaypoint (group player)] setWaypointVisible false;
    # 
    def setWaypointVisible _obj, _args
      "_obj setWaypointVisible _args;" 
    end

    # Sets states and/or makes an action of/on weapon.
    # 
    # ==== Description
    # 
    # Reload time is between 0 and 1 inclusive, where 1 is 100% of maximum reloading time
    #  
    # ==== Syntax
    #
    #      vehicle setWeaponReloadingTime [gunner, weaponName, reloadTime]
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +[gunner, weaponName, reloadTime]+ - Array  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWeaponReloadingTime
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _done = _vehicle setWeaponReloadingTime [gunner (vehicle player), currentMuzzle (gunner (vehicle player)), 0.5];
    # 
    def setWeaponReloadingTime _obj, _args
      "_obj setWeaponReloadingTime _args;" 
    end

    # Set current (forced == false) or permanent (forced == true) wind vector
    # 
    # ==== Syntax
    #
    #      setWind [x, z, forced]
    #
    # ==== Parameters
    # 
    # *    +x+ - Number Easterly component (in m/s, positive = to the east)  
    # *    +z+ - Number Northerly component (in m/s, positive = to the north)  
    # *    +forced+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #wind
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWind
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    setWind [10, 10, true];
    # 
    def setWind _args
      "setWind _args;" 
    end

    # Changes the wind direction smoothly during the given time (in seconds).
    # 
    # ==== Description
    # 
    # A time of zero means there will be an immediate change
    #  
    # ==== Syntax
    #
    #      time setWindDir value
    #
    # ==== Parameters
    # 
    # *    +time+ - Number  
    # *    +value+ - Number - Azimut.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #windDir
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWindDir
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setWindDir _obj, _args
      "_obj setWindDir _args;" 
    end

    # Set max.
    # 
    # ==== Description
    # 
    # wind overall wind changes in time.
    # 
    # A time of zero means there will be an immediate change.
    # 
    # A wind level of zero is minimal changes and a wind level of one means that wind can change rapidly
    #  
    # ==== Syntax
    #
    #      time setWindForce wind
    #
    # ==== Parameters
    # 
    # *    +time+ - Number  
    # *    +wind+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWindForce
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    1800 setWindForce 0.5
    # 
    def setWindForce _obj, _args
      "_obj setWindForce _args;" 
    end

    # Changes the wind strength smoothly during the given time (in seconds).
    # 
    # ==== Description
    # 
    # A time of zero means there will be an immediate change
    #  
    # ==== Syntax
    #
    #      time setWindStr value
    #
    # ==== Parameters
    # 
    # *    +time+ - Number  
    # *    +value+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/setWindStr
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def setWindStr _obj, _args
      "_obj setWindStr _args;" 
    end

    # Toggle the drawing of 3D icons
    # 
    # ==== Syntax
    #
    #      map show3DIcons bool
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +bool+ - Boolean -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/show3DIcons
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def show3DIcons _obj, _args
      "_obj show3DIcons _args;" 
    end

    # Shows/hides the whole chat window
    # 
    # ==== Syntax
    #
    #      showChat bool
    #
    # ==== Parameters
    # 
    # *    +bool+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showChat
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def showChat _args
      "showChat _args;" 
    end

    # Force drawing of cinema borders.
    # 
    # ==== Description
    # 
    # This is normally used in cutscenes to indicate player has no control
    #  
    # ==== Syntax
    #
    #      showCinemaBorder show
    #
    # ==== Parameters
    # 
    # *    +show+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showCinemaBorder
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    showCinemaBorder true
    # 
    def showCinemaBorder _args
      "showCinemaBorder _args;" 
    end

    # Create the commanding menu described by the given config class or menu name.
    # 
    # ==== Description
    # 
    # When the name is empty, the current menu is hidden
    #  
    # ==== Syntax
    #
    #      showCommandingMenu name
    #
    # ==== Parameters
    # 
    # *    +name+ - String - Class name or user menu name (with "#USER:" prefix and "_#" page number suffix, where # is the page number starting with 0).  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #commandingMenu, BIS_FNC_createMenu, BIS_MENU_GroupCommunication
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showCommandingMenu
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    showCommandingMenu "";
    # 
    # ====== Example 2:
    # 
    #    showCommandingMenu "MyClassName";
    # 
    # ====== Example 3:
    # 
    #    showCommandingMenu "#USER:Tag_Menu_myMenu_0";
    # 
    def showCommandingMenu _args
      "showCommandingMenu _args;" 
    end

    # Shows or hides the compass on the map screen, if enabled for the mission and you possess the item.
    # 
    # ==== Description
    # 
    # (default true)
    #  
    # ==== Syntax
    #
    #      showCompass show
    #
    # ==== Parameters
    # 
    # *    +show+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #shownCompass, #showGPS, #showRadio, #showWatch, #showPad, #showMap
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showCompass
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    showCompass false
    # 
    def showCompass _args
      "showCompass _args;" 
    end

    # Hides or shows compass in curator interface
    # 
    # ==== Syntax
    #
    #      showCuratorCompass bool
    #
    # ==== Parameters
    # 
    # *    +bool+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showCuratorCompass
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def showCuratorCompass _args
      "showCuratorCompass _args;" 
    end

    # Shows or hides the GPS receiver on the map screen, if enabled for the mission and you possess the item.
    # 
    # ==== Description
    # 
    # (default false)
    #  
    # ==== Syntax
    #
    #      showGPS show
    #
    # ==== Parameters
    # 
    # *    +show+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #shownGPS, #showCompass, #showRadio, #showWatch, #showPad
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showGPS
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    showGPS true
    # 
    def showGPS _args
      "showGPS _args;" 
    end

    # Enable / disable showing of HUD.
    # 
    # ==== Description
    # 
    # Defines visibility of weapon crosshair and any informational tags that appear when pointing the weapon at an object
    #  
    # ==== Syntax
    #
    #      showHUD enable
    #
    # ==== Parameters
    # 
    # *    +enable+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showHUD
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    showHUD false;
    # 
    def showHUD _args
      "showHUD _args;" 
    end

    # Show/hide map legend
    # 
    # ==== Syntax
    #
    #      map showLegend bool
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +bool+ - Boolean -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showLegend
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def showLegend _obj, _args
      "_obj showLegend _args;" 
    end

    # Enable Map (default true)
    # 
    # ==== Syntax
    #
    #      showMap show
    #
    # ==== Parameters
    # 
    # *    +show+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #showCompass, #showGPS, #showRadio, #showWatch, #showPad, #shownMap
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showMap
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    showMap false
    # 
    def showMap _args
      "showMap _args;" 
    end

    # Show the add editor object dialog,type is editor object type,class is,class definition to automatically select,side filters by a certain,side,pos is position to create the object
    # 
    # ==== Syntax
    #
    #      map showNewEditorObject [type,class,side,position]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[type,class,side,position]+ - Array -  
    #
    # ==== Returns
    #
    #      Any
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showNewEditorObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def showNewEditorObject _obj, _args
      "_obj showNewEditorObject _args;" 
    end

    # Shows or hides the notebook on the map screen, if enabled for the mission.
    # 
    # ==== Description
    # 
    # (default true).
    # 
    # It is no longer relevant to Arma 2
    #  
    # ==== Syntax
    #
    #      showPad show
    #
    # ==== Parameters
    # 
    # *    +show+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #shownPad, #showCompass, #showGPS, #showRadio, #showWatch
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showPad
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    showPad false
    # 
    def showPad _args
      "showPad _args;" 
    end

    # Shows or hides the radio on the map screen, if enabled for the mission and you possess the item.
    # 
    # ==== Description
    # 
    # (default true)
    #  
    # ==== Syntax
    #
    #      showRadio show
    #
    # ==== Parameters
    # 
    # *    +show+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #shownRadio, #showCompass, #showGPS, #showWatch, #showPad
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showRadio
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    showRadio false
    # 
    def showRadio _args
      "showRadio _args;" 
    end

    # Enable / disable showing of subtitles.
    # 
    # ==== Description
    # 
    # Return the previous state
    #  
    # ==== Syntax
    #
    #      showSubtitles enable
    #
    # ==== Parameters
    # 
    # *    +enable+ - Boolean -  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showSubtitles
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    showSubtitles false;
    # 
    def showSubtitles _args
      "showSubtitles _args;" 
    end

    # Shows/hides video feed transmitted from UAV
    # 
    # ==== Syntax
    #
    #      showUavFeed bool
    #
    # ==== Parameters
    # 
    # *    +bool+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #shownUavFeed, #allUnitsUav, #getConnectedUav, #isUavConnected, #uavControl
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showUavFeed
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    showUavFeed true;
    # 
    def showUavFeed _args
      "showUavFeed _args;" 
    end

    # Enable ID card (default false).
    # 
    # ==== Description
    # 
    # Obsolete command
    #  
    # ==== Syntax
    #
    #      showWarrant show
    #
    # ==== Parameters
    # 
    # *    +show+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showWarrant
    #
    # ==== Examples
    # 
    def showWarrant _args
      "showWarrant _args;" 
    end

    # Shows or hides the watch on the map screen, if enabled for the mission and you possess the item.
    # 
    # ==== Description
    # 
    # (default true)
    #  
    # ==== Syntax
    #
    #      showWatch show
    #
    # ==== Parameters
    # 
    # *    +show+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #shownWatch, #showCompass, #showGPS, #showRadio, #showPad
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showWatch
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    showWatch false
    # 
    def showWatch _args
      "showWatch _args;" 
    end

    # Sets the condition determining when the waypoint is shown.
    # 
    # ==== Description
    # 
    # Possible values are:
    # 
    # "NEVER" - never show it
    # 
    # "EASY" - show only in cadet mode
    # 
    # "ALWAYS" - always show it
    #  
    # ==== Syntax
    #
    #      waypoint showWaypoint show
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +show+ - String - see description  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypointShow
    # 
    # Official Wiki: https://community.bistudio.com/wiki/showWaypoint
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_grp, 2] showWaypoint "ALWAYS";
    # 
    def showWaypoint _obj, _args
      "_obj showWaypoint _args;" 
    end

    # Checks whether the player has the artillery computer currently open
    # 
    # ==== Syntax
    #
    #      shownArtilleryComputer
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #enableEngineArtillery, #getArtilleryComputerSettings, #inRangeOfArtillery, #commandArtilleryFire, #doArtilleryFire, #getArtilleryETA
    # 
    # Official Wiki: https://community.bistudio.com/wiki/shownArtilleryComputer
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if ( shownArtilleryComputer ) then { hint "Artillery Computer shown on screen"; };
    # 
    def shownArtilleryComputer 
      "shownArtilleryComputer" 
    end

    # Check if player has compass enabled
    # 
    # ==== Syntax
    #
    #      Boolean = shownCompass
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #showCompass
    # 
    # Official Wiki: https://community.bistudio.com/wiki/shownCompass
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? showncompass : hint "You have a compass."
    # 
    def shownCompass 
      "shownCompass" 
    end

    # Returns true if compass is shown
    # 
    # ==== Syntax
    #
    #      shownCuratorCompass
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/shownCuratorCompass
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def shownCuratorCompass 
      "shownCuratorCompass" 
    end

    # Check if player has GPS reciever enabled
    # 
    # ==== Syntax
    #
    #      Boolean = shownGPS
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/shownGPS
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? shownGPS : hint "You have a GPS reciever."
    # 
    def shownGPS 
      "shownGPS" 
    end

    # Check if player has Map enabled
    # 
    # ==== Syntax
    #
    #      Boolean = shownMap
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/shownMap
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? shownMap : hint "You have a Map."
    # 
    def shownMap 
      "shownMap" 
    end

    # Check if player has Notebook enabled
    # 
    # ==== Syntax
    #
    #      Boolean = shownPad
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/shownPad
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? shownPad : hint "You have a Notebook."
    # 
    def shownPad 
      "shownPad" 
    end

    # Check if player has Radio enabled
    # 
    # ==== Syntax
    #
    #      Boolean = shownRadio
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/shownRadio
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? shownRadio : hint "You have a Radio."
    # 
    def shownRadio 
      "shownRadio" 
    end

    # Returns true if video feed transmitted from UAV is shown
    # 
    # ==== Syntax
    #
    #      shownUavFeed
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #showUavFeed, #allUnitsUav, #getConnectedUav, #isUavConnected, #uavControl
    # 
    # Official Wiki: https://community.bistudio.com/wiki/shownUavFeed
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _bool = shownUavFeed
    # 
    def shownUavFeed 
      "shownUavFeed" 
    end

    # Check if player has ID card enabled.
    # 
    # ==== Description
    # 
    # Obsolete command
    #  
    # ==== Syntax
    #
    #      Boolean = shownWarrant
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/shownWarrant
    #
    # ==== Examples
    # 
    def shownWarrant 
      "shownWarrant" 
    end

    # Check if player has Watch enabled
    # 
    # ==== Syntax
    #
    #      Boolean = shownWatch
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/shownWatch
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? shownWatch : hint "You have a Watch."
    # 
    def shownWatch 
      "shownWatch" 
    end

    # Returns the side of a unit or object.
    # 
    # ==== Description
    # 
    # Once dead, a unit will be on the civilian side.
    # 
    # Query the side of the Group to get a reliable result.
    # 
    # When used in conjunction with a format statement (hint format["%1",side player]), the returned strings are: "WEST", "EAST", "GUER", "CIV", "LOGIC", "ENEMY" (eg: renegades), "AMBIENT LIFE" or "UNKNOWN"
    #  
    # ==== Syntax
    #
    #      Side = side unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object or Group  
    #
    # ==== Returns
    #
    #      Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # CfgVehicles config side value, Side, #playerSide, #west, #east, #resistance, #civilian, #sideLogic, #sideFriendly, #sideEnemy, #sideUnknown, #playerSide, #side location, Side relations
    # 
    # Official Wiki: https://community.bistudio.com/wiki/side
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? (side player == west) : hint "You are on the West side." SQS
    # 
    # ====== Example 2:
    # 
    #    if (side player == west) then {hint "You are on the West side.";}; SQF
    # 
    # ====== Example 3:
    # 
    #    _sideAlsoWorkingForDead = side (group player);
    # 
    def side _args
      "side _args;" 
    end

    # Types text to the side radio channel.
    # 
    # ==== Description
    # 
    # Must have assigned "itemRadio" to see or transmit the messages.
    # 
    # Note: This function only types text to the list, it does not broadcast the message.
    # 
    # If you want the message to show on all computers, you have to execute it on all of them
    #  
    # ==== Syntax
    #
    #      [side, string] sideChat chatText
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +chatText+ - String  
    # *    +side+ - Side  
    # *    +string+ - String  
    # *    +chatText+ - String  
    #
    # ==== Returns
    #
    #      None.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #globalChat, #groupChat
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sideChat
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne sideChat "Show this text"
    # 
    # ====== Example 2:
    # 
    #     PAPABEAR=[West,"HQ"]; PAPABEAR SideChat "Hi there";
    #    ____________________________________________________________________________________________
    # 
    def sideChat _obj, _args
      "_obj sideChat _args;" 
    end

    # The Enemy side (used for renegades).
    # 
    # ==== Description
    # 
    # Unit of this side is enemy to everyone.
    # 
    # To become one, you can attack members of your own side
    #  
    # ==== Syntax
    #
    #      Side = sideEnemy
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Side, #side, #west, #east, #resistance, #civilian, #sideLogic, #sideFriendly, #sideUnknown, #playerSide, #side location, Side relations
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sideEnemy
    #
    # ==== Examples
    # 
    def sideEnemy 
      "sideEnemy" 
    end

    # The Friendly side (used for captives)
    # 
    # ==== Syntax
    #
    #      Side = sideFriendly
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Side, #side, #west, #east, #resistance, #civilian, #sideLogic, #sideUnknown, #sideEnemy, #playerSide, #side location, Side relations
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sideFriendly
    #
    # ==== Examples
    # 
    def sideFriendly 
      "sideFriendly" 
    end

    # The Logic side
    # 
    # ==== Syntax
    #
    #      Side = sideLogic
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Side, #side, #west, #east, #resistance, #civilian, #sideUnknown, #sideFriendly, #sideEnemy, #playerSide, #side location, Side relations
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sideLogic
    #
    # ==== Examples
    # 
    def sideLogic 
      "sideLogic" 
    end

    # Send the message to the side radio channel.
    # 
    # ==== Description
    # 
    # Message is defined in Description.
    # 
    # ext file
    #  
    # ==== Syntax
    #
    #      unitName sideRadio chat
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +chat+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sideRadio
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _soldierOne sideRadio "messageOne"
    # 
    def sideRadio _obj, _args
      "_obj sideRadio _args;" 
    end

    # The unknown side
    # 
    # ==== Syntax
    #
    #      sideUnknown
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Side, #side, #west, #east, #resistance, #civilian, #sideLogic, #sideFriendly, #sideEnemy, #playerSide, #side location, Side relations
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sideUnknown
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def sideUnknown 
      "sideUnknown" 
    end

    # Return all simple tasks assigned to given person
    # 
    # ==== Syntax
    #
    #      simpleTasks person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createSimpleTask currentTask
    # 
    # Official Wiki: https://community.bistudio.com/wiki/simpleTasks
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def simpleTasks _args
      "simpleTasks _args;" 
    end

    # Returns density of clouds at given position
    # 
    # ==== Syntax
    #
    #      simulCloudDensity pos
    #
    # ==== Parameters
    # 
    # *    +pos+ - Position  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/simulCloudDensity
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    simulCloudDensity (getPos player)
    # 
    def simulCloudDensity _args
      "simulCloudDensity _args;" 
    end

    # Returns clouds occlusion between two given points (0 - no clouds, 1 - full clouds)
    # 
    # ==== Syntax
    #
    #      simulCloudOcclusion [pos1,pos2]
    #
    # ==== Parameters
    # 
    # *    +pos1+ - Position  
    # *    +pos2+ - Position  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/simulCloudOcclusion
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def simulCloudOcclusion _args
      "simulCloudOcclusion _args;" 
    end

    # Returns if given position is in clouds
    # 
    # ==== Syntax
    #
    #      simulInClouds pos
    #
    # ==== Parameters
    # 
    # *    +pos+ - Position  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/simulInClouds
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    simulInClouds (getPos player)
    # 
    def simulInClouds _args
      "simulInClouds _args;" 
    end

    # Synchronizes Simul Weather with Arma weather, generates all keyframes
    # 
    # ==== Syntax
    #
    #      simulWeatherSync
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/simulWeatherSync
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def simulWeatherSync 
      "simulWeatherSync" 
    end

    # Check if the entity has enabled simulation
    # 
    # ==== Syntax
    #
    #      simulationEnabled entity
    #
    # ==== Parameters
    # 
    # *    +entity+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #enableSimulation, #enableSimulationGlobal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/simulationEnabled
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def simulationEnabled _args
      "simulationEnabled _args;" 
    end

    # Sine of x, argument in Degrees
    # 
    # ==== Syntax
    #
    #      Number = sin x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sin
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _sine = sin 30 ...... Result is 0.5
    # 
    def sin _args
      "sin _args;" 
    end

    # Returns a location's size
    # 
    # ==== Syntax
    #
    #      size location
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    #
    # ==== Returns
    #
    #      Array = in format [x,y] in meters
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setSize
    # 
    # Official Wiki: https://community.bistudio.com/wiki/size
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _locSize = size myLocation
    # 
    def size _args
      "size _args;" 
    end

    # Returns an approximate size of the object of given type in meters.
    # 
    # ==== Description
    # 
    # Size returned is usually bigger than the biggest size of the object along any of the axes.
    # 
    # For example if object is 10 x 4 x 5 the sizeOf value returned expected to be around 10.
    # 
    # If you need to estimate the size of the object more precisely, use boundingBox or boundingBoxReal.
    # 
    # NOTE: The object has to be present in current mission to be able to read its size (otherwise zero will be returned)
    #  
    # ==== Syntax
    #
    #      Number = sizeOf type
    #
    # ==== Parameters
    # 
    # *    +type+ - String  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #boundingBox, #boundingBoxReal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sizeOf
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _dimension = sizeOf "M1Abrams"; //returns 10.7833
    # 
    def sizeOf _args
      "sizeOf _args;" 
    end

    # Returns current level of ability of person, in range between 0 and 1.
    # 
    # ==== Description
    # 
    # Skill 1 is highest skill
    #  
    # ==== Syntax
    #
    #      unitName skill skillType (Arma2 only)
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +unitName+ - Object  
    # *    +skillType+ - String - Possible values are:  
    # *    +"general"Return Value+ -   
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #skillFinal, #setSkill, #setSkill array, #setUnitAbility, CfgAISkill, AI Combat Modes
    # 
    # Official Wiki: https://community.bistudio.com/wiki/skill
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _skill = skill unit1 
    # 
    # ====== Example 2:
    # 
    #    _myEndurance = player skill "Endurance"
    # 
    def skill _obj, _args
      "_obj skill _args;" 
    end

    # Returns final, calculated and combined sub skill value of given unit
    # 
    # ==== Syntax
    #
    #      unitName skillFinal sub-skill
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +subskill+ - String  
    # *    +Possible values are+ -   
    # *    +"general"Return Value+ -   
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #skill, #setSkill, #setSkill array, #setUnitAbility, CfgAISkill, AI Combat Modes
    # 
    # Official Wiki: https://community.bistudio.com/wiki/skillFinal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     player skillFinal "Endurance" 
    # 
    def skillFinal _obj, _args
      "_obj skillFinal _args;" 
    end

    # Jumps the specified number of hours forward or backward.
    # 
    # ==== Description
    # 
    # The time of day and tides are adjusted, but no changes are made to any units.
    # 
    # If present, the lower level of clouds instantly jump to the position they would be in if time had passed normally
    #  
    # ==== Syntax
    #
    #      skipTime duration
    #
    # ==== Parameters
    # 
    # *    +duration+ - Number - Hours to skip.A positive value will create a forward time jump, a negative value will jump backwards.One second is roughly 0.00026 hours.Any calculations must be enclosed in parentheses, e.g. skipTime (_seconds/3600)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Even though the immediate effect of skipTime is only local, the new time will propagate through the network after 30 seconds or so.
    # 
    # ==== See Also
    # 
    # #setDate, #accTime
    # 
    # Official Wiki: https://community.bistudio.com/wiki/skipTime
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    skipTime 5
    # 
    def skipTime _args
      "skipTime _args;" 
    end

    # Suspend execution for given time in seconds.
    # 
    # ==== Description
    # 
    # The sleep precision is given by a framerate, the delay given is the minimal delay expected.
    # 
    # Must be called inside of a context which is interruptible, i.
    # 
    # e.
    # 
    # a script executed by execVM or spawn
    #  
    # ==== Syntax
    #
    #      sleep delay
    #
    # ==== Parameters
    # 
    # *    +delay+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Control Structures
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sleep
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    sleep 0.5;
    # 
    def sleep _args
      "sleep _args;" 
    end

    # Return current thumb position of slider idc of topmost user dialog
    # 
    # ==== Syntax
    #
    #      sliderPosition control
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +control+ - Control  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #sliderSetPosition
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sliderPosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _slidepos1 = sliderPosition 105
    # 
    def sliderPosition _args
      "sliderPosition _args;" 
    end

    # Return limits, as an Array [min, max] of slider idc of topmost user dialog
    # 
    # ==== Syntax
    #
    #      sliderRange control
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +control+ - Control  
    #
    # ==== Returns
    #
    #      Array: [min, max]
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sliderRange
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _slidelimits1 = sliderRange 105
    # 
    def sliderRange _args
      "sliderRange _args;" 
    end

    # Set current thumb position of slider idc of topmost user dialog
    # 
    # ==== Syntax
    #
    #      control sliderSetPosition pos
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +pos+ - Number  
    # *    +control+ - Control  
    # *    +pos+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #sliderPosition
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sliderSetPosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    sliderSetPosition [101, 50]
    # 
    def sliderSetPosition _obj, _args
      "_obj sliderSetPosition _args;" 
    end

    # Set limits of slider idc of topmost user dialog
    # 
    # ==== Syntax
    #
    #      control sliderSetRange [min, max]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +min+ - Number  
    # *    +max+ - Number  
    # *    +control+ - Control  
    # *    +[min, max]+ - Array  
    # *    +min+ - Number  
    # *    +max+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sliderSetRange
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    sliderSetRange [101, 0, 100]
    # 
    def sliderSetRange _obj, _args
      "_obj sliderSetRange _args;" 
    end

    # Set speed of slider with id idc of topmost user dialog.
    # 
    # ==== Description
    # 
    # Click to arrow - move by line
    # 
    # Click to scale outside thumb - move by page
    #  
    # ==== Syntax
    #
    #      control sliderSetSpeed [line, page]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +line+ - Number  
    # *    +page+ - Number  
    # *    +control+ - Control  
    # *    +[line, page]+ - Array  
    # *    +line+ - Number  
    # *    +page+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sliderSetSpeed
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    sliderSetspeed [101, 0.5, 2]
    # 
    def sliderSetSpeed _obj, _args
      "_obj sliderSetSpeed _args;" 
    end

    # Return speed, as an Array [min, max] of slider idc of topmost user dialog
    # 
    # ==== Syntax
    #
    #      sliderSpeed control
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number of control  
    # *    +control+ - Control  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sliderSpeed
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _slidespeed1 = sliderspeed 105
    # 
    def sliderSpeed _args
      "sliderSpeed _args;" 
    end

    # Get array with all magazines of the given unit
    # 
    # ==== Syntax
    #
    #      soldierMagazines unit
    #
    # ==== Parameters
    # 
    # *    +unit + - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #uniformMagazines, #vestMagazines, #backpackMagazines
    # 
    # Official Wiki: https://community.bistudio.com/wiki/soldierMagazines
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    soldierMagazines player;
    #    [
    #    	"6.5mm 30Rnd STANAG Mag(30/30)[id/cr:1/0](5x)",
    #    	"9mm 16Rnd Mag(16/16)[id/cr:7/0](2x)",
    #    	"RGO Frag Grenade(1/1)[id/cr:10/0](2x)",
    #    	"Smoke Grenade (White)(1/1)[id/cr:12/0](1x)",
    #    	"Smoke Grenade (Green)(1/1)[id/cr:13/0](1x)",
    #    	"Chemlight (Green)(1/1)[id/cr:14/0](2x)",
    #    	"Titan AT Missile(1/1)[id/cr:16/0](2x)"
    #    ]
    # 
    def soldierMagazines _args
      "soldierMagazines _args;" 
    end

    # Check if unit has some ammo
    # 
    # ==== Syntax
    #
    #      Boolean = someAmmo unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #ammo, #magazines
    # 
    # Official Wiki: https://community.bistudio.com/wiki/someAmmo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? not (someAmmo _loon1) : hint "Loon1 is out of ammo!"
    # 
    def someAmmo _args
      "someAmmo _args;" 
    end

    # Check current sound volume (set by fadeSound)
    # 
    # ==== Syntax
    #
    #      Number = soundVolume
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/soundVolume
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _vol = soundVolume
    # 
    def soundVolume 
      "soundVolume" 
    end

    # Starts running a new script (SQF).
    # 
    # ==== Description
    # 
    # Additional arguments are passed in local _this variable.
    # 
    # The new script is running in scheduled environment, spawn does not wait for it to be done, instead spawn returns a Script handle
    #  
    # ==== Syntax
    #
    #      Script = arguments spawn code
    #
    # ==== Parameters
    # 
    # *    +arguments+ - Any Value  
    # *    +code+ - Code  
    #
    # ==== Returns
    #
    #      Script
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #call, #execVM, #execFSM, #exec, #compile, #preprocessFileLineNumbers, #preprocessFile, #terminate, #scriptDone
    # 
    # Official Wiki: https://community.bistudio.com/wiki/spawn
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [] spawn { player globalChat "This is run in parallel."; };
    # 
    # ====== Example 2:
    # 
    #    There is no guarantee that spawned scripts will be executed in the same order they spawned: 
    #    for "_i" from 0 to 100 do {
    #    	_null = _i spawn {
    #    		diag_log _this
    #    	}
    #    }
    #    Result: 51,1,2...49,50,0,52,53...100
    # 
    def spawn _obj, _args
      "_obj spawn _args;" 
    end

    # Returns the speaker of a person
    # 
    # ==== Syntax
    #
    #      speaker person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setSpeaker
    # 
    # Official Wiki: https://community.bistudio.com/wiki/speaker
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    speaker player
    # 
    def speaker _args
      "speaker _args;" 
    end

    # Object speed (in km/h)
    # 
    # ==== Syntax
    #
    #      Number = speed object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #limitSpeed
    # 
    # Official Wiki: https://community.bistudio.com/wiki/speed
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? (speed _truck1) >= 100 : hint "You're going too fast!"
    # 
    def speed _args
      "speed _args;" 
    end

    # Returns speed mode of the group, which can be any of the following: 
    # 
    # ==== Description
    # 
    # "LIMITED"
    # 
    # "NORMAL"
    # 
    # "FULL"
    #  
    # ==== Syntax
    #
    #      String = speedMode groupName
    #
    # ==== Parameters
    # 
    # *    +groupName+ - Object or Group  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setSpeedMode
    # 
    # Official Wiki: https://community.bistudio.com/wiki/speedMode
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _grpspeed1 = speedMode grp1
    # 
    def speedMode _args
      "speedMode _args;" 
    end

    # Returns square root of x
    # 
    # ==== Syntax
    #
    #      Number =  sqrt x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sqrt
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _sq = sqrt 9 ...... Result is 3
    # 
    def sqrt _args
      "sqrt _args;" 
    end

    # Returns the stance of given unit
    # 
    # ==== Syntax
    #
    #      stance unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/stance
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def stance _args
      "stance _args;" 
    end

    # Shows loading screen with the given text, using the given resource.
    # 
    # ==== Description
    # 
    # While loading screen is shown, simulation and scene drawing is disabled, scripts run at full speed
    #  
    # ==== Syntax
    #
    #      startLoadingScreen [text] or [text,resource]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #endLoadingScreen, #progressLoadingScreen
    # 
    # Official Wiki: https://community.bistudio.com/wiki/startLoadingScreen
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    startLoadingScreen ["Loading My Mission, please wait..."];
    # 
    # ====== Example 2:
    # 
    #    startLoadingScreen ["Can't skip loading time...", "MyLoadingRsc"];
    # 
    def startLoadingScreen _args
      "startLoadingScreen _args;" 
    end

    # Optionally can set step.
    # 
    # ==== Description
    # 
    # If you want to count down, step must be specified, and set negative.
    # 
    # Default value is 1
    #  
    # ==== Syntax
    #
    #      for /.../ step step
    #
    # ==== Parameters
    # 
    # *    +for /.../+ - For Type  
    # *    +step+ - Number  
    #
    # ==== Returns
    #
    #      For Type
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Control Structures
    # 
    # Official Wiki: https://community.bistudio.com/wiki/step
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    for "_x" from 20 to 10 step -2 do {..code..}
    # 
    def step _obj, _args
      "_obj step _args;" 
    end

    # Stop AI unit.
    # 
    # ==== Description
    # 
    # Stopped unit will not be able to move, fire, or change its orientation to follow a watched object.
    # 
    # It may still change the stance if deemed appropriate (e.
    # 
    # g.
    # 
    # under fire).
    # 
    # Use disableAI to disable specific AI capabilities
    #  
    # ==== Syntax
    #
    #      unitName stop stop
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +stop+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #stopped, #doStop, #commandStop
    # 
    # Official Wiki: https://community.bistudio.com/wiki/stop
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    loon1 stop true
    # 
    def stop _obj, _args
      "_obj stop _args;" 
    end

    # Check if unit is stopped by stop command
    # 
    # ==== Syntax
    #
    #      Boolean = stopped unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #stop
    # 
    # Official Wiki: https://community.bistudio.com/wiki/stopped
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    ? (stopped _loon1) : hint "Loon1 is stopped"
    # 
    def stopped _args
      "stopped _args;" 
    end

    # Converts any variable to a string
    # 
    # ==== Syntax
    #
    #      String = str value
    #
    # ==== Parameters
    # 
    # *    +value+ - Anything  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/str
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _s = str (2 + 3);
    #    The value of _s is the string "5"
    # 
    # ====== Example 2:
    # 
    #    a = [];
    #    ac = 0;
    #    while {ac < 5} do {
    #    	ac = count a;
    #    	a set [ac, format ["Index %1", ac]];
    #    };
    #    hintSilent str a;
    #    Hints all of ["Index 0","Index 1","Index 2","Index 3","Index 4"] including brackets, quotes and commas.
    # 
    def str _args
      "str _args;" 
    end

    # Returns the sun to moon transition state
    # 
    # ==== Syntax
    #
    #      Number = sunOrMoon
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #moonIntensity
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sunOrMoon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _transitionState = sunOrMoon;
    # 
    def sunOrMoon 
      "sunOrMoon" 
    end

    # Creates a list of supported operators and type.
    # 
    # ==== Description
    # 
    # Each field of array has the format: "x:name" Where x can be:
    # 
    # 't' - type
    # 
    # 'n' - null operator
    # 
    # 'u' - unary operator
    # 
    # 'b' - binary operator.
    # 
    # 
    # 
    # 'name' is the operator or type name (in case operator, type of input operands is included).
    # 
    # 
    # 
    # mask parameter can be an empty string, or one of field.
    # 
    # In this case, function returns empty array, if operator is not included in the list.
    # 
    # Limited wildcard support is available.
    # 
    # Type x may be replaced with *, meaning all types.
    # 
    # For the mask partial match may be used, like abc*, meaning any operators starting with 'abc' are reported, for example: *:name, t:*, t:name* or *:*
    #  
    # ==== Syntax
    #
    #      Array =  supportInfo mask
    #
    # ==== Parameters
    # 
    # *    +mask+ - String  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/supportInfo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    supportInfo "b:select*";   //Returns ["b:ARRAY select SCALAR","b:ARRAY select BOOL"]
    # 
    def supportInfo _args
      "supportInfo _args;" 
    end

    # Force suppressive fire from the unit
    # 
    # ==== Syntax
    #
    #      unit suppressFor duration
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +duration+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/suppressFor
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _soldier1 suppressFor 10 
    #    Will force soldier1 to do suppressive fire to known enemies during 10 seconds
    # 
    def suppressFor _obj, _args
      "_obj suppressFor _args;" 
    end

    # Returns whether water is at given position
    # 
    # ==== Syntax
    #
    #      Boolean =  surfaceIsWater position
    #
    # ==== Parameters
    # 
    # *    +position+ - Array - format Position2D  or Position3D in which case Z will be ignored  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #surfaceType, #surfaceNormal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/surfaceIsWater
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _isWater = surfaceIsWater [1000, 3000];
    # 
    # ====== Example 2:
    # 
    #    _isWater = surfaceIsWater position player;
    # 
    def surfaceIsWater _args
      "surfaceIsWater _args;" 
    end

    # Returns surface normal on given position
    # 
    # ==== Syntax
    #
    #      surfaceNormal position
    #
    # ==== Parameters
    # 
    # *    +position+ - Array - format Position2D or Position3D in which case Z will be ignored  
    #
    # ==== Returns
    #
    #      Array - Example: [-0.102321,0.19977,0.974486]
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setVectorUp, #surfaceIsWater, #surfaceType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/surfaceNormal
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _normal = surfaceNormal [300, 500];
    # 
    # ====== Example 2:
    # 
    #    _normal = surfaceNormal position player;
    # 
    def surfaceNormal _args
      "surfaceNormal _args;" 
    end

    # Returns what surface type is at the given position
    # 
    # ==== Syntax
    #
    #      String = surfaceType position
    #
    # ==== Parameters
    # 
    # *    +position+ - Array - format Position2D or Position3D in which case Z will be ignored  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #surfaceIsWater, #surfaceNormal
    # 
    # Official Wiki: https://community.bistudio.com/wiki/surfaceType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _surface = surfaceType [4500, 4500];
    # 
    # ====== Example 2:
    # 
    #    _surface = surfaceType position player;
    # 
    def surfaceType _args
      "surfaceType _args;" 
    end

    # Sets the target depth level for swimming soldier
    # 
    # ==== Syntax
    #
    #      unit swimInDepth value
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +value+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/swimInDepth
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    soldier swimInDepth -20
    # 
    def swimInDepth _obj, _args
      "_obj swimInDepth _args;" 
    end

    # See switch do
    # 
    # ==== Syntax
    #
    #      switch exp
    #
    # ==== Parameters
    # 
    # *    +exp+ - Anything  
    #
    # ==== Returns
    #
    #      Switch Type
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Control Structures
    # 
    # Official Wiki: https://community.bistudio.com/wiki/switch
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    switch (_a) do {case 1 : {block}; case 2 : {block}; default {block};}
    # 
    # ====== Example 2:
    # 
    #    _color =switch (side player) do {   case west: {"ColorGreen"};   case east: {"ColorRed"}; };
    # 
    # ====== Example 3:
    # 
    #    _fn_moveForward  = { /*...code...*/ };_fn_moveBackward = { /*...code...*/ };_fn_invalidKey   = { /*...code...*/ };switch true do {  case (_dikCode in actionKeys "MoveForward")  : _fn_moveForward;  case (_dikCode in actionKeys "MoveBackward") : _fn_moveBackward;  default                                        _fn_invalidKey;};
    # 
    # ====== Example 4:
    # 
    #    switch _var do {
    #    	case "0";
    #    	default {hint str ["default", _var]};
    #    	case "3": {hint str ["3", _var]};
    #    	case "1";
    #    	case "4";
    #    	case "2": {hint str ["2", _var]};
    #    };
    #    _var = "0"; //-> ["3", "0"]
    #    _var = "1"; //-> ["2", "1"]
    #    _var = "2"; //-> ["2", "2"]
    #    _var = "3"; //-> ["3", "3"]
    #    _var = "4"; //-> ["2", "4"]
    #    _var = "5"; //-> ["default", "5"]
    # 
    def switch _args
      "switch _args;" 
    end

    # When used on a person, the given action is started immediately (there is no transition).
    # 
    # ==== Description
    # 
    # Use switchmove "" to switch back to the default movement if there is no transition back, otherwise the person may be stuck
    #  
    # ==== Syntax
    #
    #      soldier switchAction action
    #
    # ==== Parameters
    # 
    # *    +soldier+ - Object  
    # *    +action+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/switchAction
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    soldierOne switchAction "SitDown"
    # 
    def switchAction _obj, _args
      "_obj switchAction _args;" 
    end

    # Switch camera to given vehicle / camera.
    # 
    # ==== Description
    # 
    # Mode is one of:
    # 
    # "INTERNAL": 1st person
    # 
    # "GUNNER": optics / sights
    # 
    # "EXTERNAL": 3rd person
    # 
    # "GROUP": group
    # 
    # "VIEW": exactly what spectated unit sees (gun optics, binoculars, TI and NV, etc.
    # 
    # ) (VBS2 1.
    # 
    # 30+ only)
    # 
    # Note: If you switch to a unit in a vehicle, this command uses the correct turret
    #  
    # ==== Syntax
    #
    #      unitName switchCamera mode
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +mode+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #cameraView, #cameraOn, #cameraEffect, #selectPlayer, #remoteControl
    # 
    # Official Wiki: https://community.bistudio.com/wiki/switchCamera
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _loon1 switchCamera "External" 
    # 
    def switchCamera _obj, _args
      "_obj switchCamera _args;" 
    end

    # When used on a person,the given move is started immediately (there is no transition)
    # 
    # ==== Syntax
    #
    #      soldier switchGesture moveName
    #
    # ==== Parameters
    # 
    # *    +soldier+ - -  
    # *    +Object,moveName+ - -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/switchGesture
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    soldierOne switchGesture "Wave"
    # 
    def switchGesture _obj, _args
      "_obj switchGesture _args;" 
    end

    # Controls whether a lamp is lit or not
    # 
    # ==== Syntax
    #
    #      lamp switchLight mode
    #
    # ==== Parameters
    # 
    # *    +lamp+ - Object  
    # *    +mode+ - String - Mode can be: "ON", "OFF" or "AUTO" (Lamp is on only during nighttime , default)  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #lightIsOn
    # 
    # Official Wiki: https://community.bistudio.com/wiki/switchLight
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (object 12345) switchLight "off" 
    # 
    # ====== Example 2:
    # 
    #    nearestObject  [player, "Streetlamp"] switchLight "OFF" 
    # 
    def switchLight _obj, _args
      "_obj switchLight _args;" 
    end

    # When used on a person, the given move is started immediately (there is no transition).
    # 
    # ==== Description
    # 
    # Use switchmove "" to switch back to the default movement if there is no transition back, otherwise the person may be stuck.
    # 
    # List of moves in ArmA 2List of moves in Armed AssaultList of moves in Operation Flashpoint: Resistance
    #  
    # ==== Syntax
    #
    #      person switchmove movename
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    # *    +movename+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #playAction, #playActionNow, #playMove, #playMoveNow, #playGesture
    # 
    # Official Wiki: https://community.bistudio.com/wiki/switchmove
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _loon1 switchMove "FXStandDip" 
    # 
    def switchmove _obj, _args
      "_obj switchmove _args;" 
    end

    # Return a list of units accessible through Team Switch
    # 
    # ==== Syntax
    #
    #      Array = switchableUnits
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Team_Switch, #units, #playableUnits, #allUnits, #allGroups, #vehicles
    # 
    # Official Wiki: https://community.bistudio.com/wiki/switchableUnits
    #
    # ==== Examples
    # 
    def switchableUnits 
      "switchableUnits" 
    end

    # Add given objects to the unit's list of synchronized objects
    # 
    # ==== Syntax
    #
    #      unit synchronizeObjectsAdd [objects]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    # *    +[objects]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/synchronizeObjectsAdd
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _acm = _groupLogic createUnit ["AmbientCombatManager",position player,[],0,"NONE"];
    #    _acm synchronizeObjectsAdd [player];
    # 
    def synchronizeObjectsAdd _obj, _args
      "_obj synchronizeObjectsAdd _args;" 
    end

    # Remove given objects from the unit's list of synchronized objects
    # 
    # ==== Syntax
    #
    #      unit synchronizeObjectsRemove [objects]
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    # *    +[objects]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/synchronizeObjectsRemove
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def synchronizeObjectsRemove _obj, _args
      "_obj synchronizeObjectsRemove _args;" 
    end

    # Synchronizes the trigger with zero or more waypoints
    # 
    # ==== Syntax
    #
    #      trigger synchronizeTrigger [waypoint1, ...]
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object - trigger to synchronize  
    # *    +[waypoint1, waypoint2, ...]+ - Array of waypoints to synchronize with trigger. Array can be empty to unset.  
    # *    +waypoint1+ - Waypoint - first waypoint  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createTrigger, #synchronizeWaypoint
    # 
    # Official Wiki: https://community.bistudio.com/wiki/synchronizeTrigger
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _trigger synchronizeTrigger []
    # 
    # ====== Example 2:
    # 
    #    _trigger synchronizeTrigger [_waypoint1]
    # 
    # ====== Example 3:
    # 
    #    _trigger synchronizeTrigger [_waypoint1, [_group5, 7], _waypoint3]
    # 
    def synchronizeTrigger _obj, _args
      "_obj synchronizeTrigger _args;" 
    end

    # Synchronizes the waypoint with other waypoints.
    # 
    # ==== Description
    # 
    # Each waypoint is given as an array [group, index]
    #  
    # ==== Syntax
    #
    #      waypoint synchronizeWaypoint [waypoint1, waypoint2, ...]
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +[waypoint1, waypoint2, ...]+ - Array of waypoints  
    # *    +waypoint1+ - Array - format Waypoint  
    # *    +waypoint2+ - Array - format Waypoint  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/synchronizeWaypoint
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_group1, 2] synchronizeWaypoint [ [_group2, 3] ]
    # 
    def synchronizeWaypoint _obj, _args
      "_obj synchronizeWaypoint _args;" 
    end

    # Synchronizes a trigger with other waypoints.
    # 
    # ==== Description
    # 
    # Each waypoint is given as an array [group, index]
    #  
    # ==== Syntax
    #
    #      trigger synchronizeWaypoint [waypoint1, waypoint2, ...]
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    # *    +[waypoint1, waypoint2, ...]+ - Array of waypoints  
    # *    +waypoint1+ - Array - format Waypoint  
    # *    +waypoint2+ - Array - format Waypoint  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #createTrigger, #synchronizeTrigger
    # 
    # Official Wiki: https://community.bistudio.com/wiki/synchronizeWaypoint
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _myTrigger synchronizeWaypoint [ [_group2, 3] ]
    # 
    def synchronizeWaypoint _obj, _args
      "_obj synchronizeWaypoint _args;" 
    end

    # Return the list of objects synchronized with the given unit
    # 
    # ==== Syntax
    #
    #      synchronizedObjects unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/synchronizedObjects
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _objects = synchronizedObjects _logic
    # 
    def synchronizedObjects _args
      "synchronizedObjects _args;" 
    end

    # Returns the list of triggers synchronized with a given waypoint
    # 
    # ==== Syntax
    #
    #      synchronizedTriggers waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Waypoint  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/synchronizedTriggers
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def synchronizedTriggers _args
      "synchronizedTriggers _args;" 
    end

    # Returns the list of waypoints synchronized with a given trigger or waypoint
    # 
    # ==== Syntax
    #
    #      synchronizedWaypoints obj
    #
    # ==== Parameters
    # 
    # *    +obj+ - Object or Waypoint  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/synchronizedWaypoints
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def synchronizedWaypoints _args
      "synchronizedWaypoints _args;" 
    end

    # Types text to the system radio channel
    # 
    # ==== Syntax
    #
    #      systemChat text
    #
    # ==== Parameters
    # 
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # This function only types text to the list, it does not broadcast the message. If you want the message to show on all computers, you have to execute it on all of them.
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/systemChat
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def systemChat _args
      "systemChat _args;" 
    end

    # Returns the currently selected system of units.
    # 
    # ==== Description
    # 
    # 0: Metric
    # 
    # 1: Mixed (ground vehicles use Metric / air vehicles use Imperial)
    # 
    # 2: Imperial
    #  
    # ==== Syntax
    #
    #      systemOfUnits
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # -
    # 
    # Official Wiki: https://community.bistudio.com/wiki/systemOfUnits
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _system = systemOfUnits;
    # 
    def systemOfUnits 
      "systemOfUnits" 
    end

    # Tangent of x, argument in Degrees
    # 
    # ==== Syntax
    #
    #      Number = tan x
    #
    # ==== Parameters
    # 
    # *    +x+ - Number  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Math Commands
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tan
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _tangent = tan 45  
    #    Result is 1
    # 
    def tan _args
      "tan _args;" 
    end

    # Aggregate candidates
    # 
    # ==== Syntax
    #
    #      [speaker, side, unit, place, time] targetsAggregate candidates
    #
    # ==== Parameters
    # 
    # *    +candidates+ - Array  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #targetsQuery
    # 
    # Official Wiki: https://community.bistudio.com/wiki/targetsAggregate
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _aggregation = [_this,"","","",""] targetsAggregate _selected;//ca\characters\scripts\reactCore_Full.fsm
    # 
    def targetsAggregate _obj, _args
      "_obj targetsAggregate _args;" 
    end

    # Find all targets known to sender matching given query
    # 
    # ==== Syntax
    #
    #      speaker targetsQuery [receiver,side,unit,place,time]
    #
    # ==== Parameters
    # 
    # *    +speaker+ - Object -  
    # *    +[receiver,side,unit,place,time]+ - Array -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #targetsAggregate
    # 
    # Official Wiki: https://community.bistudio.com/wiki/targetsQuery
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _candidates = _this targetsQuery [_from,_enemySide,"","",""];//ca\characters\scripts\reactCore_Full.fsm
    # 
    def targetsQuery _obj, _args
      "_obj targetsQuery _args;" 
    end

    # Return the child tasks of the specified task
    # 
    # ==== Syntax
    #
    #      taskChildren task
    #
    # ==== Parameters
    # 
    # *    +task+ - Task -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/taskChildren
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def taskChildren _args
      "taskChildren _args;" 
    end

    # Return if task is completed.
    # 
    # ==== Description
    # 
    # (state Succeeded, Failed or Canceled)
    #  
    # ==== Syntax
    #
    #      taskCompleted task
    #
    # ==== Parameters
    # 
    # *    +task+ - Task  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/taskCompleted
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def taskCompleted _args
      "taskCompleted _args;" 
    end

    # Returns the sub-parts of the task description
    # 
    # ==== Syntax
    #
    #      Array = taskDescription task
    #
    # ==== Parameters
    # 
    # *    +task+ - Task  
    #
    # ==== Returns
    #
    #      Array: [Task description, Task title, Task waypoint description]
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setSimpleTaskDescription, #createSimpleTask
    # 
    # Official Wiki: https://community.bistudio.com/wiki/taskDescription
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _taskDescArray = taskDescription _task;
    # 
    def taskDescription _args
      "taskDescription _args;" 
    end

    # Returns the position of the task (as specified by destination parameter in config)
    # 
    # ==== Syntax
    #
    #      taskDestination task
    #
    # ==== Parameters
    # 
    # *    +task+ - Task -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/taskDestination
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def taskDestination _args
      "taskDestination _args;" 
    end

    # Shows info about new, changed or failed task.
    # 
    # ==== Description
    # 
    # The text can contain several lines.
    # 
    # \n is used to indicate the end of a line.
    # 
    # 
    # 
    # To maintain Arma 3 visual style, it's recommended to use BIS_fnc_showNotification instead
    #  
    # ==== Syntax
    #
    #      taskHint [hintText, [r, g, b, a], icon]
    #
    # ==== Parameters
    # 
    # *    +hintText+ - String  
    # *    +[r, g, b, a]+ - Array - format Color  
    # *    +icon+ - String - possible values: taskNew, taskDone, taskFailed, taskCurrent  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/taskHint
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    taskhint ["Task failed!\nBad job!", [1, 0, 0, 1], "taskFailed"]
    # 
    def taskHint _args
      "taskHint _args;" 
    end

    # A non-existing task.
    # 
    # ==== Description
    # 
    # This value is not equal to anything, including itself
    #  
    # ==== Syntax
    #
    #      taskNull
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Task
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/taskNull
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    taskNull == taskNull
    #    result is false
    # 
    def taskNull 
      "taskNull" 
    end

    # Return the parent task of the specified task
    # 
    # ==== Syntax
    #
    #      taskParent task
    #
    # ==== Parameters
    # 
    # *    +task+ - Task -  
    #
    # ==== Returns
    #
    #      Task
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/taskParent
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def taskParent _args
      "taskParent _args;" 
    end

    # Send a result of the task to the task sender
    # 
    # ==== Syntax
    #
    #      task sendTaskResult [state,result,sentence]
    #
    # ==== Parameters
    # 
    # *    +task+ - Task -  
    # *    +[state,result,sentence]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/sendTaskResult
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def sendTaskResult _obj, _args
      "_obj sendTaskResult _args;" 
    end

    # Returns the current state of a task.
    # 
    # ==== Description
    # 
    # 
    # 
    # Possible return values are:
    # 
    # None
    # 
    # Created
    # 
    # Assigned
    # 
    # Succeeded
    # 
    # Failed
    # 
    # Canceled
    #  
    # ==== Syntax
    #
    #      String = taskState  Task
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      String - current state of task
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Tasks, #createSimpleTask, #removeSimpleTask, #setSimpleTaskDescription, #setSimpleTaskDestination, #setTaskResult, #setTaskState
    # 
    # Official Wiki: https://community.bistudio.com/wiki/taskState
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tskSomeTask = player createSimpleTask ["NewTask"];
    #    hint format["Taskstate: %1", taskState tskSomeTask];
    # 
    def taskState _args
      "taskState _args;" 
    end

    # Return an agent for given person
    # 
    # ==== Syntax
    #
    #      teamMember person
    #
    # ==== Parameters
    # 
    # *    +person+ - Object  
    #
    # ==== Returns
    #
    #      Team Member
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addTeamMember, #createTeam, #deleteTeam, #forEachMemberTeam, #removeTeamMember, #teamMemberNull, #teamName, #teams, #teamType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/teamMember
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _agent = teamMember player
    # 
    def teamMember _args
      "teamMember _args;" 
    end

    # A non-existing team member.
    # 
    # ==== Description
    # 
    # This value is not equal to anything, including itself
    #  
    # ==== Syntax
    #
    #      teamMemberNull
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Team Member
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addTeamMember, #createTeam, #deleteTeam, #forEachMemberTeam, #removeTeamMember, #teamMember, #teamName, #teams, #teamType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/teamMemberNull
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _teamMember == teamMemberNull
    #    result is false
    # 
    def teamMemberNull 
      "teamMemberNull" 
    end

    # Return a name of given team
    # 
    # ==== Syntax
    #
    #      teamName team
    #
    # ==== Parameters
    # 
    # *    +team+ - Team Member  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addTeamMember, #createTeam, #deleteTeam, #forEachMemberTeam, #removeTeamMember, #teamMember, #teamMemberNull, #teams, #teamType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/teamName
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _name = teamName _team
    # 
    def teamName _args
      "teamName _args;" 
    end

    # Invoke the Team Switch dialog (force it even when conditions are not met)
    # 
    # ==== Syntax
    #
    #      teamSwitch
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Team_Switch, #enableTeamSwitch, #onBriefingTeamSwitch, #onTeamSwitch, #teamSwitchEnabled
    # 
    # Official Wiki: https://community.bistudio.com/wiki/teamSwitch
    #
    # ==== Examples
    # 
    def teamSwitch 
      "teamSwitch" 
    end

    # Check if Team Switch is currently enabled.
    # 
    # ==== Description
    # 
    # Team Switch is enabled by default
    #  
    # ==== Syntax
    #
    #      Boolean = teamSwitchEnabled
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Team_Switch, #enableTeamSwitch, #onBriefingTeamSwitch, #onTeamSwitch, #teamSwitch
    # 
    # Official Wiki: https://community.bistudio.com/wiki/teamSwitchEnabled
    #
    # ==== Examples
    # 
    def teamSwitchEnabled 
      "teamSwitchEnabled" 
    end

    # Returns a type of given team
    # 
    # ==== Syntax
    #
    #      teamType team
    #
    # ==== Parameters
    # 
    # *    +team+ - Team Member  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addTeamMember, #createTeam, #deleteTeam, #forEachMemberTeam, #removeTeamMember, #teamMember, #teamMemberNull, #teamName, #teams
    # 
    # Official Wiki: https://community.bistudio.com/wiki/teamType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _type = teamType _team
    # 
    def teamType _args
      "teamType _args;" 
    end

    # Return a list of teams in the current mission
    # 
    # ==== Syntax
    #
    #      teams
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addTeamMember, #createTeam, #deleteTeam, #forEachMemberTeam, #removeTeamMember, #teamMember, #teamMemberNull, #teamName, #teamType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/teams
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _teams = teams
    # 
    def teams 
      "teams" 
    end

    # Terminate (abort) the script
    # 
    # ==== Syntax
    #
    #      terminate scriptHandle
    #
    # ==== Parameters
    # 
    # *    +scriptHandle+ - Script  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #execVM, #scriptDone
    # 
    # Official Wiki: https://community.bistudio.com/wiki/terminate
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _Script=[] ExecVM "Script.sqf";
    #     Sleep 5;
    #     terminate _Script;
    #     Hint "Script.sqf has been terminated after 5 seconds";
    # 
    def terminate _args
      "terminate _args;" 
    end

    # Checks for intersection of terrain between two positions.
    # 
    # ==== Description
    # 
    # Returns true if intersects with terrain.
    # 
    # Uses PositionATL
    #  
    # ==== Syntax
    #
    #      terrainIntersect [pos1, pos2]
    #
    # ==== Parameters
    # 
    # *    +pos1+ - PositionATL  
    # *    +pos2+ - PositionATL  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #intersect, #lineIntersects, #lineIntersectsWith, #terrainIntersectASL, #lineIntersectsObjs
    # 
    # Official Wiki: https://community.bistudio.com/wiki/terrainIntersect
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    terrainIntersect [getPosATL player, getPosATL chopper]
    # 
    # ====== Example 2:
    # 
    #    _doesIntersect = terrainIntersect [ position player, position enemy1 ];
    # 
    def terrainIntersect _args
      "terrainIntersect _args;" 
    end

    # Checks for intersection of terrain between two positions.
    # 
    # ==== Description
    # 
    # Returns true if intersects with terrain.
    # 
    # Uses PositionASL
    #  
    # ==== Syntax
    #
    #      terrainIntersectASL [pos1, pos2]
    #
    # ==== Parameters
    # 
    # *    +pos1+ - PositionASL  
    # *    +pos2+ - PositionASL  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #intersect, #lineIntersects, #lineIntersectsWith, #terrainIntersect, #lineIntersectsObjs
    # 
    # Official Wiki: https://community.bistudio.com/wiki/terrainIntersectASL
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    terrainIntersectASL [getPosASL player, getPosASL chopper]
    # 
    # ====== Example 2:
    # 
    #    _doesIntersect = terrainIntersectASL [ eyePos player, eyePos enemy1 ];
    # 
    def terrainIntersectASL _args
      "terrainIntersectASL _args;" 
    end

    # Creates a structured text containing the given plain text
    # 
    # ==== Syntax
    #
    #      Structured Text = text text
    #
    # ==== Parameters
    # 
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Structured Text
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/text
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _stxt2 = text "Hello world."
    # 
    def text _args
      "text _args;" 
    end

    # Dump argument value to debugging output.
    # 
    # ==== Description
    # 
    # Note: This command is non-functional in the retail version
    #  
    # ==== Syntax
    #
    #      textLog anything
    #
    # ==== Parameters
    # 
    # *    +anything+ - Any Value  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/textLog
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    textLog player
    # 
    def textLog _args
      "textLog _args;" 
    end

    # Debugging output.
    # 
    # ==== Description
    # 
    # This command is non-functional in the retail version
    #  
    # ==== Syntax
    #
    #      textLogFormat [format, arg1, arg2, ...]
    #
    # ==== Parameters
    # 
    # *    +format+ - dataType  
    # *    +arg1+ - Any Value  
    # *    +arg2+ - Any Value  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/textLogFormat
    #
    # ==== Examples
    # 
    def textLogFormat _args
      "textLogFormat _args;" 
    end

    # Returns a location's text value
    # 
    # ==== Syntax
    #
    #      text location
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/text
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _townName = text myTownLocation
    # 
    def text _args
      "text _args;" 
    end

    # First or second element of array is executed depending on result of if condition.
    # 
    # ==== Description
    # 
    # Result of the expression executed is returned as a result (result may be Nothing)
    #  
    # ==== Syntax
    #
    #      if then else
    #
    # ==== Parameters
    # 
    # *    +if+ - If Type  
    # *    +else+ - Array  
    #
    # ==== Returns
    #
    #      Anything
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Control Structures, #if, #else
    # 
    # Official Wiki: https://community.bistudio.com/wiki/then
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (a>b) then {c=1} else {c=2}
    # 
    # ====== Example 2:
    # 
    #    if (a>b) then {c=1;c=2}
    # 
    def then _obj, _args
      "_obj then _args;" 
    end

    # Throws an exception.
    # 
    # ==== Description
    # 
    # The exception is processed by first catch block
    #  
    # ==== Syntax
    #
    #      throw expression
    #
    # ==== Parameters
    # 
    # *    +expression+ - Anything  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #try, Exception handling
    # 
    # Official Wiki: https://community.bistudio.com/wiki/throw
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    throw "invalid argument"
    # 
    def throw _args
      "throw _args;" 
    end

    # Time elapsed since mission started (in seconds)
    # 
    # ==== Syntax
    #
    #      Number = time
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #daytime, #date, #dateToNumber
    # 
    # Official Wiki: https://community.bistudio.com/wiki/time
    #
    # ==== Examples
    # 
    def time 
      "time" 
    end

    # Obsolete command.
    # 
    # ==== Description
    # 
    # Use cutText instead
    #  
    # ==== Syntax
    #
    #      titleCut [text, type, speed]
    #
    # ==== Parameters
    # 
    # *    +text+ - String  
    # *    +type+ - String  
    # *    +speed+ - Number - optional, default 1.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #cutText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/titleCut
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    titleCut ["Hello, how are you?","Plain Down",3]
    # 
    def titleCut _args
      "titleCut _args;" 
    end

    # Terminate the title effect and set duration of the fade out phase to the given time
    # 
    # ==== Syntax
    #
    #      titleFadeOut duration
    #
    # ==== Parameters
    # 
    # *    +duration+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #titleText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/titleFadeOut
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    titleText ["Hi", "plain"]; titleFadeOut 2
    # 
    def titleFadeOut _args
      "titleFadeOut _args;" 
    end

    # Object title - Object can be defined in Description.
    # 
    # ==== Description
    # 
    # ext
    # 
    # type may be one of:
    # 
    # • "PLAIN"
    # 
    # • "PLAIN DOWN"
    # 
    # • "BLACK"
    # 
    # • "BLACK FADED"
    # 
    # • "BLACK OUT"
    # 
    # • "BLACK IN"
    # 
    # • "WHITE OUT"
    # 
    # • "WHITE IN"
    # 
    # See Title Effect Type for more information about these types
    #  
    # ==== Syntax
    #
    #      titleObj [text, type, speed]
    #
    # ==== Parameters
    # 
    # *    +text+ - String  
    # *    +type+ - String.  
    # *    +speed+ - Number - optional, default 1.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/titleObj
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    titleObj ["BISLogo", "PLAIN"]
    # 
    def titleObj _args
      "titleObj _args;" 
    end

    # Resource title - Resource can be defined in Description.
    # 
    # ==== Description
    # 
    # ext Also see cutRsc, with these two commands you can show two different resources at once
    #  
    # ==== Syntax
    #
    #      titleRsc [text, type, speed]
    #
    # ==== Parameters
    # 
    # *    +text+ - String - the class name of the resource. ("Default" will remove the current resource.)  
    # *    +type+ - String - one of "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK IN", "WHITE OUT" and "WHITE IN". See Title Effect Type for more information about these values.  
    # *    +speed+ - Number - optional, default 1  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #cutRsc
    # 
    # Official Wiki: https://community.bistudio.com/wiki/titleRsc
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    titleRsc ["BIS", "PLAIN"]
    # 
    def titleRsc _args
      "titleRsc _args;" 
    end

    # Displays text across the screen.
    # 
    # ==== Description
    # 
    # If used along with cutText two different texts (in different type styles) can be shown at once
    #  
    # ==== Syntax
    #
    #      titleText [text, type, speed]
    #
    # ==== Parameters
    # 
    # *    +text+ - String  
    # *    +type+ - String- Possible Title Effect Types:  
    # *    +speed+ - Number - optional, default 1  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #titleFadeOut, #cutText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/titleText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    titleText ["Show this text", "PLAIN"]
    # 
    def titleText _args
      "titleText _args;" 
    end

    # Continue sequence of 'for' command
    # 
    # ==== Syntax
    #
    #      for "_var" from a to b
    #
    # ==== Parameters
    # 
    # *    +for "_var" from a+ - For Type  
    # *    +b+ - Number  
    #
    # ==== Returns
    #
    #      For Type
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Control Structures
    # 
    # Official Wiki: https://community.bistudio.com/wiki/to
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    for "_x" from 10 to 20 do {..code..}
    # 
    def to _obj, _args
      "_obj to _args;" 
    end

    # Converts the supplied String into an Array of Numbers.
    # 
    # ==== Description
    # 
    # 
    # 
    # The numbers in the created array are the decimal Unicode representations of characters
    #  
    # ==== Syntax
    #
    #      toArray string
    #
    # ==== Parameters
    # 
    # *    +string+ - String  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #toStringUnicode Character Table
    # 
    # Official Wiki: https://community.bistudio.com/wiki/toArray
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint format["%1",toArray("AaŒ")] returns "[65,97,338]"
    # 
    def toArray _args
      "toArray _args;" 
    end

    # Converts the supplied string to all lowercase characters
    # 
    # ==== Syntax
    #
    #      toLower string
    #
    # ==== Parameters
    # 
    # *    +string+ - String  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #toUpper
    # 
    # Official Wiki: https://community.bistudio.com/wiki/toLower
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint toLower("AaBb1") returns "aabb1"
    # 
    def toLower _args
      "toLower _args;" 
    end

    # Converts the supplied Array of Numbers into a String.
    # 
    # ==== Description
    # 
    # 
    # 
    # The numbers in the array to be converted are the decimal Unicode representations of characters
    #  
    # ==== Syntax
    #
    #      toString array
    #
    # ==== Parameters
    # 
    # *    +array+ - Array  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #toArrayUnicode Character Table
    # 
    # Official Wiki: https://community.bistudio.com/wiki/toString
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint toString [65,97,338] returns "AaŒ"
    # 
    def toString _args
      "toString _args;" 
    end

    # Converts the supplied string to all uppercase characters
    # 
    # ==== Syntax
    #
    #      toUpper string
    #
    # ==== Parameters
    # 
    # *    +string+ - String  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #toLower
    # 
    # Official Wiki: https://community.bistudio.com/wiki/toUpper
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint toUpper("AaBb1") returns "AABB1"
    # 
    def toUpper _args
      "toUpper _args;" 
    end

    # Returns true if the trigger has been activated.
    # 
    # ==== Description
    # 
    # Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command.
    # 
    # See createTrigger for more info
    #  
    # ==== Syntax
    #
    #      triggerActivated trigger
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setTriggerActivation, #triggerActivation
    # 
    # Official Wiki: https://community.bistudio.com/wiki/triggerActivated
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (triggeractivated trg1) then {};
    # 
    def triggerActivated _args
      "triggerActivated _args;" 
    end

    # Returns trigger activation in the form [by, type, repeating].
    # 
    # ==== Description
    # 
    # 
    # 
    # Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command.
    # 
    # See createTrigger for more info
    #  
    # ==== Syntax
    #
    #      triggerActivation trigger
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setTriggerActivation, #triggerActivated
    # 
    # Official Wiki: https://community.bistudio.com/wiki/triggerActivation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def triggerActivation _args
      "triggerActivation _args;" 
    end

    # Returns trigger area in the form [a, b, angle, rectangle].
    # 
    # ==== Description
    # 
    # Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command.
    # 
    # See createTrigger for more info
    #  
    # ==== Syntax
    #
    #      triggerArea trigger
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setTriggerArea
    # 
    # Official Wiki: https://community.bistudio.com/wiki/triggerArea
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _params = triggerArea sensor1; // result is [200, 120, 45, false]
    # 
    def triggerArea _args
      "triggerArea _args;" 
    end

    # Assigns a static object to the trigger.
    # 
    # ==== Description
    # 
    # The activation source is changed to "STATIC"
    #  
    # ==== Syntax
    #
    #      triggerName triggerAttachObject objectId
    #
    # ==== Parameters
    # 
    # *    +triggerName+ - Object  
    # *    +objectId+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #triggerAttachedVehicle, #triggerAttachVehicle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/triggerAttachObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    trigger triggerAttachObject 1234
    # 
    def triggerAttachObject _obj, _args
      "_obj triggerAttachObject _args;" 
    end

    # Specifies the entity which will activate the selected trigger.
    # 
    # ==== Description
    # 
    # If [] is given, the trigger is decoupled from the assigned vehicle (example 2).
    # 
    # If the activation source is "VEHICLE", "GROUP", "LEADER" or "MEMBER", it's changed to "NONE".
    # 
    # 
    # 
    # If [vehicle] is given, the trigger is coupled to the vehicle or its group.
    # 
    # 
    # 
    # When the source is "GROUP", "LEADER" or "MEMBER", it's coupled to the group, otherwise it's coupled to the vehicle and the source is changed to "VEHICLE"
    #  
    # ==== Syntax
    #
    #      triggerName triggerAttachVehicle [] or [vehicle]
    #
    # ==== Parameters
    # 
    # *    +triggerName+ - Object  
    # *    +[] or [vehicle]+ - Array  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #triggerAttachedVehicle, #triggerAttachObject
    # 
    # Official Wiki: https://community.bistudio.com/wiki/triggerAttachVehicle
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    trigger triggerAttachVehicle [player];
    # 
    # ====== Example 2:
    # 
    #    trigger triggerAttachVehicle [];
    # 
    def triggerAttachVehicle _obj, _args
      "_obj triggerAttachVehicle _args;" 
    end

    # Returns vehicle attached to the trigger (for example using triggerAttachVehicle).
    # 
    # ==== Description
    # 
    # Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command.
    # 
    # See createTrigger for more info
    #  
    # ==== Syntax
    #
    #      triggerAttachedVehicle trigger
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #triggerAttachVehicle, #triggerAttachObject
    # 
    # Official Wiki: https://community.bistudio.com/wiki/triggerAttachedVehicle
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    return = triggerAttachedVehicle triggerName;
    # 
    def triggerAttachedVehicle _args
      "triggerAttachedVehicle _args;" 
    end

    # Returns trigger statements in the form [cond, activ, desactiv].
    # 
    # ==== Description
    # 
    # 
    # 
    # Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command.
    # 
    # See createTrigger for more info
    #  
    # ==== Syntax
    #
    #      triggerStatements trigger
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setTriggerStatements
    # 
    # Official Wiki: https://community.bistudio.com/wiki/triggerStatements
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def triggerStatements _args
      "triggerStatements _args;" 
    end

    # Returns trigger text.
    # 
    # ==== Description
    # 
    # Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command.
    # 
    # See createTrigger for more info
    #  
    # ==== Syntax
    #
    #      triggerText trigger
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setTriggerText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/triggerText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    result = triggerText triggerName;
    # 
    def triggerText _args
      "triggerText _args;" 
    end

    # Returns trigger timeout in the form [min, mid, max, interruptable].
    # 
    # ==== Description
    # 
    # Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command.
    # 
    # See createTrigger for more info
    #  
    # ==== Syntax
    #
    #      triggerTimeout trigger
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setTriggerTimeout, #triggerTimeoutCurrent
    # 
    # Official Wiki: https://community.bistudio.com/wiki/triggerTimeout
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def triggerTimeout _args
      "triggerTimeout _args;" 
    end

    # Returns trigger timeout or -1 if countdown is not in progress.
    # 
    # ==== Description
    # 
    # 
    # 
    # Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command.
    # 
    # See createTrigger for more info
    #  
    # ==== Syntax
    #
    #      triggerTimeoutCurrent trigger
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object - trigger object  
    #
    # ==== Returns
    #
    #      Number - time remaining before trigger activation.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #triggerTimeout, #setTriggerTimeout
    # 
    # Official Wiki: https://community.bistudio.com/wiki/triggerTimeoutCurrent
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _remaining = triggerTimeoutCurrent _trigger;
    # 
    def triggerTimeoutCurrent _args
      "triggerTimeoutCurrent _args;" 
    end

    # Returns trigger type.
    # 
    # ==== Description
    # 
    # 
    # 
    # Note: The trigger could be local or remote but the result returned by this command will be for the trigger condition set up locally on the client that executed the command.
    # 
    # See createTrigger for more info
    #  
    # ==== Syntax
    #
    #      triggerType trigger
    #
    # ==== Parameters
    # 
    # *    +trigger+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setTriggerType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/triggerType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def triggerType _args
      "triggerType _args;" 
    end

    # Always true
    # 
    # ==== Syntax
    #
    #      true
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #false
    # 
    # Official Wiki: https://community.bistudio.com/wiki/true
    #
    # ==== Examples
    # 
    def true 
      "true" 
    end

    # Defines a try-catch structure.
    # 
    # ==== Description
    # 
    # This sets up an exception handling block.
    # 
    # Any thrown exception in a try block is caught in a catch block.
    # 
    # The structured exception block has following form:
    # 
    # try //begin of try-catch block
    # 
    # { //block, that can throw exception }
    # 
    # catch
    # 
    # { //block, that process an exception.
    # 
    # Exception is described in _exception variable };
    #  
    # ==== Syntax
    #
    #      try code
    #
    # ==== Parameters
    # 
    # *    +code+ - Code  
    #
    # ==== Returns
    #
    #      Exception Type
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Exception handling
    # 
    # Official Wiki: https://community.bistudio.com/wiki/try
    #
    # ==== Examples
    # 
    def try _args
      "try _args;" 
    end

    # Returns the unit in the vehicle turret
    # 
    # ==== Syntax
    #
    #      vehicle turretUnit turretpath
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +turretpath+ - Array  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #moveInTurret, #assignAsTurret, #assignedVehicleRole, #lockedTurret
    # 
    # Official Wiki: https://community.bistudio.com/wiki/turretUnit
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _vehicle turretUnit _thisTurret
    # 
    def turretUnit _obj, _args
      "_obj turretUnit _args;" 
    end

    # Adds an item with given text to Tree View with given idc under specified path (zero based)
    # 
    # ==== Syntax
    #
    #      tvAdd [idc, [path], text]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +[path]+ - Array - Array containing numbers.  
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #tvClear, #tvCollapse, #tvCount, #tvCurSel, #tvData, #tvDelete, #tvExpand, #tvPicture, #tvSetCurSel, #tvSetData, #tvSetPicture, #tvSetValue, #tvSort, #tvSortByValue, #tvText, #tvValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvAdd
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvAdd [101, [0], "First item"]
    # 
    def tvAdd _args
      "tvAdd _args;" 
    end

    # Removes all items from Tree View with given idc
    # 
    # ==== Syntax
    #
    #      tvClear idc
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #tvAdd, #tvCollapse, #tvCount, #tvCurSel, #tvData, #tvDelete, #tvExpand, #tvPicture, #tvSetCurSel, #tvSetData, #tvSetPicture, #tvSetValue, #tvSort, #tvSortByValue, #tvText, #tvValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvClear
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvClear 101
    # 
    def tvClear _args
      "tvClear _args;" 
    end

    # Collapses tree item pointed to by the path.
    # 
    # ==== Description
    # 
    # IDC means id of parent Tree View
    #  
    # ==== Syntax
    #
    #      tvCollapse [idc,[path]]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvCollapse
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvCollapse [101,[0]];
    # 
    def tvCollapse _args
      "tvCollapse _args;" 
    end

    # Returns childrens count of item on given path.
    # 
    # ==== Description
    # 
    # IDC means id of parent Tree View
    #  
    # ==== Syntax
    #
    #      tvCount [idc, [path]]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +[path]+ - Array - Array containing numbers.  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #tvAdd, #tvClear, #tvCollapse, #tvCurSel, #tvData, #tvDelete, #tvExpand, #tvPicture, #tvSetCurSel, #tvSetData, #tvSetPicture, #tvSetValue, #tvSort, #tvSortByValue, #tvText, #tvValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvCount
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvCount [101, [0]]
    # 
    def tvCount _args
      "tvCount _args;" 
    end

    # Returns path to currently selected item.
    # 
    # ==== Description
    # 
    # IDC means id of parent Tree View
    #  
    # ==== Syntax
    #
    #      tvCurSel idc
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #tvAdd, #tvClear, #tvCollapse, #tvCount, #tvData, #tvDelete, #tvExpand, #tvPicture, #tvSetCurSel, #tvSetData, #tvSetPicture, #tvSetValue, #tvSort, #tvSortByValue, #tvText, #tvValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvCurSel
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvCurSel 101
    # 
    def tvCurSel _args
      "tvCurSel _args;" 
    end

    # Returns string data from item on given path.
    # 
    # ==== Description
    # 
    # IDC means id of parent Tree View
    #  
    # ==== Syntax
    #
    #      control tvData [path]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +[path]+ - Array - Array containing numbers.  
    # *    +control+ - Control  
    # *    +[path]+ - Array - Array containing numbers.  
    #
    # ==== Returns
    #
    #      String - (as above).
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #tvAdd, #tvClear, #tvCollapse, #tvCount, #tvCurSel, #tvDelete, #tvExpand, #tvPicture, #tvSetCurSel, #tvSetData, #tvSetPicture, #tvSetValue, #tvSort, #tvSortByValue, #tvText, #tvValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvData
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvData [101, [0]]
    # 
    # ====== Example 2:
    # 
    #    (_display displayCtrl 101) tvData [0]
    # 
    def tvData _obj, _args
      "_obj tvData _args;" 
    end

    # Removes an item on given path from Tree View with given idc
    # 
    # ==== Syntax
    #
    #      tvDelete [idc, [path]]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +[path]+ - Array - Array containing numbers.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #tvAdd, #tvClear, #tvCollapse, #tvCount, #tvCurSel, #tvData, #tvExpand, #tvPicture, #tvSetCurSel, #tvSetData, #tvSetPicture, #tvSetValue, #tvSort, #tvSortByValue, #tvText, #tvValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvDelete
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvDelete [101, [0,0]]
    # 
    def tvDelete _args
      "tvDelete _args;" 
    end

    # Expands tree item pointed to by the path.
    # 
    # ==== Description
    # 
    # IDC means id of parent Tree View
    #  
    # ==== Syntax
    #
    #      tvExpand [idc,[path]]
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvExpand
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvExpand [101,[0]];
    # 
    def tvExpand _args
      "tvExpand _args;" 
    end

    # Returns name of picture from item pointed to by path.
    # 
    # ==== Description
    # 
    # IDC means id of parent Tree View
    #  
    # ==== Syntax
    #
    #      tvPicture [idc, [path]]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +[path]+ - Array - Array containing numbers.  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #tvAdd, #tvClear, #tvCollapse, #tvCount, #tvCurSel, #tvData, #tvDelete, #tvExpand, #tvSetCurSel, #tvSetData, #tvSetPicture, #tvSetValue, #tvSort, #tvSortByValue, #tvText, #tvValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvPicture
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvPicture [101, [0]]
    # 
    def tvPicture _args
      "tvPicture _args;" 
    end

    # Sets cursor to given item on given path.
    # 
    # ==== Description
    # 
    # IDC means id of parent Tree View
    #  
    # ==== Syntax
    #
    #      tvSetCurSel [idc, [path]]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +[path]+ - Array - Array containing numbers.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #tvAdd, #tvClear, #tvCollapse, #tvCount, #tvCurSel, #tvData, #tvDelete, #tvExpand, #tvPicture, #tvSetData, #tvSetPicture, #tvSetValue, #tvSort, #tvSortByValue, #tvText, #tvValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvSetCurSel
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvSetCurSel [101, [0]]
    # 
    def tvSetCurSel _args
      "tvSetCurSel _args;" 
    end

    # Sets string data to item on given path.
    # 
    # ==== Description
    # 
    # IDC means id of parent Tree View
    #  
    # ==== Syntax
    #
    #      tvSetData [idc, [path], data]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +[path]+ - Array - Array containing numbers.  
    # *    +data+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #tvAdd, #tvClear, #tvCollapse, #tvCount, #tvCurSel, #tvData, #tvDelete, #tvExpand, #tvPicture, #tvSetCurSel, #tvSetPicture, #tvSetValue, #tvSort, #tvSortByValue, #tvText, #tvValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvSetData
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvSetData [101, [0], "Test data"]
    # 
    def tvSetData _args
      "tvSetData _args;" 
    end

    # Sets picture to item selected by path.
    # 
    # ==== Description
    # 
    # IDC means id of parent Tree View.
    # 
    # Name is picture name.
    # 
    # The picture is searched in the mission directory
    #  
    # ==== Syntax
    #
    #      tvSetPicture [idc, [path], name]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +[path]+ - Array - Array containing numbers.  
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #tvAdd, #tvClear, #tvCollapse, #tvCount, #tvCurSel, #tvData, #tvDelete, #tvExpand, #tvPicture, #tvSetCurSel, #tvSetData, #tvSetValue, #tvSort, #tvSortByValue, #tvText, #tvValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvSetPicture
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvSetPicture [101, [0], "picture"]
    # 
    def tvSetPicture _args
      "tvSetPicture _args;" 
    end

    # Sets scalar data to item on given path.
    # 
    # ==== Description
    # 
    # IDC means id of parent Tree View
    #  
    # ==== Syntax
    #
    #      tvSetValue [idc, [path], val]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +[path]+ - Array - Array containing numbers.  
    # *    +val+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #tvAdd, #tvClear, #tvCollapse, #tvCount, #tvCurSel, #tvData, #tvDelete, #tvExpand, #tvPicture, #tvSetCurSel, #tvSetData, #tvSetPicture, #tvSort, #tvSortByValue, #tvText, #tvValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvSetValue
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvSetValue [101, [0], 555]
    # 
    def tvSetValue _args
      "tvSetValue _args;" 
    end

    # Sorts childrens of given item by data.
    # 
    # ==== Description
    # 
    # Param reversed is optional.
    # 
    # IDC means id of parent Tree View
    #  
    # ==== Syntax
    #
    #      tvSort [idc, [path], reversed]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +[path]+ - Array - Array containing numbers.  
    # *    +reversed+ - Boolean - optional  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #tvAdd, #tvClear, #tvCollapse, #tvCount, #tvCurSel, #tvData, #tvDelete, #tvExpand, #tvPicture, #tvSetCurSel, #tvSetData, #tvSetPicture, #tvSetValue, #tvSortByValue, #tvText, #tvValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvSort
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvSort [101, [0], false]
    # 
    def tvSort _args
      "tvSort _args;" 
    end

    # Sorts childrens of given item by value.
    # 
    # ==== Description
    # 
    # Param reversed is optional.
    # 
    # IDC means id of parent Tree View
    #  
    # ==== Syntax
    #
    #      tvSortByValue [idc, [path], reversed]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +[path]+ - Array - Array containing numbers.  
    # *    +reversed+ - Boolean - optional  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #tvAdd, #tvClear, #tvCollapse, #tvCount, #tvCurSel, #tvData, #tvDelete, #tvExpand, #tvPicture, #tvSetCurSel, #tvSetData, #tvSetPicture, #tvSetValue, #tvSort, #tvText, #tvValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvSortByValue
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvSortByValue [101, [0], false]
    # 
    def tvSortByValue _args
      "tvSortByValue _args;" 
    end

    # Returns shown text in the item on given path.
    # 
    # ==== Description
    # 
    # IDC means id of parent Tree View
    #  
    # ==== Syntax
    #
    #      tvText [idc, [path]]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +[path]+ - Array - Array containing numbers.  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #tvAdd, #tvClear, #tvCollapse, #tvCount, #tvCurSel, #tvData, #tvDelete, #tvExpand, #tvPicture, #tvSetCurSel, #tvSetData, #tvSetPicture, #tvSetValue, #tvSort, #tvSortByValue, #tvValue
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvText
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvText [101, [0]]
    # 
    def tvText _args
      "tvText _args;" 
    end

    # Returns scalar data from item on given path.
    # 
    # ==== Description
    # 
    # IDC means id of parent Tree View
    #  
    # ==== Syntax
    #
    #      tvValue [idc, [path]]
    #
    # ==== Parameters
    # 
    # *    +idc+ - Number  
    # *    +[path]+ - Array - Array containing numbers.  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #tvAdd, #tvClear, #tvCollapse, #tvCount, #tvCurSel, #tvData, #tvDelete, #tvExpand, #tvPicture, #tvSetCurSel, #tvSetData, #tvSetPicture, #tvSetValue, #tvSort, #tvSortByValue, #tvText
    # 
    # Official Wiki: https://community.bistudio.com/wiki/tvValue
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    tvValue [101, [0]]
    # 
    def tvValue _args
      "tvValue _args;" 
    end

    # Returns a string of a location's class name
    # 
    # ==== Syntax
    #
    #      type location
    #
    # ==== Parameters
    # 
    # *    +location+ - Location  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/type
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _locationType = type myLocation
    # 
    def type _args
      "type _args;" 
    end

    # Returns the data type of an expression.
    # 
    # ==== Description
    # 
    # 
    # 
    # The type is returned as an all-uppercase string having one of the following values: "ARRAY","BOOL","CODE","CONFIG","CONTROL","DISPLAY","GROUP","LOCATION","OBJECT",
    # 
    # "SCALAR","SCRIPT",
    # 
    # "SIDE","STRING","TEXT","TEAM_MEMBER","NAMESPACE".
    # 
    # They represent the available data types in ArmA
    #  
    # ==== Syntax
    #
    #      String =  typeName anything
    #
    # ==== Parameters
    # 
    # *    +anything+ - Anything  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #typeOf, #isKindOf, #isClass, #isArray, #isNumber, #isText, #isNil, #isNull
    # 
    # Official Wiki: https://community.bistudio.com/wiki/typeName
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _msg = "hello"; _result = typeName _msg;  //_result will be "STRING"
    # 
    # ====== Example 2:
    # 
    #    _unit = player; _result = typeName _unit; //_result becomes "OBJECT"
    # 
    # ====== Example 3:
    # 
    #    hint typeName 0; //SCALAR
    #    hint typeName ""; //STRING
    #    hint typeName true; //BOOL
    #    hint typeName []; //ARRAY
    #    hint typeName {}; //CODE
    #    hint typeName objNull; //OBJECT
    #    hint typeName grpNull; //GROUP
    #    hint typeName controlNull; //CONTROL
    #    hint typeName teamMemberNull; //TEAM_MEMBER
    #    hint typeName displayNull; //DISPLAY
    #    hint typeName taskNull; //TASK
    #    hint typeName locationNull; //LOCATION
    #    hint typeName opfor; //SIDE
    #    hint typeName parseText ""; //TEXT
    #    hint typeName configFile; //CONFIG
    #    hint typeName missionNamespace; //NAMESPACE
    # 
    # ====== Example 4:
    # 
    #    if (typeName _this != "ARRAY") exitWith {
    #    	hint "_this is not an array!"
    #    }
    #    //is the same as 
    #    if (typeName _this != typeName []) exitWith {
    #    	hint "_this is not an array!"
    #    }
    # 
    def typeName _args
      "typeName _args;" 
    end

    # Returns the class type of a given object
    # 
    # ==== Syntax
    #
    #      String =  typeOf vehicleName
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #countType, #isKindOf
    # 
    # Official Wiki: https://community.bistudio.com/wiki/typeOf
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _class = typeOf _mi24
    # 
    def typeOf _args
      "typeOf _args;" 
    end

    # Get array with unit connected to vehicle and position in that vehicle
    # 
    # ==== Syntax
    #
    #      uavControl uav
    #
    # ==== Parameters
    # 
    # *    +uav+ - Object  
    #
    # ==== Returns
    #
    #      Array - in format: [unit_object,position_string]
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #showUavFeed, #shownUavFeed, #allUnitsUav, #getConnectedUav, #isUavConnected
    # 
    # Official Wiki: https://community.bistudio.com/wiki/uavControl
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def uavControl _args
      "uavControl _args;" 
    end

    # Return the global namespace attached to user interface
    # 
    # ==== Syntax
    #
    #      uiNamespace
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Namespace
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Forward Compatibility, #parsingNamespace, #missionNamespace, #with
    # 
    # Official Wiki: https://community.bistudio.com/wiki/uiNamespace
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    //from ca\missions\armory\Data\Scripts\pauseonload.sqf
    #    private ["_display"];
    #    _display = _this select 0;
    #    uiNamespace setVariable ["LIB_interruptDisplay", _display];
    # 
    def uiNamespace 
      "uiNamespace" 
    end

    # Suspend execution of script for given uitime.
    # 
    # ==== Description
    # 
    # uiSleep is a sleep method to delay script execution where script time/simulation time is stopped.
    # 
    # uiSleep is basically using the system time (uiTime more specifically) and not simulation time.
    # 
    # So in the cases where sleep command would get stuck indefinitely, uiSleep can still be used to effectively delay script execution.
    # 
    # For example in a mission briefing or an editor or when simulation is paused in general
    #  
    # ==== Syntax
    #
    #      uiSleep delay
    #
    # ==== Parameters
    # 
    # *    +delay + - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/uiSleep
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     uiSleep 0.5 
    # 
    def uiSleep _args
      "uiSleep _args;" 
    end

    # Unassign curator (will destroy both sides of connection)
    # 
    # ==== Syntax
    #
    #      unassignCurator curatorObj
    #
    # ==== Parameters
    # 
    # *    +curatorObj+ - Object - Curator module.  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # Can be executed only on server
    # 
    # ==== See Also
    # 
    # Curator, #assignCurator
    # 
    # Official Wiki: https://community.bistudio.com/wiki/unassignCurator
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    unassignCurator myCurator;
    # 
    def unassignCurator _args
      "unassignCurator _args;" 
    end

    # Unassigns existing item and tries to put it into inventory.
    # 
    # ==== Description
    # 
    # If there is no space in inventory the item simply disappears
    #  
    # ==== Syntax
    #
    #      unit unassignItem item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #assignItem, #addItem, #removeItem, #linkItem, #unlinkItem, #assignedItems, #removeAllAssignedItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/unassignItem
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    bluforUnit unassignItem "NVGoggles";
    #    bluforUnit removeItem "NVGoggles";
    #    opforUnit unassignItem "NVGoggles_OPFOR";
    #    opforUnit removeItem "NVGoggles_OPFOR";
    #    independentUnit unassignItem "NVGoggles_INDEP";
    #    independentUnit removeItem "NVGoggles_INDEP";
    # 
    def unassignItem _obj, _args
      "_obj unassignItem _args;" 
    end

    # Unassigns the unit (in the case of a vehicle its commander unit) from his team.
    # 
    # ==== Description
    # 
    # This is equal to unit assignTeam "MAIN"
    #  
    # ==== Syntax
    #
    #      unassignTeam vehicleName
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #assignTeam, #dissolveTeam
    # 
    # Official Wiki: https://community.bistudio.com/wiki/unassignTeam
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    unassignTeam _soldier2
    # 
    def unassignTeam _args
      "unassignTeam _args;" 
    end

    # Unassigns a unit from whichever vehicle that unit is currently assigned to.
    # 
    # ==== Description
    # 
    # If the unit is currently in that vehicle, the group leader will issue an order to disembark
    #  
    # ==== Syntax
    #
    #      unassignVehicle unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #assignAsCargo, #assignAsCommander, #assignAsDriver, #assignAsGunner, #assignAsTurret, #assignedVehicle, #leaveVehicle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/unassignVehicle
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    unassignVehicle player;
    # 
    # ====== Example 2:
    # 
    #    { unassignVehicle _x } forEach crew _vehiclename; Will make all the occupants of a vehicle disembark
    # 
    def unassignVehicle _args
      "unassignVehicle _args;" 
    end

    # Return whether object is fully underwater
    # 
    # ==== Syntax
    #
    #      underwater unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/underwater
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def underwater _args
      "underwater _args;" 
    end

    # Returns name of uniform
    # 
    # ==== Syntax
    #
    #      uniform unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/uniform
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def uniform _args
      "uniform _args;" 
    end

    # Returns a cargo container of a unit's uniform
    # 
    # ==== Syntax
    #
    #      uniformContainer unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - a soldier  
    #
    # ==== Returns
    #
    #      Object - cargo container or <NULL-object>
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #vestContainer, #backpackContainer
    # 
    # Official Wiki: https://community.bistudio.com/wiki/uniformContainer
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint str uniformContainer player; //2df7dd00# 163941: dummyweapon.p3d
    # 
    # ====== Example 2:
    # 
    #    hint str getMagazineCargo uniformContainer player;
    #    [
    #    	[
    #    		"30Rnd_65x39_caseless_mag"
    #    	],[
    #    		3
    #    	]
    #    ]
    # 
    def uniformContainer _args
      "uniformContainer _args;" 
    end

    # Get array with all items (of any kind, even weapons) from uniform
    # 
    # ==== Syntax
    #
    #      uniformItems unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #vestItems, #backpackItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/uniformItems
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    uniformItems player;
    #    [
    #    	"FirstAidKit",
    #    	"30Rnd_65x39_caseless_mag",
    #    	"30Rnd_65x39_caseless_mag",
    #    	"30Rnd_65x39_caseless_mag"
    #    ]
    # 
    def uniformItems _args
      "uniformItems _args;" 
    end

    # Get array with all magazines from uniform of the given unit
    # 
    # ==== Syntax
    #
    #      uniformMagazines unit
    #
    # ==== Parameters
    # 
    # *    +unit + - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #vestMagazines, #backpackMagazines, #soldierMagazines
    # 
    # Official Wiki: https://community.bistudio.com/wiki/uniformMagazines
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    uniformMagazines player;
    #    [
    #    	"6.5mm 30Rnd STANAG Mag(30/30)[id/cr:1/0](3x)"
    #    ]
    # 
    def uniformMagazines _args
      "uniformMagazines _args;" 
    end

    # Returns list with addons the unit belongs to
    # 
    # ==== Syntax
    #
    #      unitAddons className
    #
    # ==== Parameters
    # 
    # *    +className+ - String - class name of a unit/vehicle or object  
    #
    # ==== Returns
    #
    #      Array - addon names
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #activateAddons
    # 
    # Official Wiki: https://community.bistudio.com/wiki/unitAddons
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint str unitAddons typeOf player; //["A3_Characters_F_BLUFOR"]
    # 
    def unitAddons _args
      "unitAddons _args;" 
    end

    # Returns unit's backpack
    # 
    # ==== Syntax
    #
    #      unitBackpack unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazineCargo, #addWeaponCargo, #clearMagazineCargo, #clearWeaponCargo
    # 
    # Official Wiki: https://community.bistudio.com/wiki/unitBackpack
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    myBackpack = unitBackpack player
    # 
    # ====== Example 2:
    # 
    #    clearMagazineCargo unitBackpack player
    # 
    # ====== Example 3:
    # 
    #    player action ["gear", unitBackpack player]
    # 
    def unitBackpack _args
      "unitBackpack _args;" 
    end

    # Return the unit position rules.
    # 
    # ==== Description
    # 
    # The return value is always "Auto" unless the unit has gotten a setUnitPos command.
    # 
    # In that case the value is the last stance the unit was ordered to
    #  
    # ==== Syntax
    #
    #      String = unitPos unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setUnitPos, #setUnitPosWeak, #fn_vbs_getUnitPos
    # 
    # Official Wiki: https://community.bistudio.com/wiki/unitPos
    #
    # ==== Examples
    # 
    def unitPos _args
      "unitPos _args;" 
    end

    # Check if the unit is ready.
    # 
    # ==== Description
    # 
    # Unit is busy when it is given some command like move, until the command is finished
    #  
    # ==== Syntax
    #
    #      Boolean = unitReady unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/unitReady
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _it = unitReady _soldierOne;
    # 
    def unitReady _args
      "unitReady _args;" 
    end

    # Returns recoil coefficient of a soldier
    # 
    # ==== Syntax
    #
    #      unitRecoilCoefficient soldier
    #
    # ==== Parameters
    # 
    # *    +soldier+ - Object  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setUnitRecoilCoefficient
    # 
    # Official Wiki: https://community.bistudio.com/wiki/unitRecoilCoefficient
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _myRecoil = unitRecoilCoefficient player
    # 
    def unitRecoilCoefficient _args
      "unitRecoilCoefficient _args;" 
    end

    # Returns an array with all the units in the group or group of the unit.
    # 
    # ==== Description
    # 
    # For a destroyed object an empty array is returned
    #  
    # ==== Syntax
    #
    #      units groupOrunit
    #
    # ==== Parameters
    # 
    # *    +groupOrunit+ - Group or Object  
    #
    # ==== Returns
    #
    #      Array of Objects
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #group, #allGroups, #allUnits, #playableUnits, #switchableUnits, #vehicles
    # 
    # Official Wiki: https://community.bistudio.com/wiki/units
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _myUnitCount = count units group player;
    # 
    # ====== Example 2:
    # 
    #    _isInMyGroup = _soldier1 in units player;
    # 
    def units _args
      "units _args;" 
    end

    # Returns units in group below passed height
    # 
    # ==== Syntax
    #
    #      group or array unitsBelowHeight height
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/unitsBelowHeight
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #     _allOnGroudUnits = group player unitsBelowHeight 10 
    # 
    def unitsBelowHeight _obj, _args
      "_obj unitsBelowHeight _args;" 
    end

    # Unassign and delete existing item from its assigned slot.
    # 
    # ==== Description
    # 
    # If item does not exist or is not in the assigned slot, command simply fails
    #  
    # ==== Syntax
    #
    #      unit unlinkItem item
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +item+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #linkItem, #addItem, #assignItem, #removeItem, #unassignItem, #assignedItems, #removeAllAssignedItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/unlinkItem
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    bluforUnit unlinkItem "NVGoggles";
    #    opforUnit unlinkItem "NVGoggles_OPFOR";
    #    independentUnit unlinkItem "NVGoggles_INDEP";
    # 
    def unlinkItem _obj, _args
      "_obj unlinkItem _args;" 
    end

    # Unlock the given achievement
    # 
    # ==== Syntax
    #
    #      unlockAchievement name
    #
    # ==== Parameters
    # 
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/unlockAchievement
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def unlockAchievement _args
      "unlockAchievement _args;" 
    end

    # Unregister a task type
    # 
    # ==== Syntax
    #
    #      teamMember unregisterTask name
    #
    # ==== Parameters
    # 
    # *    +teamMember+ - Team Member  
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/unregisterTask
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player unregisterTask taskName;
    # 
    def unregisterTask _obj, _args
      "_obj unregisterTask _args;" 
    end

    # Updates the icon to be shown in 2D editor for the specified editor,object.
    # 
    # ==== Description
    # 
    # If maintain size is false,icon will not scale depending on the,scale of the map.
    # 
    # If maintain size is a number,the icon will maintain,size if map scale is below that number
    #  
    # ==== Syntax
    #
    #      map updateDrawIcon [object,string identifier,color,offset,width,height,maintain size?,angle,shadow]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[object,string identifier,color,offset,width,height,maintain size?,angle,shadow]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/updateDrawIcon
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def updateDrawIcon _obj, _args
      "_obj updateDrawIcon _args;" 
    end

    # Sets the text and command for the menu item.
    # 
    # ==== Description
    # 
    # index is index as returned from addMenuItem command.
    # 
    # command is optional
    #  
    # ==== Syntax
    #
    #      map updateMenuItem [menu item index,text,command]
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    # *    +[menu item index,text,command]+ - Array -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/updateMenuItem
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def updateMenuItem _obj, _args
      "_obj updateMenuItem _args;" 
    end

    # Update the editor object tree
    # 
    # ==== Syntax
    #
    #      updateObjectTree map
    #
    # ==== Parameters
    # 
    # *    +map+ - Control -  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/updateObjectTree
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    (example)
    # 
    def updateObjectTree _args
      "updateObjectTree _args;" 
    end

    # Switch between elapsed game time and audio time being used as animation timer.
    # 
    # ==== Description
    # 
    # Used for audio/animation synchronization
    #  
    # ==== Syntax
    #
    #      soldier useAudioTimeForMoves toggle
    #
    # ==== Parameters
    # 
    # *    +soldier+ - Object  
    # *    +toggle+ - Boolean  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/useAudioTimeForMoves
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    player useAudioTimeForMoves true
    # 
    def useAudioTimeForMoves _obj, _args
      "_obj useAudioTimeForMoves _args;" 
    end

    # Return object's direction vector in world Position coordinates ([x, z, y]).
    # 
    # ==== Description
    # 
    # 
    # 
    # A unit facing North would return [0,1,0]
    # 
    # A unit facing East would return [1,0,0]
    # 
    # A unit facing South would return [0,-1,0]
    # 
    # A unit facing West would return [-1,0,0]
    #  
    # ==== Syntax
    #
    #      Array = vectorDir objectName
    #
    # ==== Parameters
    # 
    # *    +objectName+ - Object  
    #
    # ==== Returns
    #
    #      Array - format Position
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setVectorUp, #setVectorDir, #vectorUp, #setVectorDirAndUp
    # 
    # Official Wiki: https://community.bistudio.com/wiki/vectorDir
    #
    # ==== Examples
    # 
    def vectorDir _args
      "vectorDir _args;" 
    end

    # Return object's up vector in world Position coordinates ( [x, y, z] )
    # 
    # ==== Syntax
    #
    #      Array = vectorUp objectName
    #
    # ==== Parameters
    # 
    # *    +objectName+ - Object  
    #
    # ==== Returns
    #
    #      Array - format Position
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setVectorUp, #setVectorDir, #vectorDir
    # 
    # Official Wiki: https://community.bistudio.com/wiki/vectorUp
    #
    # ==== Examples
    # 
    def vectorUp _args
      "vectorUp _args;" 
    end

    # Vehicle in which given unit is mounted.
    # 
    # ==== Description
    # 
    # If none, unit is returned
    #  
    # ==== Syntax
    #
    #      Object = vehicle unitName
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/vehicle
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    SQS ? vehicle player != player : hint "Player is in a vehicle"
    # 
    # ====== Example 2:
    # 
    #    SQF (see Notes)if ( vehicle player != player ) then { hint "Player is in a vehicle"; };
    # 
    def vehicle _args
      "vehicle _args;" 
    end

    # Type text to vehicle radio channel.
    # 
    # ==== Description
    # 
    # This function only types text to the list, it does not broadcast the message.
    # 
    # If you want the message to show on all computers, you have to execute it on them.
    # 
    # Object parameter must be a vehicle, not a player.
    # 
    # If you are in a crew seat (i.
    # 
    # e.
    # 
    # driver, gunner or commander), then it will include that role in the chat name output (Eg: Driver (you_name): "Message")
    #  
    # ==== Syntax
    #
    #      vehicleName vehicleChat text
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    # *    +text+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #globalChat, #groupChat, #sideChat
    # 
    # Official Wiki: https://community.bistudio.com/wiki/vehicleChat
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    vehicle player vehicleChat "Show this text"
    # 
    def vehicleChat _obj, _args
      "_obj vehicleChat _args;" 
    end

    # Send message to vehicle radio channel.
    # 
    # ==== Description
    # 
    # Message is defined in description.
    # 
    # ext
    #  
    # ==== Syntax
    #
    #      vehicleName vehicleRadio name
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    # *    +name+ - String  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/vehicleRadio
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _vehicleOne vehicleRadio "messageOne"
    # 
    def vehicleRadio _obj, _args
      "_obj vehicleRadio _args;" 
    end

    # Returns the name of the variable which contains a primary editor reference to this object.
    # 
    # ==== Description
    # 
    # This is the variable given in the Insert Unit dialog / name field, in the editor.
    # 
    # It can be changed using setVehicleVarName.
    # 
    # If object refers to a vehicle that wasn't given a name in the editor, the return value is an empty string, ""
    #  
    # ==== Syntax
    #
    #      String = vehicleVarName objectName
    #
    # ==== Parameters
    # 
    # *    +objectName+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setVehicleVarName, #isValidVarName (VBS2)
    # 
    # Official Wiki: https://community.bistudio.com/wiki/vehicleVarName
    #
    # ==== Examples
    # 
    def vehicleVarName _args
      "vehicleVarName _args;" 
    end

    # Returns a list of all vehicles
    # 
    # ==== Syntax
    #
    #      vehicles
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #units, #allUnits, #group, #allGroups, #playableUnits, #switchableUnits, #entities, #agents
    # 
    # Official Wiki: https://community.bistudio.com/wiki/vehicles
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _vehicles = vehicles
    # 
    def vehicles 
      "vehicles" 
    end

    # Return velocity (speed vector) of Unit as an array with format [x, z, y].
    # 
    # ==== Description
    # 
    # Units are in metres per second
    #  
    # ==== Syntax
    #
    #      Array = velocity vehicleName
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #velocityModelSpace, #setVelocity, #setVelocityTransformation
    # 
    # Official Wiki: https://community.bistudio.com/wiki/velocity
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    vector = velocity jeep;
    # 
    # ====== Example 2:
    # 
    #    ? (velocity _plane1 select 2) > 50 : hint "Aircraft is climbing up too fast!";
    # 
    def velocity _args
      "velocity _args;" 
    end

    # Returns the velocity (speed vector) of the vehicle as an array with format [x, z, y].
    # 
    # ==== Description
    # 
    # Vector is in model space
    #  
    # ==== Syntax
    #
    #      velocityModelSpace vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #velocity, #setVelocity, #setVelocityTransformation
    # 
    # Official Wiki: https://community.bistudio.com/wiki/velocityModelSpace
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    velocityModelSpace _chopper;
    #    comment "Returns [X (left(-) right(+)), Y (backward(-) forward(+)), Z (down(-) up(+))]";
    # 
    def velocityModelSpace _args
      "velocityModelSpace _args;" 
    end

    # Check if file is signed by an accepted key
    # 
    # ==== Syntax
    #
    #      Boolean = verifySignature filename
    #
    # ==== Parameters
    # 
    # *    +filename+ - String  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/verifySignature
    #
    # ==== Examples
    # 
    def verifySignature _args
      "verifySignature _args;" 
    end

    # Returns name of vest
    # 
    # ==== Syntax
    #
    #      vest unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #removeVest, #addVest
    # 
    # Official Wiki: https://community.bistudio.com/wiki/vest
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _myVest = vest player;
    # 
    def vest _args
      "vest _args;" 
    end

    # Returns a cargo container of a unit's vest
    # 
    # ==== Syntax
    #
    #      vestContainer unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object - a soldier  
    #
    # ==== Returns
    #
    #      Object - cargo container or <NULL-object>
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #uniformContainer, #backpackContainer
    # 
    # Official Wiki: https://community.bistudio.com/wiki/vestContainer
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint str vestContainer player; //2df7d600# 163942: dummyweapon.p3d
    # 
    # ====== Example 2:
    # 
    #    hint str getMagazineCargo vestContainer player;
    #    [
    #    	[
    #    		"30Rnd_65x39_caseless_mag",
    #    		"16Rnd_9x21_Mag",
    #    		"HandGrenade",
    #    		"APERSMine_Range_Mag",
    #    		"SmokeShell",
    #    		"SmokeShellGreen",
    #    		"Chemlight_green"
    #    	],[
    #    		2,
    #    		2,
    #    		2,
    #    		3,
    #    		1,
    #    		1,
    #    		2
    #    	]
    #    ]
    # 
    def vestContainer _args
      "vestContainer _args;" 
    end

    # Get array with all items (of any kind, even weapons) from vest
    # 
    # ==== Syntax
    #
    #      vestItems unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #uniformItems, #backpackItems
    # 
    # Official Wiki: https://community.bistudio.com/wiki/vestItems
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    vestItems player;
    #    [
    #    	"30Rnd_65x39_caseless_mag",
    #    	"30Rnd_65x39_caseless_mag",
    #    	"16Rnd_9x21_Mag",
    #    	"16Rnd_9x21_Mag",
    #    	"HandGrenade",
    #    	"HandGrenade",
    #    	"SmokeShell",
    #    	"SmokeShellGreen",
    #    	"Chemlight_green",
    #    	"Chemlight_green"
    #    ]
    # 
    def vestItems _args
      "vestItems _args;" 
    end

    # Get array with all magazines from vest of the given unit
    # 
    # ==== Syntax
    #
    #      vestMagazines unit
    #
    # ==== Parameters
    # 
    # *    +unit + - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #uniformMagazines, #backpackMagazines, #soldierMagazines
    # 
    # Official Wiki: https://community.bistudio.com/wiki/vestMagazines
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    vestMagazines player;
    #    [
    #    	"6.5mm 30Rnd STANAG Mag(30/30)[id/cr:4/0](2x)",
    #    	"9mm 16Rnd Mag(16/16)[id/cr:7/0](2x)",
    #    	"RGO Frag Grenade(1/1)[id/cr:10/0](2x)",
    #    	"Smoke Grenade (White)(1/1)[id/cr:12/0](1x)",
    #    	"Smoke Grenade (Green)(1/1)[id/cr:13/0](1x)",
    #    	"Chemlight (Green)(1/1)[id/cr:14/0](2x)"
    #    ]
    # 
    def vestMagazines _args
      "vestMagazines _args;" 
    end

    # Returns the rendering distance
    # 
    # ==== Syntax
    #
    #      viewDistance
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setViewDistance, #setTerrainGrid
    # 
    # Official Wiki: https://community.bistudio.com/wiki/viewDistance
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint ("my view distance is " + str viewDistance + " meters");
    # 
    def viewDistance 
      "viewDistance" 
    end

    # Return true if the main map is shown (active)
    # 
    # ==== Syntax
    #
    #      visibleMap
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #forceMap, #openMap
    # 
    # Official Wiki: https://community.bistudio.com/wiki/visibleMap
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    if (visibleMap) then {hint "You're showing the map !"}
    # 
    def visibleMap 
      "visibleMap" 
    end

    # Returns an object's rendered 3D position (z value above ground level)
    # 
    # ==== Syntax
    #
    #      visiblePosition object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object: - name of the object  
    #
    # ==== Returns
    #
    #      Array - format Position3D
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #visiblePositionASL, #position, #getPos, #getPosATL, #getPosASL, #getPosASLW
    # 
    # Official Wiki: https://community.bistudio.com/wiki/visiblePosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    playerRenderedPos = visiblePosition player;
    # 
    def visiblePosition _args
      "visiblePosition _args;" 
    end

    # Returns an object's rendered 3D position ASL (z value above sea level)
    # 
    # ==== Syntax
    #
    #      visiblePositionASL object
    #
    # ==== Parameters
    # 
    # *    +object+ - Object: - name of the object  
    #
    # ==== Returns
    #
    #      Array - format PositionASL
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #visiblePosition, #position, #getPos, #getPosATL, #getPosASL, #getPosASLW
    # 
    # Official Wiki: https://community.bistudio.com/wiki/visiblePositionASL
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    playerRenderedPosASL = visiblePositionASL player;
    # 
    def visiblePositionASL _args
      "visiblePositionASL _args;" 
    end

    # Suspend execution of function or SQF based script until condition is satisfied.
    # 
    # ==== Description
    # 
    # This command will loop and call the code inside {} every frame until the code returns true.
    # 
    # The execution of the rest of the script therefore will be suspended until waitUntil condition is satisfied and the loop is aborted.
    # 
    # Because of this script suspension use spawn or execVM to safely execute code containing waitUntil
    #  
    # ==== Syntax
    #
    #      waitUntil condition
    #
    # ==== Parameters
    # 
    # *    +condition+ - Code  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Control Structures, #while
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waitUntil
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waitUntil {not alive player}
    # 
    # ====== Example 2:
    # 
    #    _i = 0; waitUntil {_i = _i + 1; _i >= 100} 
    # 
    # ====== Example 3:
    # 
    #    waitUntil {sleep 0.1; not alive player}
    # 
    def waitUntil _args
      "waitUntil _args;" 
    end

    # Return waves value
    # 
    # ==== Syntax
    #
    #      waves
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waves
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def waves 
      "waves" 
    end

    # Attaches a static object via it's numeric ID to the given waypoint
    # 
    # ==== Syntax
    #
    #      waypoint waypointAttachObject objectID
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +objectID+ - Number  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypointAttachedObject
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointAttachObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_grp, 2] waypointAttachObject 1234
    # 
    def waypointAttachObject _obj, _args
      "_obj waypointAttachObject _args;" 
    end

    # Attaches a Unit to the given Waypoint
    # 
    # ==== Syntax
    #
    #      waypoint waypointAttachVehicle vehicleName
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      Nothing
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypointAttachedVehicle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointAttachVehicle
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    [_grp, 2] waypointAttachVehicle vehicle player
    # 
    # ====== Example 2:
    # 
    #    [_grp, 2] waypointAttachVehicle _soldier1 
    #    ____________________________________________________________________________________________
    # 
    def waypointAttachVehicle _obj, _args
      "_obj waypointAttachVehicle _args;" 
    end

    # Gets the object attached to the waypoint
    # 
    # ==== Syntax
    #
    #      waypointAttachedObject waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - -  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypointAttachObject
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointAttachedObject
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waypointAttachedObject [groupOne,1]
    # 
    def waypointAttachedObject _args
      "waypointAttachedObject _args;" 
    end

    # Gets the vehicle attached to the waypoint
    # 
    # ==== Syntax
    #
    #      waypointAttachedVehicle waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - -  
    #
    # ==== Returns
    #
    #      Object
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypointAttachVehicle
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointAttachedVehicle
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waypointAttachedVehicle [groupOne,1]
    # 
    def waypointAttachedVehicle _args
      "waypointAttachedVehicle _args;" 
    end

    # Gets the waypoint behavior
    # 
    # ==== Syntax
    #
    #      waypointBehaviour waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #behaviour description, AIBehaviour, #waypoints, #setWaypointBehaviour
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointBehaviour
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waypointBehaviour [groupOne,1]
    # 
    def waypointBehaviour _args
      "waypointBehaviour _args;" 
    end

    # Gets the waypoint combat mode
    # 
    # ==== Syntax
    #
    #      waypointCombatMode waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #combat mode description, AI Combat Modes, #waypoints, #setWaypointCombatMode
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointCombatMode
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waypointCombatMode [groupOne,1]
    # 
    def waypointCombatMode _args
      "waypointCombatMode _args;" 
    end

    # Gets the radius around the waypoint where the waypoint is completed
    # 
    # ==== Syntax
    #
    #      waypointCompletionRadius waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypoints, #setWaypointCompletionRadius
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointCompletionRadius
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _radius = waypointCompletionRadius [groupOne, 1]
    # 
    def waypointCompletionRadius _args
      "waypointCompletionRadius _args;" 
    end

    # Gets the waypoint description
    # 
    # ==== Syntax
    #
    #      waypointDescription waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypoints, #setWaypointDescription
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointDescription
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waypointDescription [groupOne,1]
    # 
    def waypointDescription _args
      "waypointDescription _args;" 
    end

    # Gets the waypoint formation.
    # 
    # ==== Description
    # 
    # Possible values are:
    # 
    # "NO CHANGE"
    # 
    # "COLUMN"
    # 
    # "STAG COLUMN"
    # 
    # "WEDGE"
    # 
    # "ECH LEFT"
    # 
    # "ECH RIGHT"
    # 
    # "VEE"
    # 
    # "LINE"
    # 
    # "FILE"
    # 
    # "DIAMOND"
    #  
    # ==== Syntax
    #
    #      waypointFormation waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #formations description, #waypoints, #setWaypointFormation
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointFormation
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waypointFormation [groupOne,1]
    # 
    def waypointFormation _args
      "waypointFormation _args;" 
    end

    # Gets the house position assigned to the waypoint
    # 
    # ==== Syntax
    #
    #      waypointHousePosition waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - -  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypoints, #setWaypointHousePosition
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointHousePosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waypointHousePosition [groupOne,1]
    # 
    def waypointHousePosition _args
      "waypointHousePosition _args;" 
    end

    # Gets the waypoint loiter radius.
    # 
    # ==== Description
    # 
    # Waypoint uses format Waypoint
    #  
    # ==== Syntax
    #
    #      waypointLoiterRadius Waypoint
    #
    # ==== Parameters
    # 
    # *    +Waypoint+ - Waypoint  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointLoiterRadius
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _radius = waypointLoiterRadius [groupOne, 1]
    # 
    def waypointLoiterRadius _args
      "waypointLoiterRadius _args;" 
    end

    # Gets the waypoint loiter type.
    # 
    # ==== Description
    # 
    # Waypoint uses format Waypoint
    #  
    # ==== Syntax
    #
    #      waypointLoiterType Waypoint
    #
    # ==== Parameters
    # 
    # *    +Waypoint+ - Waypoint  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointLoiterType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _type = waypointLoiterRadius [groupOne, 1]
    # 
    def waypointLoiterType _args
      "waypointLoiterType _args;" 
    end

    # Gets the waypoint name
    # 
    # ==== Syntax
    #
    #      waypointName waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Waypoint  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointName
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def waypointName _args
      "waypointName _args;" 
    end

    # Get Waypoint's  Position.
    # 
    # ==== Description
    # 
    # Note: This function is identical to getWPPos
    #  
    # ==== Syntax
    #
    #      Array = waypointPosition waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    #
    # ==== Returns
    #
    #      Array - format Position
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypoints, #setWaypointPosition, #setWPPos
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointPosition
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _wPos = waypointPosition [_groupOne, 1]
    # 
    def waypointPosition _args
      "waypointPosition _args;" 
    end

    # Gets the waypoint script
    # 
    # ==== Syntax
    #
    #      waypointScript waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypoints, #setWaypointScript
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointScript
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waypointScript [groupOne,1]
    # 
    def waypointScript _args
      "waypointScript _args;" 
    end

    # Gets the waypoint show/hide status.
    # 
    # ==== Description
    # 
    # Possible values are:
    # 
    # "NEVER" - never show it
    # 
    # "EASY" - show only in cadet mode
    # 
    # "ALWAYS" - always show it
    # 
    # "ERROR" - when set to any different string
    #  
    # ==== Syntax
    #
    #      waypointShow waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    #
    # ==== Returns
    #
    #      String - see description
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #showWaypoint, #waypoints, #waypointVisible, #setWaypointVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointShow
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _wpShow = waypointShow [groupOne,1];
    # 
    def waypointShow _args
      "waypointShow _args;" 
    end

    # Gets the waypoint speed.
    # 
    # ==== Description
    # 
    # Possible values are:
    # 
    # "UNCHANGED"
    # 
    # "LIMITED"
    # 
    # "NORMAL"
    # 
    # "FULL"
    #  
    # ==== Syntax
    #
    #      waypointSpeed waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypoints, #setWaypointSpeed
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointSpeed
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waypointSpeed [groupOne,1]
    # 
    def waypointSpeed _args
      "waypointSpeed _args;" 
    end

    # Gets the waypoint statements
    # 
    # ==== Syntax
    #
    #      waypointStatements waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypoints, #setWaypointStatements
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointStatements
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waypointStatements [groupOne,1]
    # 
    def waypointStatements _args
      "waypointStatements _args;" 
    end

    # Gets the waypoint timeout values
    # 
    # ==== Syntax
    #
    #      waypointTimeout waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - -  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypoints, #setWaypointTimeout
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointTimeout
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waypointTimeout [groupOne,1]
    # 
    def waypointTimeout _args
      "waypointTimeout _args;" 
    end

    # Gets the current waypoint timeout or -1 if countdown is not in progress
    # 
    # ==== Syntax
    #
    #      waypointTimeoutCurrent waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Group  
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointTimeoutCurrent
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _timeout = waypointTimeoutCurrent groupOne;
    # 
    def waypointTimeoutCurrent _args
      "waypointTimeoutCurrent _args;" 
    end

    # Gets the waypoint type.
    # 
    # ==== Description
    # 
    # Type can be:
    # 
    # "MOVE"
    # 
    # "DESTROY"
    # 
    # "GETIN"
    # 
    # "SAD"
    # 
    # "JOIN"
    # 
    # "LEADER"
    # 
    # "GETOUT"
    # 
    # "CYCLE"
    # 
    # "LOAD"
    # 
    # "UNLOAD"
    # 
    # "TR UNLOAD"
    # 
    # "HOLD"
    # 
    # "SENTRY"
    # 
    # "GUARD"
    # 
    # "TALK"
    # 
    # "SCRIPTED"
    # 
    # "SUPPORT"
    # 
    # "GETIN NEAREST"
    # 
    # "DISMISS"
    # 
    # "AND"
    # 
    # "OR"
    # 
    # More details at Waypoint types
    #  
    # ==== Syntax
    #
    #      waypointType waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - -  
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypoints description, Waypoint types, #waypoints, #setWaypointType
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointType
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waypointType [groupOne,1],
    # 
    def waypointType _args
      "waypointType _args;" 
    end

    # Returns the visibility of the waypoint.
    # 
    # ==== Description
    # 
    # Returns 0 (Number) for a non valid waypoint
    #  
    # ==== Syntax
    #
    #      waypointVisible waypoint
    #
    # ==== Parameters
    # 
    # *    +waypoint+ - Array - format Waypoint  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #waypoints, #setWaypointVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypointVisible
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _visible = waypointVisible [groupOne, 1];
    # 
    # ====== Example 2:
    # 
    #    _visible = waypointVisible [group player, currentWayPoint (group player)];
    # 
    def waypointVisible _args
      "waypointVisible _args;" 
    end

    # Returns an array of waypoints for the specified unit/group
    # 
    # ==== Syntax
    #
    #      Array = waypoints groupName
    #
    # ==== Parameters
    # 
    # *    +groupName+ - Group  
    #
    # ==== Returns
    #
    #      Array of waypoints each in format Waypoint
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addWaypoint, #deleteWaypoint, #currentWaypoint, #setCurrentWaypointwaypointBehaviour, #waypointCombatMode, #waypointCompletionRadius, #waypointDescription, #waypointFormation, #waypointHousePosition, #waypointPosition, #waypointScript, #waypointShow, #waypointSpeed, #waypointStatements, #waypointTimeout, #waypointType, #waypointVisible
    # 
    # Official Wiki: https://community.bistudio.com/wiki/waypoints
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    waypoints player
    # 
    # ====== Example 2:
    # 
    #    _wPosArray = waypoints group10 
    #    could return [[EAST 1-1-A,0],[EAST 1-1-A,1],[EAST 1-1-A,2]]
    # 
    def waypoints _args
      "waypoints _args;" 
    end

    # Get array with all items linked to a given weapon
    # 
    # ==== Syntax
    #
    #      unit weaponAccessories weapon
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    # *    +weapon+ - String  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/weaponAccessories
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def weaponAccessories _obj, _args
      "_obj weaponAccessories _args;" 
    end

    # Get array with weapons from ammo box (or any general weapon holder container)
    # 
    # ==== Syntax
    #
    #      weaponCargo box
    #
    # ==== Parameters
    # 
    # *    +box+ - Object  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/weaponCargo
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def weaponCargo _args
      "weaponCargo _args;" 
    end

    # Returns the direction that the vehicle weapon is aiming in.
    # 
    # ==== Description
    # 
    # For addons the weapon name must be an entry in CfgWeapons.
    # 
    # Returns an array in format [x, y, z]
    #  
    # ==== Syntax
    #
    #      vehicleName weaponDirection weaponName
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    # *    +weaponName+ - String  
    #
    # ==== Returns
    #
    #      Array - format Vector3D
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #eyeDirection
    # 
    # Official Wiki: https://community.bistudio.com/wiki/weaponDirection
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _weaponVectorDir = player weaponDirection currentWeapon player;
    # 
    def weaponDirection _obj, _args
      "_obj weaponDirection _args;" 
    end

    # True if given soldier's weapon is lowered
    # 
    # ==== Syntax
    #
    #      weaponLowered unit
    #
    # ==== Parameters
    # 
    # *    +unit+ - Object  
    #
    # ==== Returns
    #
    #      Boolean
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/weaponLowered
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def weaponLowered _args
      "weaponLowered _args;" 
    end

    # Returns the current weapon state as an array of strings in the following format [WeaponName, MuzzleName, ModeName, MagazineName, AmmoCount] (AmmoCount is Number)
    # 
    # ==== Syntax
    #
    #      weaponState [vehicle, turretPath]
    #
    # ==== Parameters
    # 
    # *    +unitName+ - Object  
    # *    +vehicle+ - Object  
    # *    +turretPath+ - Array  
    #
    # ==== Returns
    #
    #      Array: ["M256","M256","M256","20Rnd_120mmSABOT_M1A2",20]
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/weaponState
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _weaponStatePlayer = weaponState player;
    # 
    # ====== Example 2:
    # 
    #    _weaponStateVehiclePlayer = weaponState [vehicle player,[0]];
    # 
    def weaponState _args
      "weaponState _args;" 
    end

    # Returns array of names of all Unit's weapons
    # 
    # ==== Syntax
    #
    #      Array = weapons vehicleName
    #
    # ==== Parameters
    # 
    # *    +vehicleName+ - Object  
    #
    # ==== Returns
    #
    #      Array of weapon names.
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #magazines, #weaponsTurret, #assignedVehicleRole - Link to game weapons category
    # 
    # Official Wiki: https://community.bistudio.com/wiki/weapons
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _wArray = weapons player
    # 
    def weapons _args
      "weapons _args;" 
    end

    # Returns an array with subarrays contains class names and also names of connected items of all the vehicle's weapons
    # 
    # ==== Syntax
    #
    #      weaponsItems vehicle
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object - unit or vehicle  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #primaryWeaponItems, #secondaryWeaponItems, #handgunItems, #addPrimaryWeaponItem, #addSecondaryWeaponItem, #addHandgunItem, #primaryWeapon, #secondaryWeapon, #handgunWeapon
    # 
    # Official Wiki: https://community.bistudio.com/wiki/weaponsItems
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    hint str weaponsItems player;
    #    [
    #    	[						//=PRIMARY=
    #    		"arifle_MX_ACO_pointer_F",		//weapon
    #    		"muzzle_snds_H",			//suppressor
    #    		"acc_pointer_IR",			//laser
    #    		"optic_Aco",				//optics
    #    		[					//loaded magazine
    #    			"30Rnd_65x39_caseless_mag",	//mag type
    #    			30				//mag ammo count
    #    		]
    #    	],
    #    	[						//=SECONDARY=
    #    		"launch_NLAW_F",
    #    		"",
    #    		"",
    #    		"",
    #    		[
    #    			"NLAW_F",
    #    			1
    #    		]
    #    	],
    #    	[						//=HANDGUN=
    #    		"hgun_P07_F",
    #    		"muzzle_snds_L",
    #    		"",
    #    		"",
    #    		[
    #    			"16Rnd_9x21_Mag",
    #    			11
    #    		]
    #    	]
    #    ]
    # 
    # ====== Example 2:
    # 
    #    hint str weaponsItems vehicle player;
    #    [
    #    	[
    #    		"gatling_30mm",
    #    		"",
    #    		"",
    #    		"",
    #    		[
    #    			"250Rnd_30mm_HE_shells",
    #    			250
    #    		]
    #    	],
    #    	[
    #    		"missiles_SCALPEL",
    #    		"",
    #    		"",
    #    		"",
    #    		[
    #    			"8Rnd_LG_scalpel",
    #    			8
    #    		]
    #    	],
    #    	[
    #    		"rockets_Skyfire",
    #    		"",
    #    		"",
    #    		"",
    #    		[
    #    			"38Rnd_80mm_rockets",
    #    			38
    #    		]
    #    	]
    #    ]
    # 
    def weaponsItems _args
      "weaponsItems _args;" 
    end

    # Returns all weapons of given turret.
    # 
    # ==== Description
    # 
    # Use turret path [-1] for driver's turret
    #  
    # ==== Syntax
    #
    #      vehicle weaponsTurret turretPath
    #
    # ==== Parameters
    # 
    # *    +vehicle+ - Object  
    # *    +turretPath+ - Array  
    #
    # ==== Returns
    #
    #      Array of Strings
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #addMagazineTurret, #magazinesTurret, #removeMagazinesTurret, #removeMagazineTurret, #weapons, #assignedVehicleRole
    # 
    # Official Wiki: https://community.bistudio.com/wiki/weaponsTurret
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _weapons = vehicle player weaponsTurret [0,0]
    # 
    # ====== Example 2:
    # 
    #    _weapons = _tank weaponsTurret [0]
    # 
    # ====== Example 3:
    # 
    #    _driverWeapon = _ka50pilot weaponsTurret [-1]
    # 
    # ====== Example 4:
    # 
    #    _weaponsForAnyTurrentPosition = (vehicle player) weaponsTurret ((assignedVehicleRole player) select 1)
    # 
    def weaponsTurret _obj, _args
      "_obj weaponsTurret _args;" 
    end

    # West side
    # 
    # ==== Syntax
    #
    #      Side = west
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Side
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #side, #east, #resistance, #civilian
    # 
    # Official Wiki: https://community.bistudio.com/wiki/west
    #
    # ==== Examples
    # 
    def west 
      "west" 
    end

    # Repeat Code while condition is true
    # 
    # ==== Syntax
    #
    #      while condition
    #
    # ==== Parameters
    # 
    # *    +condition+ - Code  
    #
    # ==== Returns
    #
    #      While Type
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Control Structures, #waitUntil
    # 
    # Official Wiki: https://community.bistudio.com/wiki/while
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    while { a < b } do { a = a + 1 };
    # 
    # ====== Example 2:
    # 
    #    A practical example: Repair all members of a group to such a level that they are able to stand up: {
    #        while { (not canStand _x) and (alive _x) } do {
    #            _x setDammage (getDammage _x) - 0.01;
    #        };
    #    } forEach units group unitname;
    # 
    def while _args
      "while _args;" 
    end

    # Returns the current wind vector (in m/s) as array [x, z, y]
    # 
    # ==== Syntax
    #
    #      wind
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #setWind, #windDir
    # 
    # Official Wiki: https://community.bistudio.com/wiki/wind
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _windarray = wind;
    # 
    def wind 
      "wind" 
    end

    # Returns the current wind azimut
    # 
    # ==== Syntax
    #
    #      windDir
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #wind
    # 
    # Official Wiki: https://community.bistudio.com/wiki/windDir
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def windDir 
      "windDir" 
    end

    # Returns the current wind strength
    # 
    # ==== Syntax
    #
    #      windStr
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      Number
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #gusts, #wind
    # 
    # Official Wiki: https://community.bistudio.com/wiki/windStr
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    # 
    def windStr 
      "windStr" 
    end

    # Execute the code inside the given namespace
    # 
    # ==== Syntax
    #
    #      with NameSpace do {...};
    #
    # ==== Parameters
    # 
    # *    +Namespace+ - Namespace  
    #
    # ==== Returns
    #
    #      Anything
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Forward Compatibility, #missionNamespace, #uiNamespace, #parsingNamespace
    # 
    # Official Wiki: https://community.bistudio.com/wiki/with
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    with missionNamespace do {global = global + 1;};
    # 
    def with _args
      "with _args;" 
    end

    # Return the name of the currently loaded world
    # 
    # ==== Syntax
    #
    #      String =  worldName
    #
    # ==== Parameters
    # 
    #
    # ==== Returns
    #
    #      String
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # Official Wiki: https://community.bistudio.com/wiki/worldName
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _name = worldName
    # 
    def worldName 
      "worldName" 
    end

    # Converts position from world space to object model space
    # 
    # ==== Syntax
    #
    #      Array =  objectName worldToModel worldPos
    #
    # ==== Parameters
    # 
    # *    +objectName+ - Object  
    # *    +worldPos+ - Array - format PositionAGL  
    #
    # ==== Returns
    #
    #      Array
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #modelToWorld
    # 
    # Official Wiki: https://community.bistudio.com/wiki/worldToModel
    #
    # ==== Examples
    # 
    def worldToModel _obj, _args
      "_obj worldToModel _args;" 
    end

    # Converts position in world space into screen (UI) space.
    # 
    # ==== Description
    # 
    # If a specified position is not within the current map view, an empty array is returned
    #  
    # ==== Syntax
    #
    #      worldToScreen position
    #
    # ==== Parameters
    # 
    # *    +position+ - Array - 2D or 3D position in format Position  
    #
    # ==== Returns
    #
    #      Array - Screen position in format [x,y] (upper left=[0,0], lower right=[1,1])
    #
    # ==== Multiplayer
    # 
    # -
    # 
    # ==== See Also
    # 
    # #screenToWorld, SafeZone
    # 
    # Official Wiki: https://community.bistudio.com/wiki/worldToScreen
    #
    # ==== Examples
    # 
    # ====== Example 1:
    # 
    #    _screenPos = worldToScreen getPos soldier1;
    # 
    # ====== Example 2:
    # 
    #    _screenPos = worldToScreen (player modelToWorld [0,10,0]);
    # 
    def worldToScreen _args
      "worldToScreen _args;" 
    end

end
